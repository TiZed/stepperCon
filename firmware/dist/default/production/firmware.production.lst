gplink-1.5.2 #1312 (Dec  8 2017)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 09/12/17  17:49:36


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.9 #10186 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec
                                           	CONFIG	FOSC=HSHP
                                           	CONFIG	PLLCFG=ON
                                           	CONFIG	WDTEN=SWON
                                           	CONFIG	XINST=OFF
                                           	CONFIG	CCP3MX=PORTE0
                                           	CONFIG	P2BMX=PORTC0
                                           	CONFIG	MCLRE=EXTMCLR


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_zero_cross
                                           	global	_state
                                           	global	_skip
                                           	global	_set_amp
                                           	global	_max_amp
                                           	global	_a_decay
                                           	global	_b_decay
                                           	global	_t_off
                                           	global	_t_blank_low
                                           	global	_t_blank_high
                                           	global	_step_a
                                           	global	_step_b
                                           	global	_pol_a
                                           	global	_pol_b
                                           	global	_dir
                                           	global	_pwm_lu
                                           	global	_i2c_address
                                           	global	_i2c_counter
                                           	global	_i2c_reg_addr
                                           	global	_i2c_regs
                                           	global	_i2c_dirty
                                           	global	_a_state
                                           	global	_b_state
                                           	global	_i2cSetup
                                           	global	_activeInts
                                           	global	_idleInts
                                           	global	_prep_pwm_lu
                                           	global	_set_op_vars
                                           	global	_delay_ms
                                           	global	_main
                                           	global	___EEPROM

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__moduchar
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	___fs2uint
                                           	extern	_read_regs
                                           	extern	_store_regs
                                           	extern	_compsSetup
                                           	extern	_ioSetup
                                           	extern	_pwmSetup
                                           	extern	_intSetup
                                           	extern	_phTimersSetup
                                           	extern	_resetCheck
                                           	extern	___uint2fs
                                           	extern	___fsdiv
                                           	extern	___sint2fs
                                           	extern	___fsmul
                                           	extern	___fsadd

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           _pwm_base	db	0x00, 0x00, 0x32, 0x00, 0x64, 0x00, 0x95, 0x00, 0xc4, 0x00, 0xf1, 0x00
                                           	db	0x1c, 0x01, 0x45, 0x01, 0x6a, 0x01, 0x8c, 0x01, 0xaa, 0x01, 0xc4, 0x01
                                           	db	0xd9, 0x01, 0xea, 0x01, 0xf6, 0x01, 0xfe, 0x01, 0x00, 0x02, 0xfe, 0x01
                                           	db	0xf6, 0x01, 0xea, 0x01, 0xd9, 0x01, 0xc4, 0x01, 0xaa, 0x01, 0x8c, 0x01
                                           	db	0x6a, 0x01, 0x45, 0x01, 0x1c, 0x01, 0xf1, 0x00, 0xc4, 0x00, 0x95, 0x00
                                           	db	0x64, 0x00, 0x32, 0x00, 0x00, 0x00, 0xce, 0xff, 0x9c, 0xff, 0x6b, 0xff
                                           	db	0x3c, 0xff, 0x0f, 0xff, 0xe4, 0xfe, 0xbb, 0xfe, 0x96, 0xfe, 0x74, 0xfe
                                           	db	0x56, 0xfe, 0x3b, 0xfe, 0x27, 0xfe, 0x16, 0xfe, 0x0a, 0xfe, 0x02, 0xfe
                                           	db	0x00, 0xfe, 0x02, 0xfe, 0x0a, 0xfe, 0x16, 0xfe, 0x27, 0xfe, 0x3c, 0xfe
                                           	db	0x56, 0xfe, 0x74, 0xfe, 0x96, 0xfe, 0xbb, 0xfe, 0xe4, 0xfe, 0x0f, 0xff
                                           	db	0x3c, 0xff, 0x6b, 0xff, 0x9c, 0xff, 0xce, 0xff


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1

                                           udata_stepperCon_0	udata
                                           _zero_cross	res	2

                                           udata_stepperCon_1	udata
                                           _state	res	1

                                           udata_stepperCon_2	udata
                                           _dir	res	1

                                           udata_stepperCon_3	udata
                                           _t_blank_high	res	1

                                           udata_stepperCon_4	udata
                                           _t_blank_low	res	1

                                           udata_stepperCon_5	udata
                                           _a_state	res	1

                                           udata_stepperCon_6	udata
                                           _t_off	res	1

                                           udata_stepperCon_7	udata
                                           _b_state	res	1

                                           udata_stepperCon_8	udata
                                           _a_decay	res	1

                                           udata_stepperCon_9	udata
                                           _pol_a	res	1

                                           udata_stepperCon_10	udata
                                           _b_decay	res	1

                                           udata_stepperCon_11	udata
                                           _pol_b	res	1

                                           udata_stepperCon_12	udata
                                           _i2c_counter	res	1

                                           udata_stepperCon_13	udata
                                           _i2c_reg_addr	res	1

                                           udata_stepperCon_14	udata
                                           _i2c_dirty	res	1

                                           udata_stepperCon_15	udata
                                           _i2c_regs	res	9

                                           udata_stepperCon_16	udata
                                           _i2c_address	res	1

                                           udata_stepperCon_17	udata
                                           _set_amp	res	2

                                           udata_stepperCon_18	udata
                                           _max_amp	res	2

                                           udata_stepperCon_19	udata
                                           _pwm_lu	res	128

                                           udata_stepperCon_20	udata
                                           _skip	res	1

                                           udata_stepperCon_21	udata
                                           _step_a	res	1

                                           udata_stepperCon_22	udata
                                           _step_b	res	1

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x1_highInt	code	0X000008
                                           ivec_0x1_highInt:
000008   ef3a     goto    0x001674         	GOTO	_highInt
00000a   f00b

                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x2_lowInt	code	0X000018
                                           ivec_0x2_lowInt:
000018   efd6     goto    0x0017ac         	GOTO	_lowInt
00001a   f00b

                                           ; ; Starting pCode block for absolute Ival
                                           S_stepperCon____EEPROM	code	0XF00000
                                           ___EEPROM:
                                           	DB	0x44, 0x02, 0x08, 0x07, 0x74, 0x0e, 0x14, 0x0a, 0x01





                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stepperCon__main	code
                                           _main:
                                           ;	.line	429; stepperCon.c	uint8_t pwm_a_l = 0, pwm_a_h = 0, pwm_b_l = 0, pwm_b_h = 0 ;
00001c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
00001e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000020   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000022   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           ;	.line	431; stepperCon.c	ioSetup() ;                 // Setup IO ports
000024   eca1     call    0x002142, 0x0    	CALL	_ioSetup
000026   f010
                                           ;	.line	434; stepperCon.c	if(RCONbits.POR) {
000028   a2d0     btfss   0xd0, 0x1, 0x0   	BTFSS	_RCONbits, 1
00002a   d002     bra     0x000030         	BRA	_00299_DS_
                                           ;	.line	435; stepperCon.c	resetCheck() ;
00002c   ec67     call    0x001cce, 0x0    	CALL	_resetCheck
00002e   f00e
                                           _00299_DS_:
                                           ;	.line	440; stepperCon.c	RCONbits.POR = 1 ;
000030   82d0     bsf     0xd0, 0x1, 0x0   	BSF	_RCONbits, 1
                                           ;	.line	441; stepperCon.c	RCONbits.BOR = 1 ;
000032   80d0     bsf     0xd0, 0x0, 0x0   	BSF	_RCONbits, 0
                                           ;	.line	443; stepperCon.c	read_regs(i2c_regs, sizeof(i2c_regs)) ;  // Populate I2C registers from EEPROM
000034   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
000036   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000038   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
00003a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00003c   0e80     movlw   0x80             	MOVLW	0x80
00003e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000040   0e09     movlw   0x09             	MOVLW	0x09
000042   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000044   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000046   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000048   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00004a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00004c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00004e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000050   ecb8     call    0x001d70, 0x0    	CALL	_read_regs
000052   f00e
000054   0e04     movlw   0x04             	MOVLW	0x04
000056   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	444; stepperCon.c	set_op_vars() ;             // Set operation variables from I2C registers
000058   ec15     call    0x001c2a, 0x0    	CALL	_set_op_vars
00005a   f00e
00005c   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	445; stepperCon.c	i2c_dirty = 0 ;             // Clear I2C dirty flag
00005e   6b31     clrf    0x31, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	447; stepperCon.c	i2cSetup() ;                // Setup I2C I/F
000060   ec1e     call    0x00223c, 0x0    	CALL	_i2cSetup
000062   f011
                                           ;	.line	448; stepperCon.c	intSetup() ;                // Interrupts setup
000064   ec32     call    0x002264, 0x0    	CALL	_intSetup
000066   f011
                                           ;	.line	449; stepperCon.c	compsSetup() ;              // Comparators setup
000068   ec05     call    0x00220a, 0x0    	CALL	_compsSetup
00006a   f011
                                           ;	.line	450; stepperCon.c	idleInts() ;                // Set interrupts to 'idle' state
00006c   ec46     call    0x00228c, 0x0    	CALL	_idleInts
00006e   f011
000070   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	453; stepperCon.c	state = IDLE ;              // Start in 'idle' state
000072   6b24     clrf    0x24, 0x1        	CLRF	_state, B
                                           ;	.line	455; stepperCon.c	phTimersSetup() ;
000074   ec73     call    0x0020e6, 0x0    	CALL	_phTimersSetup
000076   f010
                                           ;	.line	458; stepperCon.c	PORTDbits.RD2 = 1 ;     // Turn blue LED on
000078   8483     bsf     0x83, 0x2, 0x0   	BSF	_PORTDbits, 2
                                           ;	.line	459; stepperCon.c	delay_ms(300) ;    
00007a   0e01     movlw   0x01             	MOVLW	0x01
00007c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00007e   0e2c     movlw   0x2c             	MOVLW	0x2c
000080   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000082   ec06     call    0x00200c, 0x0    	CALL	_delay_ms
000084   f010
000086   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000088   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	460; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
00008a   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
                                           ;	.line	462; stepperCon.c	WDTCON = 1 ;        // Enable watchdog timer
00008c   0e01     movlw   0x01             	MOVLW	0x01
00008e   6ed1     movwf   0xd1, 0x0        	MOVWF	_WDTCON
                                           _00435_DS_:
000090   0004     clrwdt                   	clrwdt	
000092   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	468; stepperCon.c	switch(state) {
000094   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
000096   e102     bnz     0x00009c         	BNZ	_00602_DS_
000098   ef3e     goto    0x00067c         	GOTO	_00428_DS_
00009a   f003
                                           _00602_DS_:
00009c   010f     movlb   0xf              	BANKSEL	_state
00009e   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000a0   0a01     xorlw   0x01             	XORLW	0x01
0000a2   e012     bz      0x0000c8         	BZ	_00300_DS_
                                           _00604_DS_:
0000a4   010f     movlb   0xf              	BANKSEL	_state
0000a6   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000a8   0a02     xorlw   0x02             	XORLW	0x02
0000aa   e102     bnz     0x0000b0         	BNZ	_00606_DS_
0000ac   effc     goto    0x0005f8         	GOTO	_00407_DS_
0000ae   f002
                                           _00606_DS_:
0000b0   010f     movlb   0xf              	BANKSEL	_state
0000b2   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000b4   0a04     xorlw   0x04             	XORLW	0x04
0000b6   e101     bnz     0x0000ba         	BNZ	_00608_DS_
0000b8   d15c     bra     0x000372         	BRA	_00348_DS_
                                           _00608_DS_:
0000ba   010f     movlb   0xf              	BANKSEL	_state
0000bc   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000be   0a06     xorlw   0x06             	XORLW	0x06
0000c0   e102     bnz     0x0000c6         	BNZ	_00610_DS_
0000c2   ef46     goto    0x00048c         	GOTO	_00381_DS_
0000c4   f002
                                           _00610_DS_:
0000c6   d7e4     bra     0x000090         	BRA	_00435_DS_
                                           _00300_DS_:
                                           ;	.line	470; stepperCon.c	LATDbits.LATD2 = !LATDbits.LATD2 ;
0000c8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0000ca   b48c     btfsc   0x8c, 0x2, 0x0   	BTFSC	_LATDbits, 2
0000cc   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0000ce   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000d0   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0000d2   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0000d4   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0000d6   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0000d8   3604     rlcf    0x04, 0x1, 0x0   	RLCF	r0x04, F
0000da   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000dc   0b01     andlw   0x01             	ANDLW	0x01
0000de   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0000e0   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0000e2   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0000e4   508c     movf    0x8c, 0x0, 0x0   	MOVF	_LATDbits, W
0000e6   0bfb     andlw   0xfb             	ANDLW	0xfb
0000e8   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0000ea   6e8c     movwf   0x8c, 0x0        	MOVWF	_LATDbits
0000ec   010f     movlb   0xf              	BANKSEL	_skip
                                           ;	.line	474; stepperCon.c	if (skip == STEP_1) step_a = STEPS / 2 ;
0000ee   5133     movf    0x33, 0x0, 0x1   	MOVF	_skip, W, B
0000f0   0a10     xorlw   0x10             	XORLW	0x10
0000f2   e104     bnz     0x0000fc         	BNZ	_00302_DS_
0000f4   0e08     movlw   0x08             	MOVLW	0x08
0000f6   010f     movlb   0xf              	BANKSEL	_step_a
0000f8   6f34     movwf   0x34, 0x1        	MOVWF	_step_a, B
0000fa   d002     bra     0x000100         	BRA	_00303_DS_
                                           _00302_DS_:
0000fc   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	475; stepperCon.c	else step_a = 0 ;
0000fe   6b34     clrf    0x34, 0x1        	CLRF	_step_a, B
                                           _00303_DS_:
                                           ;	.line	478; stepperCon.c	step_b = step_a + STEPS ;
000100   0e10     movlw   0x10             	MOVLW	0x10
000102   010f     movlb   0xf              	BANKSEL	_step_a
000104   2534     addwf   0x34, 0x0, 0x1   	ADDWF	_step_a, W, B
000106   010f     movlb   0xf              	BANKSEL	_step_b
000108   6f35     movwf   0x35, 0x1        	MOVWF	_step_b, B
                                           ;	.line	481; stepperCon.c	CCPR1H = 0 ;
00010a   6abf     clrf    0xbf, 0x0        	CLRF	_CCPR1H
                                           ;	.line	482; stepperCon.c	CCPR1L = t_off ;
00010c   cf29     movff   0xf29, 0xfbe     	MOVFF	_t_off, _CCPR1L
00010e   ffbe
                                           ;	.line	484; stepperCon.c	CCPR2H = 0 ;
000110   6a68     clrf    0x68, 0x0        	CLRF	_CCPR2H
                                           ;	.line	485; stepperCon.c	CCPR2L = t_off ;
000112   cf29     movff   0xf29, 0xf67     	MOVFF	_t_off, _CCPR2L
000114   ff67
000116   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	487; stepperCon.c	if (step_a > THREE_QUARTERS) a_decay = FAST_DECAY ;
000118   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00011a   0f80     addlw   0x80             	ADDLW	0x80
00011c   0f4f     addlw   0x4f             	ADDLW	0x4f
00011e   e304     bnc     0x000128         	BNC	_00311_DS_
000120   0e01     movlw   0x01             	MOVLW	0x01
000122   010f     movlb   0xf              	BANKSEL	_a_decay
000124   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
000126   d013     bra     0x00014e         	BRA	_00312_DS_
                                           _00311_DS_:
000128   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	488; stepperCon.c	else if (step_a >= HALF_CYCLE) a_decay = SLOW_DECAY ;
00012a   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00012c   0f80     addlw   0x80             	ADDLW	0x80
00012e   0f60     addlw   0x60             	ADDLW	0x60
000130   e303     bnc     0x000138         	BNC	_00308_DS_
000132   010f     movlb   0xf              	BANKSEL	_a_decay
000134   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
000136   d00b     bra     0x00014e         	BRA	_00312_DS_
                                           _00308_DS_:
000138   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	489; stepperCon.c	else if (step_a > STEPS) a_decay = FAST_DECAY ;
00013a   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00013c   0f80     addlw   0x80             	ADDLW	0x80
00013e   0f6f     addlw   0x6f             	ADDLW	0x6f
000140   e304     bnc     0x00014a         	BNC	_00305_DS_
000142   0e01     movlw   0x01             	MOVLW	0x01
000144   010f     movlb   0xf              	BANKSEL	_a_decay
000146   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
000148   d002     bra     0x00014e         	BRA	_00312_DS_
                                           _00305_DS_:
00014a   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	490; stepperCon.c	else a_decay = SLOW_DECAY ;
00014c   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
                                           _00312_DS_:
00014e   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	492; stepperCon.c	if (step_b > THREE_QUARTERS) b_decay = FAST_DECAY ;
000150   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000152   0f80     addlw   0x80             	ADDLW	0x80
000154   0f4f     addlw   0x4f             	ADDLW	0x4f
000156   e304     bnc     0x000160         	BNC	_00320_DS_
000158   0e01     movlw   0x01             	MOVLW	0x01
00015a   010f     movlb   0xf              	BANKSEL	_b_decay
00015c   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
00015e   d013     bra     0x000186         	BRA	_00321_DS_
                                           _00320_DS_:
000160   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	493; stepperCon.c	else if (step_b >= HALF_CYCLE) b_decay = SLOW_DECAY ;
000162   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000164   0f80     addlw   0x80             	ADDLW	0x80
000166   0f60     addlw   0x60             	ADDLW	0x60
000168   e303     bnc     0x000170         	BNC	_00317_DS_
00016a   010f     movlb   0xf              	BANKSEL	_b_decay
00016c   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
00016e   d00b     bra     0x000186         	BRA	_00321_DS_
                                           _00317_DS_:
000170   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	494; stepperCon.c	else if (step_b > STEPS) b_decay = FAST_DECAY ;
000172   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000174   0f80     addlw   0x80             	ADDLW	0x80
000176   0f6f     addlw   0x6f             	ADDLW	0x6f
000178   e304     bnc     0x000182         	BNC	_00314_DS_
00017a   0e01     movlw   0x01             	MOVLW	0x01
00017c   010f     movlb   0xf              	BANKSEL	_b_decay
00017e   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
000180   d002     bra     0x000186         	BRA	_00321_DS_
                                           _00314_DS_:
000182   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	495; stepperCon.c	else b_decay = SLOW_DECAY ;
000184   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
                                           _00321_DS_:
                                           ;	.line	497; stepperCon.c	prep_pwm_lu() ;         // prepare PWM lookup table
000186   ec85     call    0x00130a, 0x0    	CALL	_prep_pwm_lu
000188   f009
                                           ;	.line	499; stepperCon.c	pwmSetup() ;            // Activate PWM
00018a   ecc7     call    0x00218e, 0x0    	CALL	_pwmSetup
00018c   f010
                                           ;	.line	500; stepperCon.c	activeInts() ;          // Set active state interrupts
00018e   ecea     call    0x0021d4, 0x0    	CALL	_activeInts
000190   f010
                                           ;	.line	502; stepperCon.c	T1CONbits.TMR1ON = 0 ;  // Toff timer off
000192   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	503; stepperCon.c	TMR1L = 0 ;             // Clear off timer
000194   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	504; stepperCon.c	TMR1H = 0 ;
000196   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
                                           ;	.line	506; stepperCon.c	T3CONbits.TMR3ON = 0 ;  // Toff timer off
000198   90b1     bcf     0xb1, 0x0, 0x0   	BCF	_T3CONbits, 0
                                           ;	.line	507; stepperCon.c	TMR3L = 0 ;             // Clear off timer 
00019a   6ab2     clrf    0xb2, 0x0        	CLRF	_TMR3L
                                           ;	.line	508; stepperCon.c	TMR3H = 0 ;
00019c   6ab3     clrf    0xb3, 0x0        	CLRF	_TMR3H
                                           ;	.line	510; stepperCon.c	a_state = T_DRIVE ;
00019e   0e02     movlw   0x02             	MOVLW	0x02
0001a0   010f     movlb   0xf              	BANKSEL	_a_state
0001a2   6f28     movwf   0x28, 0x1        	MOVWF	_a_state, B
                                           ;	.line	511; stepperCon.c	b_state = T_DRIVE ;
0001a4   0e02     movlw   0x02             	MOVLW	0x02
0001a6   010f     movlb   0xf              	BANKSEL	_b_state
0001a8   6f2a     movwf   0x2a, 0x1        	MOVWF	_b_state, B
0001aa   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	514; stepperCon.c	if (step_a == HALF_CYCLE || step_a == 0) pol_a = 2 ;
0001ac   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0001ae   0a20     xorlw   0x20             	XORLW	0x20
0001b0   e003     bz      0x0001b8         	BZ	_00325_DS_
                                           _00620_DS_:
0001b2   010f     movlb   0xf              	BANKSEL	_step_a
0001b4   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0001b6   e104     bnz     0x0001c0         	BNZ	_00326_DS_
                                           _00325_DS_:
0001b8   0e02     movlw   0x02             	MOVLW	0x02
0001ba   010f     movlb   0xf              	BANKSEL	_pol_a
0001bc   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
0001be   d00b     bra     0x0001d6         	BRA	_00327_DS_
                                           _00326_DS_:
0001c0   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	515; stepperCon.c	else if (step_a > HALF_CYCLE) pol_a = 0 ;
0001c2   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0001c4   0f80     addlw   0x80             	ADDLW	0x80
0001c6   0f5f     addlw   0x5f             	ADDLW	0x5f
0001c8   e303     bnc     0x0001d0         	BNC	_00323_DS_
0001ca   010f     movlb   0xf              	BANKSEL	_pol_a
0001cc   6b2c     clrf    0x2c, 0x1        	CLRF	_pol_a, B
0001ce   d003     bra     0x0001d6         	BRA	_00327_DS_
                                           _00323_DS_:
                                           ;	.line	516; stepperCon.c	else pol_a = 1 ;
0001d0   0e01     movlw   0x01             	MOVLW	0x01
0001d2   010f     movlb   0xf              	BANKSEL	_pol_a
0001d4   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
                                           _00327_DS_:
0001d6   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	518; stepperCon.c	if (step_b == HALF_CYCLE || step_b == 0) pol_b = 2 ;
0001d8   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0001da   0a20     xorlw   0x20             	XORLW	0x20
0001dc   e003     bz      0x0001e4         	BZ	_00332_DS_
                                           _00623_DS_:
0001de   010f     movlb   0xf              	BANKSEL	_step_b
0001e0   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0001e2   e104     bnz     0x0001ec         	BNZ	_00333_DS_
                                           _00332_DS_:
0001e4   0e02     movlw   0x02             	MOVLW	0x02
0001e6   010f     movlb   0xf              	BANKSEL	_pol_b
0001e8   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
0001ea   d00b     bra     0x000202         	BRA	_00334_DS_
                                           _00333_DS_:
0001ec   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	519; stepperCon.c	else if (step_b > HALF_CYCLE) pol_b = 0 ;
0001ee   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0001f0   0f80     addlw   0x80             	ADDLW	0x80
0001f2   0f5f     addlw   0x5f             	ADDLW	0x5f
0001f4   e303     bnc     0x0001fc         	BNC	_00330_DS_
0001f6   010f     movlb   0xf              	BANKSEL	_pol_b
0001f8   6b2e     clrf    0x2e, 0x1        	CLRF	_pol_b, B
0001fa   d003     bra     0x000202         	BRA	_00334_DS_
                                           _00330_DS_:
                                           ;	.line	520; stepperCon.c	else pol_b = 1 ;
0001fc   0e01     movlw   0x01             	MOVLW	0x01
0001fe   010f     movlb   0xf              	BANKSEL	_pol_b
000200   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
                                           _00334_DS_:
                                           ;	.line	522; stepperCon.c	CM1CON0 = 0x09 ;
000202   0e09     movlw   0x09             	MOVLW	0x09
000204   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           ;	.line	523; stepperCon.c	CM2CON0 = 0x08 ;
000206   0e08     movlw   0x08             	MOVLW	0x08
000208   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
00020a   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	525; stepperCon.c	if (pol_a == 2) {
00020c   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
00020e   0a02     xorlw   0x02             	XORLW	0x02
000210   e103     bnz     0x000218         	BNZ	_00340_DS_
                                           ;	.line	526; stepperCon.c	LATCbits.LATC1 = 0 ;
000212   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	527; stepperCon.c	LATCbits.LATC0 = 0 ;
000214   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
000216   d00c     bra     0x000230         	BRA	_00341_DS_
                                           _00340_DS_:
000218   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	529; stepperCon.c	else if (pol_a) {               // Forward current, Phase-A
00021a   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
00021c   e005     bz      0x000228         	BZ	_00337_DS_
                                           ;	.line	530; stepperCon.c	LATCbits.LATC1 = 0 ;
00021e   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	531; stepperCon.c	LATCbits.LATC0 = 1 ;
000220   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
                                           ;	.line	532; stepperCon.c	CM1CON0 = 0x99 ; 
000222   0e99     movlw   0x99             	MOVLW	0x99
000224   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
000226   d004     bra     0x000230         	BRA	_00341_DS_
                                           _00337_DS_:
                                           ;	.line	535; stepperCon.c	LATCbits.LATC0 = 0 ;
000228   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	536; stepperCon.c	LATCbits.LATC1 = 1 ;
00022a   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
                                           ;	.line	537; stepperCon.c	CM1CON0 = 0x89 ; 
00022c   0e89     movlw   0x89             	MOVLW	0x89
00022e   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           _00341_DS_:
000230   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	540; stepperCon.c	if(pol_b == 2) {
000232   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000234   0a02     xorlw   0x02             	XORLW	0x02
000236   e103     bnz     0x00023e         	BNZ	_00346_DS_
                                           ;	.line	541; stepperCon.c	LATCbits.LATC2 = 0 ;
000238   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	542; stepperCon.c	LATDbits.LATD5 = 0 ;
00023a   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
00023c   d00c     bra     0x000256         	BRA	_00347_DS_
                                           _00346_DS_:
00023e   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	544; stepperCon.c	else if (pol_b) {               // Forward current, Phase-B
000240   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000242   e005     bz      0x00024e         	BZ	_00343_DS_
                                           ;	.line	545; stepperCon.c	LATCbits.LATC2 = 0 ;
000244   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	546; stepperCon.c	LATDbits.LATD5 = 1 ;
000246   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
                                           ;	.line	547; stepperCon.c	CM2CON0 = 0x98 ;
000248   0e98     movlw   0x98             	MOVLW	0x98
00024a   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
00024c   d004     bra     0x000256         	BRA	_00347_DS_
                                           _00343_DS_:
                                           ;	.line	550; stepperCon.c	LATDbits.LATD5 = 0 ;
00024e   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	551; stepperCon.c	LATCbits.LATC2 = 1 ;
000250   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
                                           ;	.line	552; stepperCon.c	CM2CON0 = 0x88 ;
000252   0e88     movlw   0x88             	MOVLW	0x88
000254   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
                                           _00347_DS_:
000256   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	556; stepperCon.c	CCP5CONbits.DC5B = 0x0c + (pwm_lu[step_a] & 0x3) << 4 ;
000258   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00025a   0d02     mullw   0x02             	MULLW	0x02
00025c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00025e   010f     movlb   0xf              	BANKSEL	_step_a
000260   bf34     btfsc   0x34, 0x7, 0x1   	BTFSC	_step_a, 7, B
000262   0802     sublw   0x02             	SUBLW	0x02
000264   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000266   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000268   f004
00026a   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00026c   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00026e   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000270   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000272   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000274   ffe9
000276   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000278   ffea
00027a   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00027c   f004
00027e   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
000280   f005
000282   0e03     movlw   0x03             	MOVLW	0x03
000284   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
000286   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
000288   0bf0     andlw   0xf0             	ANDLW	0xf0
00028a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00028c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00028e   0b03     andlw   0x03             	ANDLW	0x03
000290   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000292   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000294   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
000296   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
000298   0bcf     andlw   0xcf             	ANDLW	0xcf
00029a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00029c   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
00029e   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
0002a0   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	557; stepperCon.c	CCPR5L = pwm_lu[step_a] >> 2 ;
0002a2   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0002a4   0d02     mullw   0x02             	MULLW	0x02
0002a6   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0002a8   010f     movlb   0xf              	BANKSEL	_step_a
0002aa   bf34     btfsc   0x34, 0x7, 0x1   	BTFSC	_step_a, 7, B
0002ac   0802     sublw   0x02             	SUBLW	0x02
0002ae   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0002b0   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0002b2   f004
0002b4   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0002b6   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002b8   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0002ba   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0002bc   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0002be   ffe9
0002c0   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0002c2   ffea
0002c4   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0002c6   f004
0002c8   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0002ca   f005
0002cc   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002ce   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0002d0   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0002d2   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002d4   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0002d6   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0002d8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0002da   010f     movlb   0xf              	BANKSEL	_CCPR5L
0002dc   6f55     movwf   0x55, 0x1        	MOVWF	_CCPR5L, B
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
0002de   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	559; stepperCon.c	CCP4CONbits.DC4B = 0x0c + (pwm_lu[step_b] & 0x3) << 4 ;
0002e0   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0002e2   0d02     mullw   0x02             	MULLW	0x02
0002e4   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0002e6   010f     movlb   0xf              	BANKSEL	_step_b
0002e8   bf35     btfsc   0x35, 0x7, 0x1   	BTFSC	_step_b, 7, B
0002ea   0802     sublw   0x02             	SUBLW	0x02
0002ec   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0002ee   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0002f0   f004
0002f2   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0002f4   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002f6   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0002f8   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0002fa   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0002fc   ffe9
0002fe   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000300   ffea
000302   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000304   f004
000306   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
000308   f005
00030a   0e03     movlw   0x03             	MOVLW	0x03
00030c   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
00030e   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
000310   0bf0     andlw   0xf0             	ANDLW	0xf0
000312   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000314   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000316   0b03     andlw   0x03             	ANDLW	0x03
000318   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00031a   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00031c   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
00031e   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
000320   0bcf     andlw   0xcf             	ANDLW	0xcf
000322   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000324   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000326   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
000328   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	560; stepperCon.c	CCPR4L = pwm_lu[step_b] >> 2 ;
00032a   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
00032c   0d02     mullw   0x02             	MULLW	0x02
00032e   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000330   010f     movlb   0xf              	BANKSEL	_step_b
000332   bf35     btfsc   0x35, 0x7, 0x1   	BTFSC	_step_b, 7, B
000334   0802     sublw   0x02             	SUBLW	0x02
000336   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000338   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
00033a   f004
00033c   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00033e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000340   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000342   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000344   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000346   ffe9
000348   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
00034a   ffea
00034c   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00034e   f004
000350   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
000352   f005
000354   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000356   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
000358   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
00035a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00035c   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
00035e   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000360   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000362   010f     movlb   0xf              	BANKSEL	_CCPR4L
000364   6f58     movwf   0x58, 0x1        	MOVWF	_CCPR4L, B
                                           ;	.line	562; stepperCon.c	PORTAbits.RA4 = 1 ;
000366   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
                                           ;	.line	563; stepperCon.c	PORTAbits.RA5 = 1 ; 
000368   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
                                           ;	.line	565; stepperCon.c	state = NEXT_STEP ;
00036a   0e06     movlw   0x06             	MOVLW	0x06
00036c   010f     movlb   0xf              	BANKSEL	_state
00036e   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	566; stepperCon.c	break ;
000370   d68f     bra     0x000090         	BRA	_00435_DS_
                                           _00348_DS_:
                                           ;	.line	569; stepperCon.c	CM1CON0 = 0x09 ;
000372   0e09     movlw   0x09             	MOVLW	0x09
000374   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           ;	.line	570; stepperCon.c	CM2CON0 = 0x08 ;
000376   0e08     movlw   0x08             	MOVLW	0x08
000378   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           ;	.line	572; stepperCon.c	CCP5CONbits.DC5B = pwm_a_l ;             // Set PWM duty cycle, Phase-A
00037a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00037c   0b03     andlw   0x03             	ANDLW	0x03
00037e   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000380   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000382   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
000384   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
000386   0bcf     andlw   0xcf             	ANDLW	0xcf
000388   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00038a   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
00038c   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ;	.line	573; stepperCon.c	CCPR5L = pwm_a_h ;
00038e   c001     movff   0x001, 0xf55     	MOVFF	r0x01, _CCPR5L
000390   ff55
                                           ;	.line	575; stepperCon.c	CCP4CONbits.DC4B = pwm_b_l ;             // Set PWM duty cycle, Phase-B
000392   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000394   0b03     andlw   0x03             	ANDLW	0x03
000396   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000398   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00039a   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
00039c   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
00039e   0bcf     andlw   0xcf             	ANDLW	0xcf
0003a0   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0003a2   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
0003a4   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	576; stepperCon.c	CCPR4L = pwm_b_h ;
0003a6   c003     movff   0x003, 0xf58     	MOVFF	r0x03, _CCPR4L
0003a8   ff58
0003aa   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	578; stepperCon.c	if (step_a > THREE_QUARTERS && step_a < (FULL_CYCLE - 1)) {
0003ac   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0003ae   0f80     addlw   0x80             	ADDLW	0x80
0003b0   0f4f     addlw   0x4f             	ADDLW	0x4f
0003b2   e30a     bnc     0x0003c8         	BNC	_00356_DS_
0003b4   010f     movlb   0xf              	BANKSEL	_step_a
0003b6   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0003b8   0f80     addlw   0x80             	ADDLW	0x80
0003ba   0f41     addlw   0x41             	ADDLW	0x41
0003bc   e205     bc      0x0003c8         	BC	_00356_DS_
                                           ;	.line	579; stepperCon.c	a_decay = FAST_DECAY ;
0003be   0e01     movlw   0x01             	MOVLW	0x01
0003c0   010f     movlb   0xf              	BANKSEL	_a_decay
0003c2   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
                                           ;	.line	580; stepperCon.c	PORTAbits.RA4 = 1 ;
0003c4   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
0003c6   d014     bra     0x0003f0         	BRA	_00357_DS_
                                           _00356_DS_:
0003c8   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	582; stepperCon.c	else if (step_a >= HALF_CYCLE) a_decay = SLOW_DECAY ;
0003ca   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0003cc   0f80     addlw   0x80             	ADDLW	0x80
0003ce   0f60     addlw   0x60             	ADDLW	0x60
0003d0   e303     bnc     0x0003d8         	BNC	_00353_DS_
0003d2   010f     movlb   0xf              	BANKSEL	_a_decay
0003d4   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
0003d6   d00c     bra     0x0003f0         	BRA	_00357_DS_
                                           _00353_DS_:
0003d8   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	583; stepperCon.c	else if (step_a > STEPS) {
0003da   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0003dc   0f80     addlw   0x80             	ADDLW	0x80
0003de   0f6f     addlw   0x6f             	ADDLW	0x6f
0003e0   e305     bnc     0x0003ec         	BNC	_00350_DS_
                                           ;	.line	584; stepperCon.c	a_decay = FAST_DECAY ;
0003e2   0e01     movlw   0x01             	MOVLW	0x01
0003e4   010f     movlb   0xf              	BANKSEL	_a_decay
0003e6   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
                                           ;	.line	585; stepperCon.c	PORTAbits.RA4 = 1 ;
0003e8   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
0003ea   d002     bra     0x0003f0         	BRA	_00357_DS_
                                           _00350_DS_:
0003ec   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	587; stepperCon.c	else a_decay = SLOW_DECAY ;
0003ee   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
                                           _00357_DS_:
0003f0   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	589; stepperCon.c	if (step_b > THREE_QUARTERS && step_b < (FULL_CYCLE - 1)) {
0003f2   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0003f4   0f80     addlw   0x80             	ADDLW	0x80
0003f6   0f4f     addlw   0x4f             	ADDLW	0x4f
0003f8   e30a     bnc     0x00040e         	BNC	_00366_DS_
0003fa   010f     movlb   0xf              	BANKSEL	_step_b
0003fc   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0003fe   0f80     addlw   0x80             	ADDLW	0x80
000400   0f41     addlw   0x41             	ADDLW	0x41
000402   e205     bc      0x00040e         	BC	_00366_DS_
                                           ;	.line	590; stepperCon.c	b_decay = FAST_DECAY ;
000404   0e01     movlw   0x01             	MOVLW	0x01
000406   010f     movlb   0xf              	BANKSEL	_b_decay
000408   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
                                           ;	.line	591; stepperCon.c	PORTAbits.RA5 = 1 ;
00040a   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
00040c   d014     bra     0x000436         	BRA	_00367_DS_
                                           _00366_DS_:
00040e   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	593; stepperCon.c	else if (step_b >= HALF_CYCLE) b_decay = SLOW_DECAY ;
000410   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000412   0f80     addlw   0x80             	ADDLW	0x80
000414   0f60     addlw   0x60             	ADDLW	0x60
000416   e303     bnc     0x00041e         	BNC	_00363_DS_
000418   010f     movlb   0xf              	BANKSEL	_b_decay
00041a   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
00041c   d00c     bra     0x000436         	BRA	_00367_DS_
                                           _00363_DS_:
00041e   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	594; stepperCon.c	else if (step_b > STEPS) {
000420   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000422   0f80     addlw   0x80             	ADDLW	0x80
000424   0f6f     addlw   0x6f             	ADDLW	0x6f
000426   e305     bnc     0x000432         	BNC	_00360_DS_
                                           ;	.line	595; stepperCon.c	b_decay = FAST_DECAY ;
000428   0e01     movlw   0x01             	MOVLW	0x01
00042a   010f     movlb   0xf              	BANKSEL	_b_decay
00042c   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
                                           ;	.line	596; stepperCon.c	PORTAbits.RA5 = 1 ;
00042e   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
000430   d002     bra     0x000436         	BRA	_00367_DS_
                                           _00360_DS_:
000432   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	598; stepperCon.c	else b_decay = SLOW_DECAY ;
000434   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
                                           _00367_DS_:
000436   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	600; stepperCon.c	if (pol_a == 2) {
000438   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
00043a   0a02     xorlw   0x02             	XORLW	0x02
00043c   e103     bnz     0x000444         	BNZ	_00373_DS_
                                           ;	.line	601; stepperCon.c	LATCbits.LATC1 = 0 ;
00043e   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	602; stepperCon.c	LATCbits.LATC0 = 0 ;
000440   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
000442   d00c     bra     0x00045c         	BRA	_00374_DS_
                                           _00373_DS_:
000444   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	604; stepperCon.c	else if (pol_a) {               // Forward current, Phase-A
000446   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
000448   e005     bz      0x000454         	BZ	_00370_DS_
                                           ;	.line	605; stepperCon.c	LATCbits.LATC1 = 0 ;
00044a   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	606; stepperCon.c	LATCbits.LATC0 = 1 ;
00044c   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
                                           ;	.line	607; stepperCon.c	CM1CON0 = 0x99 ; 
00044e   0e99     movlw   0x99             	MOVLW	0x99
000450   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
000452   d004     bra     0x00045c         	BRA	_00374_DS_
                                           _00370_DS_:
                                           ;	.line	610; stepperCon.c	LATCbits.LATC0 = 0 ;
000454   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	611; stepperCon.c	LATCbits.LATC1 = 1 ;
000456   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
                                           ;	.line	612; stepperCon.c	CM1CON0 = 0x89 ; 
000458   0e89     movlw   0x89             	MOVLW	0x89
00045a   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           _00374_DS_:
00045c   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	615; stepperCon.c	if(pol_b == 2) {
00045e   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000460   0a02     xorlw   0x02             	XORLW	0x02
000462   e103     bnz     0x00046a         	BNZ	_00379_DS_
                                           ;	.line	616; stepperCon.c	LATCbits.LATC2 = 0 ;
000464   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	617; stepperCon.c	LATDbits.LATD5 = 0 ;
000466   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
000468   d00c     bra     0x000482         	BRA	_00380_DS_
                                           _00379_DS_:
00046a   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	619; stepperCon.c	else if (pol_b) {               // Forward current, Phase-B
00046c   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
00046e   e005     bz      0x00047a         	BZ	_00376_DS_
                                           ;	.line	620; stepperCon.c	LATCbits.LATC2 = 0 ;
000470   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	621; stepperCon.c	LATDbits.LATD5 = 1 ;
000472   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
                                           ;	.line	622; stepperCon.c	CM2CON0 = 0x98 ;
000474   0e98     movlw   0x98             	MOVLW	0x98
000476   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
000478   d004     bra     0x000482         	BRA	_00380_DS_
                                           _00376_DS_:
                                           ;	.line	625; stepperCon.c	LATDbits.LATD5 = 0 ;
00047a   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	626; stepperCon.c	LATCbits.LATC2 = 1 ;
00047c   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
                                           ;	.line	627; stepperCon.c	CM2CON0 = 0x88 ;
00047e   0e88     movlw   0x88             	MOVLW	0x88
000480   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           _00380_DS_:
                                           ;	.line	630; stepperCon.c	state = NEXT_STEP ;
000482   0e06     movlw   0x06             	MOVLW	0x06
000484   010f     movlb   0xf              	BANKSEL	_state
000486   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	631; stepperCon.c	break ;
000488   ef48     goto    0x000090         	GOTO	_00435_DS_
00048a   f000
                                           _00381_DS_:
                                           ;	.line	634; stepperCon.c	state = RUNNING ;
00048c   0e02     movlw   0x02             	MOVLW	0x02
00048e   010f     movlb   0xf              	BANKSEL	_state
000490   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
000492   010f     movlb   0xf              	BANKSEL	_dir
                                           ;	.line	637; stepperCon.c	if (dir == 1) {
000494   5125     movf    0x25, 0x0, 0x1   	MOVF	_dir, W, B
000496   0a01     xorlw   0x01             	XORLW	0x01
000498   e11a     bnz     0x0004ce         	BNZ	_00391_DS_
                                           _00644_DS_:
00049a   010f     movlb   0xf              	BANKSEL	_skip
                                           ;	.line	638; stepperCon.c	step_a += skip ;
00049c   5133     movf    0x33, 0x0, 0x1   	MOVF	_skip, W, B
00049e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0004a0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004a2   010f     movlb   0xf              	BANKSEL	_step_a
0004a4   2734     addwf   0x34, 0x1, 0x1   	ADDWF	_step_a, F, B
                                           ;	.line	639; stepperCon.c	step_b += skip ;
0004a6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004a8   010f     movlb   0xf              	BANKSEL	_step_b
0004aa   2735     addwf   0x35, 0x1, 0x1   	ADDWF	_step_b, F, B
0004ac   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	640; stepperCon.c	if (step_a > FULL_CYCLE - 1) step_a -= FULL_CYCLE ;
0004ae   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0004b0   0f80     addlw   0x80             	ADDLW	0x80
0004b2   0f40     addlw   0x40             	ADDLW	0x40
0004b4   e303     bnc     0x0004bc         	BNC	_00383_DS_
0004b6   0ec0     movlw   0xc0             	MOVLW	0xc0
0004b8   010f     movlb   0xf              	BANKSEL	_step_a
0004ba   2734     addwf   0x34, 0x1, 0x1   	ADDWF	_step_a, F, B
                                           _00383_DS_:
0004bc   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	641; stepperCon.c	if (step_b > FULL_CYCLE - 1) step_b -= FULL_CYCLE ;
0004be   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0004c0   0f80     addlw   0x80             	ADDLW	0x80
0004c2   0f40     addlw   0x40             	ADDLW	0x40
0004c4   e31d     bnc     0x000500         	BNC	_00392_DS_
0004c6   0ec0     movlw   0xc0             	MOVLW	0xc0
0004c8   010f     movlb   0xf              	BANKSEL	_step_b
0004ca   2735     addwf   0x35, 0x1, 0x1   	ADDWF	_step_b, F, B
0004cc   d019     bra     0x000500         	BRA	_00392_DS_
                                           _00391_DS_:
0004ce   010f     movlb   0xf              	BANKSEL	_skip
                                           ;	.line	645; stepperCon.c	step_a -= skip ;
0004d0   5133     movf    0x33, 0x0, 0x1   	MOVF	_skip, W, B
0004d2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0004d4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004d6   010f     movlb   0xf              	BANKSEL	_step_a
0004d8   5f34     subwf   0x34, 0x1, 0x1   	SUBWF	_step_a, F, B
                                           ;	.line	646; stepperCon.c	step_b -= skip ;
0004da   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004dc   010f     movlb   0xf              	BANKSEL	_step_b
0004de   5f35     subwf   0x35, 0x1, 0x1   	SUBWF	_step_b, F, B
                                           ;	.line	647; stepperCon.c	if (step_a < 0) step_a += FULL_CYCLE ;
0004e0   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0004e2   010f     movlb   0xf              	BANKSEL	_step_a
0004e4   af34     btfss   0x34, 0x7, 0x1   	BTFSS	_step_a, 7, B
0004e6   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0004e8   e303     bnc     0x0004f0         	BNC	_00387_DS_
0004ea   0e40     movlw   0x40             	MOVLW	0x40
0004ec   010f     movlb   0xf              	BANKSEL	_step_a
0004ee   2734     addwf   0x34, 0x1, 0x1   	ADDWF	_step_a, F, B
                                           _00387_DS_:
                                           ;	.line	648; stepperCon.c	if (step_b < 0) step_b += FULL_CYCLE ;
0004f0   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0004f2   010f     movlb   0xf              	BANKSEL	_step_b
0004f4   af35     btfss   0x35, 0x7, 0x1   	BTFSS	_step_b, 7, B
0004f6   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0004f8   e303     bnc     0x000500         	BNC	_00392_DS_
0004fa   0e40     movlw   0x40             	MOVLW	0x40
0004fc   010f     movlb   0xf              	BANKSEL	_step_b
0004fe   2735     addwf   0x35, 0x1, 0x1   	ADDWF	_step_b, F, B
                                           _00392_DS_:
000500   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	652; stepperCon.c	if (step_a == HALF_CYCLE || step_a == 0) pol_a = 2 ;
000502   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
000504   0a20     xorlw   0x20             	XORLW	0x20
000506   e003     bz      0x00050e         	BZ	_00396_DS_
                                           _00648_DS_:
000508   010f     movlb   0xf              	BANKSEL	_step_a
00050a   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00050c   e104     bnz     0x000516         	BNZ	_00397_DS_
                                           _00396_DS_:
00050e   0e02     movlw   0x02             	MOVLW	0x02
000510   010f     movlb   0xf              	BANKSEL	_pol_a
000512   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
000514   d00b     bra     0x00052c         	BRA	_00398_DS_
                                           _00397_DS_:
000516   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	653; stepperCon.c	else if (step_a > HALF_CYCLE) pol_a = 0 ;
000518   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00051a   0f80     addlw   0x80             	ADDLW	0x80
00051c   0f5f     addlw   0x5f             	ADDLW	0x5f
00051e   e303     bnc     0x000526         	BNC	_00394_DS_
000520   010f     movlb   0xf              	BANKSEL	_pol_a
000522   6b2c     clrf    0x2c, 0x1        	CLRF	_pol_a, B
000524   d003     bra     0x00052c         	BRA	_00398_DS_
                                           _00394_DS_:
                                           ;	.line	654; stepperCon.c	else pol_a = 1 ;
000526   0e01     movlw   0x01             	MOVLW	0x01
000528   010f     movlb   0xf              	BANKSEL	_pol_a
00052a   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
                                           _00398_DS_:
00052c   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	656; stepperCon.c	if (step_b == HALF_CYCLE || step_b == 0) pol_b = 2 ;
00052e   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000530   0a20     xorlw   0x20             	XORLW	0x20
000532   e003     bz      0x00053a         	BZ	_00403_DS_
                                           _00651_DS_:
000534   010f     movlb   0xf              	BANKSEL	_step_b
000536   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000538   e104     bnz     0x000542         	BNZ	_00404_DS_
                                           _00403_DS_:
00053a   0e02     movlw   0x02             	MOVLW	0x02
00053c   010f     movlb   0xf              	BANKSEL	_pol_b
00053e   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
000540   d00b     bra     0x000558         	BRA	_00405_DS_
                                           _00404_DS_:
000542   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	657; stepperCon.c	else if (step_b > HALF_CYCLE) pol_b = 0 ;
000544   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000546   0f80     addlw   0x80             	ADDLW	0x80
000548   0f5f     addlw   0x5f             	ADDLW	0x5f
00054a   e303     bnc     0x000552         	BNC	_00401_DS_
00054c   010f     movlb   0xf              	BANKSEL	_pol_b
00054e   6b2e     clrf    0x2e, 0x1        	CLRF	_pol_b, B
000550   d003     bra     0x000558         	BRA	_00405_DS_
                                           _00401_DS_:
                                           ;	.line	658; stepperCon.c	else pol_b = 1 ;
000552   0e01     movlw   0x01             	MOVLW	0x01
000554   010f     movlb   0xf              	BANKSEL	_pol_b
000556   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
                                           _00405_DS_:
000558   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	661; stepperCon.c	pwm_a_l = 0x0c + (pwm_lu[step_a] & 0x3) << 4 ;
00055a   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00055c   0d02     mullw   0x02             	MULLW	0x02
00055e   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000560   010f     movlb   0xf              	BANKSEL	_step_a
000562   bf34     btfsc   0x34, 0x7, 0x1   	BTFSC	_step_a, 7, B
000564   0802     sublw   0x02             	SUBLW	0x02
000566   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000568   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
00056a   f004
00056c   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00056e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000570   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000572   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000574   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000576   ffe9
000578   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
00057a   ffea
00057c   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00057e   f004
000580   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
000582   f005
000584   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000586   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000588   0e03     movlw   0x03             	MOVLW	0x03
00058a   1606     andwf   0x06, 0x1, 0x0   	ANDWF	r0x06, F
00058c   0e0c     movlw   0x0c             	MOVLW	0x0c
00058e   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
000590   3806     swapf   0x06, 0x0, 0x0   	SWAPF	r0x06, W
000592   0bf0     andlw   0xf0             	ANDLW	0xf0
000594   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	662; stepperCon.c	pwm_a_h = pwm_lu[step_a] >> 2 ;
000596   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000598   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
00059a   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
00059c   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00059e   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0005a0   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0005a2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005a4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
0005a6   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	664; stepperCon.c	pwm_b_l = 0x0c + (pwm_lu[step_b] & 0x3) << 4 ;
0005a8   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0005aa   0d02     mullw   0x02             	MULLW	0x02
0005ac   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0005ae   010f     movlb   0xf              	BANKSEL	_step_b
0005b0   bf35     btfsc   0x35, 0x7, 0x1   	BTFSC	_step_b, 7, B
0005b2   0802     sublw   0x02             	SUBLW	0x02
0005b4   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0005b6   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0005b8   f004
0005ba   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0005bc   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0005be   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0005c0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0005c2   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0005c4   ffe9
0005c6   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0005c8   ffea
0005ca   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0005cc   f004
0005ce   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0005d0   f005
0005d2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005d4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0005d6   0e03     movlw   0x03             	MOVLW	0x03
0005d8   1606     andwf   0x06, 0x1, 0x0   	ANDWF	r0x06, F
0005da   0e0c     movlw   0x0c             	MOVLW	0x0c
0005dc   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
0005de   3806     swapf   0x06, 0x0, 0x0   	SWAPF	r0x06, W
0005e0   0bf0     andlw   0xf0             	ANDLW	0xf0
0005e2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           ;	.line	665; stepperCon.c	pwm_b_h = pwm_lu[step_b] >> 2 ;
0005e4   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0005e6   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0005e8   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0005ea   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0005ec   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0005ee   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0005f0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005f2   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           ;	.line	667; stepperCon.c	break ;
0005f4   ef48     goto    0x000090         	GOTO	_00435_DS_
0005f6   f000
                                           _00407_DS_:
                                           ;	.line	670; stepperCon.c	if(CM1CON0bits.C1OUT && a_state == T_DRIVE) {
0005f8   ac79     btfss   0x79, 0x6, 0x0   	BTFSS	_CM1CON0bits, 6
0005fa   d016     bra     0x000628         	BRA	_00415_DS_
0005fc   010f     movlb   0xf              	BANKSEL	_a_state
0005fe   5128     movf    0x28, 0x0, 0x1   	MOVF	_a_state, W, B
000600   0a02     xorlw   0x02             	XORLW	0x02
000602   e112     bnz     0x000628         	BNZ	_00415_DS_
                                           _00656_DS_:
000604   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	671; stepperCon.c	if (a_decay == FAST_DECAY) {            
000606   512b     movf    0x2b, 0x0, 0x1   	MOVF	_a_decay, W, B
000608   0a01     xorlw   0x01             	XORLW	0x01
00060a   e109     bnz     0x00061e         	BNZ	_00412_DS_
                                           _00658_DS_:
00060c   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	672; stepperCon.c	if (pol_a) {                    // Forward current, Phase-A
00060e   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
000610   e003     bz      0x000618         	BZ	_00409_DS_
                                           ;	.line	673; stepperCon.c	LATCbits.LATC0 = 0 ;
000612   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	674; stepperCon.c	LATCbits.LATC1 = 1 ;  
000614   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
000616   d004     bra     0x000620         	BRA	_00413_DS_
                                           _00409_DS_:
                                           ;	.line	677; stepperCon.c	LATCbits.LATC1 = 0 ;
000618   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	678; stepperCon.c	LATCbits.LATC0 = 1 ;
00061a   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
00061c   d001     bra     0x000620         	BRA	_00413_DS_
                                           _00412_DS_:
                                           ;	.line	681; stepperCon.c	else PORTAbits.RA4 = 0 ;
00061e   9880     bcf     0x80, 0x4, 0x0   	BCF	_PORTAbits, 4
                                           _00413_DS_:
                                           ;	.line	683; stepperCon.c	a_state = PH_OFF ;
000620   0e01     movlw   0x01             	MOVLW	0x01
000622   010f     movlb   0xf              	BANKSEL	_a_state
000624   6f28     movwf   0x28, 0x1        	MOVWF	_a_state, B
                                           ;	.line	684; stepperCon.c	T1CONbits.TMR1ON = 1 ;
000626   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00415_DS_:
                                           ;	.line	687; stepperCon.c	if(CM2CON0bits.C2OUT && b_state == T_DRIVE) {
000628   ac78     btfss   0x78, 0x6, 0x0   	BTFSS	_CM2CON0bits, 6
00062a   d016     bra     0x000658         	BRA	_00424_DS_
00062c   010f     movlb   0xf              	BANKSEL	_b_state
00062e   512a     movf    0x2a, 0x0, 0x1   	MOVF	_b_state, W, B
000630   0a02     xorlw   0x02             	XORLW	0x02
000632   e112     bnz     0x000658         	BNZ	_00424_DS_
                                           _00660_DS_:
000634   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	688; stepperCon.c	if (b_decay == FAST_DECAY) {
000636   512d     movf    0x2d, 0x0, 0x1   	MOVF	_b_decay, W, B
000638   0a01     xorlw   0x01             	XORLW	0x01
00063a   e109     bnz     0x00064e         	BNZ	_00421_DS_
                                           _00662_DS_:
00063c   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	689; stepperCon.c	if (pol_b) {                    // Forward current, Phase-B
00063e   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000640   e003     bz      0x000648         	BZ	_00418_DS_
                                           ;	.line	690; stepperCon.c	LATDbits.LATD5 = 0 ;
000642   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	691; stepperCon.c	LATCbits.LATC2 = 1 ;
000644   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
000646   d004     bra     0x000650         	BRA	_00422_DS_
                                           _00418_DS_:
                                           ;	.line	694; stepperCon.c	LATCbits.LATC2 = 0 ;
000648   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	695; stepperCon.c	LATDbits.LATD5 = 1 ;
00064a   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
00064c   d001     bra     0x000650         	BRA	_00422_DS_
                                           _00421_DS_:
                                           ;	.line	698; stepperCon.c	else PORTAbits.RA5 = 0 ;
00064e   9a80     bcf     0x80, 0x5, 0x0   	BCF	_PORTAbits, 5
                                           _00422_DS_:
                                           ;	.line	700; stepperCon.c	b_state = PH_OFF ;
000650   0e01     movlw   0x01             	MOVLW	0x01
000652   010f     movlb   0xf              	BANKSEL	_b_state
000654   6f2a     movwf   0x2a, 0x1        	MOVWF	_b_state, B
                                           ;	.line	701; stepperCon.c	T3CONbits.TMR3ON = 1 ;
000656   80b1     bsf     0xb1, 0x0, 0x0   	BSF	_T3CONbits, 0
                                           _00424_DS_:
                                           ;	.line	705; stepperCon.c	if (!PORTBbits.RB3) {
000658   b681     btfsc   0x81, 0x3, 0x0   	BTFSC	_PORTBbits, 3
00065a   ef48     goto    0x000090         	GOTO	_00435_DS_
00065c   f000
                                           ;	.line	706; stepperCon.c	INTCONbits.GIE = 0 ;
00065e   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	707; stepperCon.c	idleInts() ;
000660   ec46     call    0x00228c, 0x0    	CALL	_idleInts
000662   f011
                                           ;	.line	709; stepperCon.c	CM1CON0bits.C1ON = 0 ;
000664   9e79     bcf     0x79, 0x7, 0x0   	BCF	_CM1CON0bits, 7
                                           ;	.line	710; stepperCon.c	CM2CON0bits.C2ON = 0 ;
000666   9e78     bcf     0x78, 0x7, 0x0   	BCF	_CM2CON0bits, 7
                                           ;	.line	712; stepperCon.c	CM1CON0bits.C1ON = 0 ; 
000668   9e79     bcf     0x79, 0x7, 0x0   	BCF	_CM1CON0bits, 7
                                           ;	.line	713; stepperCon.c	CM2CON0bits.C2OE = 0 ;
00066a   9a78     bcf     0x78, 0x5, 0x0   	BCF	_CM2CON0bits, 5
                                           ;	.line	715; stepperCon.c	LATAbits.LATA4 = 0 ;    // Shut phases down
00066c   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	716; stepperCon.c	LATAbits.LATA5 = 0 ; 
00066e   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
                                           ;	.line	718; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
000670   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
000672   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	719; stepperCon.c	state = IDLE ;
000674   6b24     clrf    0x24, 0x1        	CLRF	_state, B
                                           ;	.line	720; stepperCon.c	INTCONbits.GIE = 1 ;
000676   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	722; stepperCon.c	break ;
000678   ef48     goto    0x000090         	GOTO	_00435_DS_
00067a   f000
                                           _00428_DS_:
                                           ;	.line	726; stepperCon.c	if (PORTBbits.RB3) state = START ;
00067c   a681     btfss   0x81, 0x3, 0x0   	BTFSS	_PORTBbits, 3
00067e   d003     bra     0x000686         	BRA	_00430_DS_
000680   0e01     movlw   0x01             	MOVLW	0x01
000682   010f     movlb   0xf              	BANKSEL	_state
000684   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           _00430_DS_:
000686   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	729; stepperCon.c	if (i2c_dirty) {
000688   5131     movf    0x31, 0x0, 0x1   	MOVF	_i2c_dirty, W, B
00068a   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
00068c   ef48     goto    0x000090         	GOTO	_00435_DS_
00068e   f000
                                           ;	.line	730; stepperCon.c	store_regs(i2c_regs, sizeof(i2c_regs)) ;
000690   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
000692   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000694   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
000696   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000698   0e80     movlw   0x80             	MOVLW	0x80
00069a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00069c   0e09     movlw   0x09             	MOVLW	0x09
00069e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006a0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0006a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006a4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0006a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006a8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0006aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ac   ec59     call    0x001ab2, 0x0    	CALL	_store_regs
0006ae   f00d
0006b0   0e04     movlw   0x04             	MOVLW	0x04
0006b2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0006b4   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	731; stepperCon.c	i2c_dirty = 0 ;
0006b6   6b31     clrf    0x31, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	732; stepperCon.c	set_op_vars() ; 
0006b8   ec15     call    0x001c2a, 0x0    	CALL	_set_op_vars
0006ba   f00e
                                           ;	.line	736; stepperCon.c	}
0006bc   ef48     goto    0x000090         	GOTO	_00435_DS_
0006be   f000
                                           ;	.line	738; stepperCon.c	}
0006c0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__delay_ms	code
                                           _delay_ms:
                                           ;	.line	409; stepperCon.c	void delay_ms(uint16_t time) {
00200c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00200e   ffe5
002010   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002012   ffd9
002014   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002016   ffe5
002018   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00201a   ffe5
00201c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00201e   ffe5
002020   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002022   ffe5
002024   0e02     movlw   0x02             	MOVLW	0x02
002026   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002028   f000
00202a   0e03     movlw   0x03             	MOVLW	0x03
00202c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00202e   f001
                                           ;	.line	412; stepperCon.c	T0CON = 0x02 ;
002030   0e02     movlw   0x02             	MOVLW	0x02
002032   6ed5     movwf   0xd5, 0x0        	MOVWF	_T0CON
                                           _00290_DS_:
                                           ;	.line	414; stepperCon.c	while(--i) {
002034   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002036   0fff     addlw   0xff             	ADDLW	0xff
002038   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00203a   0eff     movlw   0xff             	MOVLW	0xff
00203c   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
00203e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002040   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
002042   f000
002044   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
002046   f001
002048   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00204a   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
00204c   e00a     bz      0x002062         	BZ	_00292_DS_
                                           ;	.line	415; stepperCon.c	T0CONbits.TMR0ON = 0 ;
00204e   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	416; stepperCon.c	INTCONbits.TMR0IF = 0 ;
002050   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	417; stepperCon.c	TMR0H = TMR_1MS >> 8 ;
002052   0ef8     movlw   0xf8             	MOVLW	0xf8
002054   6ed7     movwf   0xd7, 0x0        	MOVWF	_TMR0H
                                           ;	.line	418; stepperCon.c	TMR0L = TMR_1MS ;
002056   0e30     movlw   0x30             	MOVLW	0x30
002058   6ed6     movwf   0xd6, 0x0        	MOVWF	_TMR0L
                                           ;	.line	419; stepperCon.c	T0CONbits.TMR0ON = 1 ;
00205a   8ed5     bsf     0xd5, 0x7, 0x0   	BSF	_T0CONbits, 7
                                           _00287_DS_:
                                           ;	.line	421; stepperCon.c	while(!INTCONbits.TMR0IF) ;
00205c   b4f2     btfsc   0xf2, 0x2, 0x0   	BTFSC	_INTCONbits, 2
00205e   d7ea     bra     0x002034         	BRA	_00290_DS_
002060   d7fd     bra     0x00205c         	BRA	_00287_DS_
                                           _00292_DS_:
                                           ;	.line	424; stepperCon.c	T0CONbits.TMR0ON = 0 ;
002062   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	425; stepperCon.c	INTCONbits.TMR0IF = 0 ;
002064   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	426; stepperCon.c	}
002066   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002068   f003
00206a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00206c   f002
00206e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002070   f001
002072   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002074   f000
002076   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002078   ffd9
00207a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__set_op_vars	code
                                           _set_op_vars:
                                           ;	.line	397; stepperCon.c	void set_op_vars(void) {
001c2a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001c2c   ffe5
001c2e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c30   ffd9
001c32   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001c34   ffe5
001c36   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001c38   ffe5
001c3a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001c3c   ffe5
001c3e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001c40   ffe5
                                           ;	.line	398; stepperCon.c	i2c_address = i2c_regs[0x00] ;
001c42   c0e1     movff   0x0e1, 0xf32     	MOVFF	_i2c_regs, _i2c_address
001c44   ff32
                                           ;	.line	399; stepperCon.c	skip        = i2c_regs[0x01] ;
001c46   c0e2     movff   0x0e2, 0xf33     	MOVFF	(_i2c_regs + 1), _skip
001c48   ff33
                                           ;	.line	400; stepperCon.c	set_amp     = i2c_regs[0x02] ;
001c4a   c0e3     movff   0x0e3, 0xf20     	MOVFF	(_i2c_regs + 2), _set_amp
001c4c   ff20
001c4e   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
001c50   6b21     clrf    0x21, 0x1        	CLRF	(_set_amp + 1), B
                                           ;	.line	401; stepperCon.c	set_amp    += i2c_regs[0x03] << 8 ;
001c52   c0e4     movff   0x0e4, 0x000     	MOVFF	(_i2c_regs + 3), r0x00
001c54   f000
001c56   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c58   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c5a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001c5c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001c5e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001c60   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c62   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001c64   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c66   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c68   010f     movlb   0xf              	BANKSEL	_set_amp
001c6a   2720     addwf   0x20, 0x1, 0x1   	ADDWF	_set_amp, F, B
001c6c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c6e   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
001c70   2321     addwfc  0x21, 0x1, 0x1   	ADDWFC	(_set_amp + 1), F, B
                                           ;	.line	402; stepperCon.c	max_amp     = i2c_regs[0x04] ;
001c72   c0e5     movff   0x0e5, 0xf22     	MOVFF	(_i2c_regs + 4), _max_amp
001c74   ff22
001c76   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001c78   6b23     clrf    0x23, 0x1        	CLRF	(_max_amp + 1), B
                                           ;	.line	403; stepperCon.c	max_amp    += i2c_regs[0x05] << 8 ;
001c7a   c0e6     movff   0x0e6, 0x000     	MOVFF	(_i2c_regs + 5), r0x00
001c7c   f000
001c7e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c80   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c82   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001c84   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001c86   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001c88   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c8a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001c8c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c8e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c90   010f     movlb   0xf              	BANKSEL	_max_amp
001c92   2722     addwf   0x22, 0x1, 0x1   	ADDWF	_max_amp, F, B
001c94   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c96   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001c98   2323     addwfc  0x23, 0x1, 0x1   	ADDWFC	(_max_amp + 1), F, B
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 6) and store in _t_off
001c9a   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 6)
                                           ;	.line	404; stepperCon.c	t_off       = i2c_regs[0x06] * 2 * TMR_500NS ;
001c9c   51e7     movf    0xe7, 0x0, 0x1   	MOVF	(_i2c_regs + 6), W, B
001c9e   0d02     mullw   0x02             	MULLW	0x02
001ca0   cff3     movff   0xff3, 0xf29     	MOVFF	PRODL, _t_off
001ca2   ff29
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 7) and store in _t_blank_low
001ca4   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 7)
                                           ;	.line	405; stepperCon.c	t_blank_low = i2c_regs[0x07] * 2 * TMR_500NS ;
001ca6   51e8     movf    0xe8, 0x0, 0x1   	MOVF	(_i2c_regs + 7), W, B
001ca8   0d02     mullw   0x02             	MULLW	0x02
001caa   cff3     movff   0xff3, 0xf27     	MOVFF	PRODL, _t_blank_low
001cac   ff27
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 8) and store in _t_blank_high
001cae   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 8)
                                           ;	.line	406; stepperCon.c	t_blank_high= i2c_regs[0x08] * 2 * TMR_500NS ;
001cb0   51e9     movf    0xe9, 0x0, 0x1   	MOVF	(_i2c_regs + 8), W, B
001cb2   0d02     mullw   0x02             	MULLW	0x02
001cb4   cff3     movff   0xff3, 0xf26     	MOVFF	PRODL, _t_blank_high
001cb6   ff26
                                           ;	.line	407; stepperCon.c	}
001cb8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001cba   f003
001cbc   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001cbe   f002
001cc0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001cc2   f001
001cc4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001cc6   f000
001cc8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001cca   ffd9
001ccc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__prep_pwm_lu	code
                                           _prep_pwm_lu:
                                           ;	.line	382; stepperCon.c	void prep_pwm_lu(void) {
00130a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00130c   ffe5
00130e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001310   ffd9
001312   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001314   ffe5
001316   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001318   ffe5
00131a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00131c   ffe5
00131e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001320   ffe5
001322   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001324   ffe5
001326   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001328   ffe5
00132a   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00132c   ffe5
00132e   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001330   ffe5
001332   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001334   ffe5
001336   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
001338   ffe5
00133a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00133c   ffe5
00133e   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
                                           ;	.line	386; stepperCon.c	ratio = (float)set_amp / (float)max_amp ;
001340   5121     movf    0x21, 0x0, 0x1   	MOVF	(_set_amp + 1), W, B
001342   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001344   010f     movlb   0xf              	BANKSEL	_set_amp
001346   5120     movf    0x20, 0x0, 0x1   	MOVF	_set_amp, W, B
001348   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00134a   ec3e     call    0x00207c, 0x0    	CALL	___uint2fs
00134c   f010
00134e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001350   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001352   f001
001354   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001356   f002
001358   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00135a   f003
00135c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00135e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001360   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001362   5123     movf    0x23, 0x0, 0x1   	MOVF	(_max_amp + 1), W, B
001364   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001366   010f     movlb   0xf              	BANKSEL	_max_amp
001368   5122     movf    0x22, 0x0, 0x1   	MOVF	_max_amp, W, B
00136a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00136c   ec3e     call    0x00207c, 0x0    	CALL	___uint2fs
00136e   f010
001370   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001372   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001374   f005
001376   cff4     movff   0xff4, 0x006     	MOVFF	PRODH, r0x06
001378   f006
00137a   cfe9     movff   0xfe9, 0x007     	MOVFF	FSR0L, r0x07
00137c   f007
00137e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001380   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001382   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001384   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001386   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001388   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00138a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00138c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00138e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001390   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001392   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001394   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001396   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001398   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00139a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00139c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00139e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0013a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013a2   eccf     call    0x000d9e, 0x0    	CALL	___fsdiv
0013a4   f006
0013a6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0013a8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0013aa   f001
0013ac   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0013ae   f002
0013b0   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0013b2   f003
0013b4   0e08     movlw   0x08             	MOVLW	0x08
0013b6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	389; stepperCon.c	zero_cross = __fs2uint(bias) ;
0013b8   0e43     movlw   0x43             	MOVLW	0x43
0013ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013bc   0eff     movlw   0xff             	MOVLW	0xff
0013be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013c0   0ec0     movlw   0xc0             	MOVLW	0xc0
0013c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013c4   0e00     movlw   0x00             	MOVLW	0x00
0013c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013c8   ec09     call    0x001e12, 0x0    	CALL	___fs2uint
0013ca   f00f
0013cc   0100     movlb   0x0              	BANKSEL	_zero_cross
0013ce   6ffe     movwf   0xfe, 0x1        	MOVWF	_zero_cross, B
0013d0   cff3     movff   0xff3, 0x0ff     	MOVFF	PRODL, (_zero_cross + 1)
0013d2   f0ff
0013d4   0e04     movlw   0x04             	MOVLW	0x04
0013d6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	391; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0013d8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           ; ;multiply lit val:0x02 by variable r0x04 and store in r0x05
                                           _00269_DS_:
                                           ;	.line	392; stepperCon.c	set = (float)pwm_base[i] * ratio + bias ;
0013da   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0013dc   0d02     mullw   0x02             	MULLW	0x02
0013de   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0013e0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0013e2   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0013e4   f005
0013e6   0e60     movlw   0x60             	MOVLW	LOW(_pwm_base)
0013e8   2405     addwf   0x05, 0x0, 0x0   	ADDWF	r0x05, W
0013ea   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0013ec   0e00     movlw   0x00             	MOVLW	HIGH(_pwm_base)
0013ee   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0013f0   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0013f2   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0013f4   ffe9
0013f6   c008     movff   0x008, 0xfea     	MOVFF	r0x08, FSR0H
0013f8   ffea
0013fa   cfee     movff   0xfee, 0x007     	MOVFF	POSTINC0, r0x07
0013fc   f007
0013fe   cfef     movff   0xfef, 0x008     	MOVFF	INDF0, r0x08
001400   f008
001402   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001404   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001406   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001408   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00140a   ec92     call    0x001f24, 0x0    	CALL	___sint2fs
00140c   f00f
00140e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001410   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
001412   f008
001414   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
001416   f009
001418   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
00141a   f00a
00141c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00141e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001420   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001422   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001424   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001426   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001428   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00142a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00142c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00142e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001430   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
001432   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001434   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001436   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001438   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00143a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00143c   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00143e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001440   ec61     call    0x0006c2, 0x0    	CALL	___fsmul
001442   f003
001444   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001446   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
001448   f008
00144a   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
00144c   f009
00144e   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
001450   f00a
001452   0e08     movlw   0x08             	MOVLW	0x08
001454   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001456   0e43     movlw   0x43             	MOVLW	0x43
001458   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00145a   0eff     movlw   0xff             	MOVLW	0xff
00145c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00145e   0ec0     movlw   0xc0             	MOVLW	0xc0
001460   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001462   0e00     movlw   0x00             	MOVLW	0x00
001464   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001466   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
001468   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00146a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00146c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00146e   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001470   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001472   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001474   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001476   ec1d     call    0x000a3a, 0x0    	CALL	___fsadd
001478   f005
00147a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00147c   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
00147e   f008
001480   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
001482   f009
001484   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
001486   f00a
001488   0e08     movlw   0x08             	MOVLW	0x08
00148a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	393; stepperCon.c	pwm_lu[i] = __fs2uint(set) ;
00148c   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00148e   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
001490   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
001492   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
001494   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
001496   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001498   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00149a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00149c   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00149e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014a0   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0014a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014a4   ec09     call    0x001e12, 0x0    	CALL	___fs2uint
0014a6   f00f
0014a8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0014aa   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
0014ac   f008
0014ae   0e04     movlw   0x04             	MOVLW	0x04
0014b0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0014b2   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0014b4   ffe9
0014b6   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
0014b8   ffea
0014ba   c007     movff   0x007, 0xfee     	MOVFF	r0x07, POSTINC0
0014bc   ffee
0014be   c008     movff   0x008, 0xfef     	MOVFF	r0x08, INDF0
0014c0   ffef
                                           ;	.line	391; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0014c2   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0014c4   0e40     movlw   0x40             	MOVLW	0x40
0014c6   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
0014c8   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0014ca   d787     bra     0x0013da         	BRA	_00269_DS_
                                           ;	.line	395; stepperCon.c	}
0014cc   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
0014ce   f00a
0014d0   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
0014d2   f009
0014d4   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
0014d6   f008
0014d8   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0014da   f007
0014dc   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0014de   f006
0014e0   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0014e2   f005
0014e4   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0014e6   f004
0014e8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0014ea   f003
0014ec   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0014ee   f002
0014f0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0014f2   f001
0014f4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0014f6   f000
0014f8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0014fa   ffd9
0014fc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__idleInts	code
                                           _idleInts:
                                           ;	.line	363; stepperCon.c	void idleInts(void) {
00228c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00228e   ffe5
002290   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002292   ffd9
                                           ;	.line	364; stepperCon.c	INTCONbits.INT0IE = 0 ;     // Disable 'step' interrupt
002294   98f2     bcf     0xf2, 0x4, 0x0   	BCF	_INTCONbits, 4
                                           ;	.line	365; stepperCon.c	INTCON3bits.INT2IE = 0 ;    // Disable 'dir' interrupt
002296   98f0     bcf     0xf0, 0x4, 0x0   	BCF	_INTCON3bits, 4
                                           ;	.line	367; stepperCon.c	PIE2bits.C1IE = 0 ;         // Disable Comparator C1 Interrupt
002298   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           ;	.line	368; stepperCon.c	PIE2bits.C2IE = 0 ;         // Disable Comparator C2 Interrupt
00229a   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           ;	.line	370; stepperCon.c	PIE1bits.CCP1IE = 0 ;       // Disable CCP1 interrupt
00229c   949d     bcf     0x9d, 0x2, 0x0   	BCF	_PIE1bits, 2
                                           ;	.line	371; stepperCon.c	PIE2bits.CCP2IE = 0 ;       // Disable CCP2 interrupt
00229e   90a0     bcf     0xa0, 0x0, 0x0   	BCF	_PIE2bits, 0
                                           ;	.line	373; stepperCon.c	PIE1bits.SSP1IE = 1 ;       // Enable I2C interrupt
0022a0   869d     bsf     0x9d, 0x3, 0x0   	BSF	_PIE1bits, 3
                                           ;	.line	374; stepperCon.c	PIE2bits.BCL1IE = 1 ;       // Enable I2C collision detection interrupt
0022a2   86a0     bsf     0xa0, 0x3, 0x0   	BSF	_PIE2bits, 3
                                           ;	.line	376; stepperCon.c	SSP1CON1bits.SSPOV = 0 ;
0022a4   9cc6     bcf     0xc6, 0x6, 0x0   	BCF	_SSP1CON1bits, 6
                                           ;	.line	377; stepperCon.c	PIR1bits.SSP1IF = 0 ;
0022a6   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	378; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
0022a8   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
                                           ;	.line	379; stepperCon.c	SSP1CON1bits.SSPEN = 1 ;    // Enable I2C port
0022aa   8ac6     bsf     0xc6, 0x5, 0x0   	BSF	_SSP1CON1bits, 5
                                           ;	.line	380; stepperCon.c	}
0022ac   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0022ae   ffd9
0022b0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__activeInts	code
                                           _activeInts:
                                           ;	.line	338; stepperCon.c	void activeInts(void) {
0021d4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021d6   ffe5
0021d8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021da   ffd9
                                           ;	.line	339; stepperCon.c	PIE1bits.SSP1IE = 0 ;       // Disable I2C interrupt
0021dc   969d     bcf     0x9d, 0x3, 0x0   	BCF	_PIE1bits, 3
                                           ;	.line	340; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;    // Disable I2C port
0021de   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	341; stepperCon.c	PIE2bits.BCL1IE = 0 ;       // Disable I2C collision detection interrupt
0021e0   96a0     bcf     0xa0, 0x3, 0x0   	BCF	_PIE2bits, 3
                                           ;	.line	344; stepperCon.c	if(PORTBbits.RB2) { 
0021e2   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
0021e4   d005     bra     0x0021f0         	BRA	_00256_DS_
                                           ;	.line	345; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;
0021e6   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	346; stepperCon.c	dir = 1 ;
0021e8   0e01     movlw   0x01             	MOVLW	0x01
0021ea   010f     movlb   0xf              	BANKSEL	_dir
0021ec   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
0021ee   d004     bra     0x0021f8         	BRA	_00257_DS_
                                           _00256_DS_:
                                           ;	.line	349; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
0021f0   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	350; stepperCon.c	dir = -1 ;
0021f2   0eff     movlw   0xff             	MOVLW	0xff
0021f4   010f     movlb   0xf              	BANKSEL	_dir
0021f6   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
                                           _00257_DS_:
                                           ;	.line	353; stepperCon.c	INTCONbits.INT0IE = 1 ;     // Enable 'step' interrupt
0021f8   88f2     bsf     0xf2, 0x4, 0x0   	BSF	_INTCONbits, 4
                                           ;	.line	354; stepperCon.c	INTCON3bits.INT2IE = 1 ;    // Enable 'dir' interrupt
0021fa   88f0     bsf     0xf0, 0x4, 0x0   	BSF	_INTCON3bits, 4
                                           ;	.line	356; stepperCon.c	PIE2bits.C1IE = 0 ;         // Disable Comparator C1 Interrupt
0021fc   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           ;	.line	357; stepperCon.c	PIE2bits.C2IE = 0 ;         // Disable Comparator C2 Interrupt
0021fe   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           ;	.line	359; stepperCon.c	PIE1bits.CCP1IE = 1 ;       // Enable CCP1 interrupt
002200   849d     bsf     0x9d, 0x2, 0x0   	BSF	_PIE1bits, 2
                                           ;	.line	360; stepperCon.c	PIE2bits.CCP2IE = 1 ;       // Enable CCP2 interrupt
002202   80a0     bsf     0xa0, 0x0, 0x0   	BSF	_PIE2bits, 0
                                           ;	.line	361; stepperCon.c	}
002204   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002206   ffd9
002208   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__i2cSetup	code
                                           _i2cSetup:
                                           ;	.line	324; stepperCon.c	void i2cSetup(void) {
00223c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00223e   ffe5
002240   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002242   ffd9
                                           ;	.line	325; stepperCon.c	TRISCbits.TRISC3 = 1 ;      // Set I2C pins as input
002244   8694     bsf     0x94, 0x3, 0x0   	BSF	_TRISCbits, 3
                                           ;	.line	326; stepperCon.c	TRISCbits.TRISC4 = 1 ;
002246   8894     bsf     0x94, 0x4, 0x0   	BSF	_TRISCbits, 4
                                           ;	.line	328; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;
002248   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	329; stepperCon.c	SSP1CON2bits.GCEN = 1 ;     // Enable general call on address 0x00
00224a   8ec5     bsf     0xc5, 0x7, 0x0   	BSF	_SSP1CON2bits, 7
                                           ;	.line	330; stepperCon.c	SSP1CON2bits.SEN = 1 ;      // Enable clock stretching
00224c   80c5     bsf     0xc5, 0x0, 0x0   	BSF	_SSP1CON2bits, 0
                                           ;	.line	331; stepperCon.c	SSP1ADD = i2c_address ;     // Set device I2C address
00224e   cf32     movff   0xf32, 0xfc8     	MOVFF	_i2c_address, _SSP1ADD
002250   ffc8
002252   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
                                           ;	.line	333; stepperCon.c	i2c_reg_addr = 0 ;
002254   6b30     clrf    0x30, 0x1        	CLRF	_i2c_reg_addr, B
                                           ;	.line	335; stepperCon.c	SSP1CON1bits.SSPM = 0x6 ;   // I2C Slave mode, 7-bit address
002256   50c6     movf    0xc6, 0x0, 0x0   	MOVF	_SSP1CON1bits, W
002258   0bf0     andlw   0xf0             	ANDLW	0xf0
00225a   0906     iorlw   0x06             	IORLW	0x06
00225c   6ec6     movwf   0xc6, 0x0        	MOVWF	_SSP1CON1bits
                                           ;	.line	336; stepperCon.c	}
00225e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002260   ffd9
002262   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__lowInt	code
                                           _lowInt:
                                           ;	.line	282; stepperCon.c	static void lowInt(void) __interrupt(2) {
0017ac   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0017ae   ffe5
0017b0   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0017b2   ffe5
0017b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017b6   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0017b8   ffe5
0017ba   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0017bc   ffe5
0017be   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0017c0   ffe5
0017c2   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0017c4   ffe5
0017c6   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0017c8   ffe5
0017ca   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0017cc   ffe5
0017ce   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0017d0   ffe5
0017d2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0017d4   ffd9
0017d6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0017d8   ffe5
0017da   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0017dc   ffe5
0017de   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0017e0   ffe5
                                           ;	.line	283; stepperCon.c	uint8_t i2c_buf = 0 ;
0017e2   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	286; stepperCon.c	if (PIR1bits.SSP1IF) {
0017e4   a69e     btfss   0x9e, 0x3, 0x0   	BTFSS	_PIR1bits, 3
0017e6   d054     bra     0x001890         	BRA	_00219_DS_
                                           ;	.line	287; stepperCon.c	if (SSP1STATbits.BF) i2c_buf = SSP1BUF ;    // Read data, clear BF
0017e8   a0c7     btfss   0xc7, 0x0, 0x0   	BTFSS	_SSP1STATbits, 0
0017ea   d002     bra     0x0017f0         	BRA	_00204_DS_
0017ec   cfc9     movff   0xfc9, 0x000     	MOVFF	_SSP1BUF, r0x00
0017ee   f000
                                           _00204_DS_:
                                           ;	.line	290; stepperCon.c	if (!SSP1STATbits.D) {
0017f0   bac7     btfsc   0xc7, 0x5, 0x0   	BTFSC	_SSP1STATbits, 5
0017f2   d014     bra     0x00181c         	BRA	_00214_DS_
0017f4   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	291; stepperCon.c	i2c_counter = 0 ;                       // Reset counter
0017f6   6b2f     clrf    0x2f, 0x1        	CLRF	_i2c_counter, B
                                           ;	.line	292; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
0017f8   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
0017fa   d03d     bra     0x001876         	BRA	_00215_DS_
                                           ;	.line	293; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
0017fc   cf30     movff   0xf30, 0x001     	MOVFF	_i2c_reg_addr, r0x01
0017fe   f001
001800   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
001802   2b30     incf    0x30, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001804   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001806   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001808   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00180a   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
00180c   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00180e   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001810   ffe9
001812   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
001814   ffea
001816   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001818   ffc9
00181a   d02d     bra     0x001876         	BRA	_00215_DS_
                                           _00214_DS_:
00181c   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	298; stepperCon.c	i2c_counter++ ;                         // Increment counter
00181e   2b2f     incf    0x2f, 0x1, 0x1   	INCF	_i2c_counter, F, B
                                           ;	.line	299; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
001820   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
001822   d010     bra     0x001844         	BRA	_00211_DS_
                                           ;	.line	300; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
001824   cf30     movff   0xf30, 0x001     	MOVFF	_i2c_reg_addr, r0x01
001826   f001
001828   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
00182a   2b30     incf    0x30, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
00182c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00182e   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001830   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001832   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001834   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001836   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001838   ffe9
00183a   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00183c   ffea
00183e   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001840   ffc9
001842   d019     bra     0x001876         	BRA	_00215_DS_
                                           _00211_DS_:
001844   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	303; stepperCon.c	if (i2c_counter == 1) {             // First byte is register
001846   512f     movf    0x2f, 0x0, 0x1   	MOVF	_i2c_counter, W, B
001848   0a01     xorlw   0x01             	XORLW	0x01
00184a   e103     bnz     0x001852         	BNZ	_00208_DS_
                                           ;	.line	304; stepperCon.c	i2c_reg_addr = i2c_buf ;        // value
00184c   c000     movff   0x000, 0xf30     	MOVFF	r0x00, _i2c_reg_addr
00184e   ff30
001850   d012     bra     0x001876         	BRA	_00215_DS_
                                           _00208_DS_:
                                           ;	.line	307; stepperCon.c	i2c_regs[i2c_reg_addr++] = i2c_buf ; // write
001852   cf30     movff   0xf30, 0x001     	MOVFF	_i2c_reg_addr, r0x01
001854   f001
001856   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
001858   2b30     incf    0x30, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
00185a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00185c   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
00185e   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001860   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001862   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001864   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001866   ffe9
001868   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00186a   ffea
00186c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00186e   ffef
                                           ;	.line	308; stepperCon.c	i2c_dirty = 1 ;                 // set I2C dirty flag
001870   0e01     movlw   0x01             	MOVLW	0x01
001872   010f     movlb   0xf              	BANKSEL	_i2c_dirty
001874   6f31     movwf   0x31, 0x1        	MOVWF	_i2c_dirty, B
                                           _00215_DS_:
                                           ;	.line	313; stepperCon.c	i2c_reg_addr %= sizeof(i2c_regs) ;          // Prevent buffer overflow
001876   0e09     movlw   0x09             	MOVLW	0x09
001878   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00187a   cf30     movff   0xf30, 0xfe5     	MOVFF	_i2c_reg_addr, POSTDEC1
00187c   ffe5
00187e   eccc     call    0x001f98, 0x0    	CALL	__moduchar
001880   f00f
001882   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
001884   6f30     movwf   0x30, 0x1        	MOVWF	_i2c_reg_addr, B
001886   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001888   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	315; stepperCon.c	PIR1bits.SSP1IF = 0 ;       // Clear interrupt
00188a   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	316; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
00188c   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
00188e   d003     bra     0x001896         	BRA	_00221_DS_
                                           _00219_DS_:
                                           ;	.line	319; stepperCon.c	else if (PIR2bits.BCL1IF) {
001890   a6a1     btfss   0xa1, 0x3, 0x0   	BTFSS	_PIR2bits, 3
001892   d001     bra     0x001896         	BRA	_00221_DS_
                                           ;	.line	320; stepperCon.c	PIR2bits.BCL1IF = 0 ;       // Clear I2C collision interrupt
001894   96a1     bcf     0xa1, 0x3, 0x0   	BCF	_PIR2bits, 3
                                           _00221_DS_:
                                           ;	.line	322; stepperCon.c	}
001896   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001898   f002
00189a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00189c   f001
00189e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0018a0   f000
0018a2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0018a4   ffd9
0018a6   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0018a8   fffb
0018aa   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0018ac   fffa
0018ae   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0018b0   ffea
0018b2   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0018b4   ffe9
0018b6   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0018b8   fff4
0018ba   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0018bc   fff3
0018be   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0018c0   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0018c2   ffe0
0018c4   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0018c6   ffd8
0018c8   0010     retfie  0x0              	RETFIE	

                                           ; ; Starting pCode block
                                           S_stepperCon__highInt	code
                                           _highInt:
                                           ;	.line	180; stepperCon.c	static void highInt(void) __interrupt(1) {
001674   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
001676   ffe5
001678   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
00167a   ffe5
00167c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00167e   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
001680   ffe5
001682   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
001684   ffe5
001686   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
001688   ffe5
00168a   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
00168c   ffe5
00168e   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
001690   ffe5
001692   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
001694   ffe5
001696   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001698   ffe5
00169a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00169c   ffd9
                                           ;	.line	182; stepperCon.c	if (INTCONbits.INT0IF) {
00169e   a2f2     btfss   0xf2, 0x1, 0x0   	BTFSS	_INTCONbits, 1
0016a0   d004     bra     0x0016aa         	BRA	_00106_DS_
                                           ;	.line	183; stepperCon.c	state = STEP ;
0016a2   0e04     movlw   0x04             	MOVLW	0x04
0016a4   010f     movlb   0xf              	BANKSEL	_state
0016a6   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	184; stepperCon.c	INTCONbits.INT0IF = 0 ;     // clear 'step' interrupt
0016a8   92f2     bcf     0xf2, 0x1, 0x0   	BCF	_INTCONbits, 1
                                           _00106_DS_:
                                           ;	.line	188; stepperCon.c	if (INTCON3bits.INT2IF) {
0016aa   a2f0     btfss   0xf0, 0x1, 0x0   	BTFSS	_INTCON3bits, 1
0016ac   d00f     bra     0x0016cc         	BRA	_00111_DS_
                                           ;	.line	190; stepperCon.c	if(PORTBbits.RB2) {
0016ae   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
0016b0   d005     bra     0x0016bc         	BRA	_00108_DS_
                                           ;	.line	192; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;   
0016b2   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	193; stepperCon.c	dir = 1 ;
0016b4   0e01     movlw   0x01             	MOVLW	0x01
0016b6   010f     movlb   0xf              	BANKSEL	_dir
0016b8   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
0016ba   d004     bra     0x0016c4         	BRA	_00109_DS_
                                           _00108_DS_:
                                           ;	.line	197; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
0016bc   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	198; stepperCon.c	dir = -1 ;
0016be   0eff     movlw   0xff             	MOVLW	0xff
0016c0   010f     movlb   0xf              	BANKSEL	_dir
0016c2   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
                                           _00109_DS_:
                                           ;	.line	201; stepperCon.c	state = NEXT_STEP ;         // Force recalculate of next step
0016c4   0e06     movlw   0x06             	MOVLW	0x06
0016c6   010f     movlb   0xf              	BANKSEL	_state
0016c8   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	202; stepperCon.c	INTCON3bits.INT2IF = 0 ;    // clear 'dir' interrupt
0016ca   92f0     bcf     0xf0, 0x1, 0x0   	BCF	_INTCON3bits, 1
                                           _00111_DS_:
                                           ;	.line	206; stepperCon.c	if (PIR1bits.CCP1IF) {
0016cc   a49e     btfss   0x9e, 0x2, 0x0   	BTFSS	_PIR1bits, 2
0016ce   d02c     bra     0x001728         	BRA	_00127_DS_
                                           ;	.line	207; stepperCon.c	T1CONbits.TMR1ON = 0 ;  // Toff timer off
0016d0   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	208; stepperCon.c	TMR1L = 0 ;             // Clear off timer
0016d2   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	209; stepperCon.c	TMR1H = 0 ;
0016d4   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
0016d6   010f     movlb   0xf              	BANKSEL	_a_state
                                           ;	.line	211; stepperCon.c	if (a_state == PH_OFF) {
0016d8   5128     movf    0x28, 0x0, 0x1   	MOVF	_a_state, W, B
0016da   0a01     xorlw   0x01             	XORLW	0x01
0016dc   e11b     bnz     0x001714         	BNZ	_00124_DS_
                                           _00192_DS_:
0016de   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	212; stepperCon.c	if (a_decay == FAST_DECAY) {            
0016e0   512b     movf    0x2b, 0x0, 0x1   	MOVF	_a_decay, W, B
0016e2   0a01     xorlw   0x01             	XORLW	0x01
0016e4   e109     bnz     0x0016f8         	BNZ	_00116_DS_
                                           _00194_DS_:
0016e6   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	213; stepperCon.c	if (pol_a) {                    // Forward current, Phase-A
0016e8   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
0016ea   e003     bz      0x0016f2         	BZ	_00113_DS_
                                           ;	.line	214; stepperCon.c	LATCbits.LATC1 = 0 ;
0016ec   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	215; stepperCon.c	LATCbits.LATC0 = 1 ;
0016ee   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
0016f0   d004     bra     0x0016fa         	BRA	_00117_DS_
                                           _00113_DS_:
                                           ;	.line	218; stepperCon.c	LATCbits.LATC0 = 0 ;
0016f2   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	219; stepperCon.c	LATCbits.LATC1 = 1 ;
0016f4   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
0016f6   d001     bra     0x0016fa         	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	222; stepperCon.c	else LATAbits.LATA4 = 1 ;  // Toggle enable for slow decay
0016f8   8889     bsf     0x89, 0x4, 0x0   	BSF	_LATAbits, 4
                                           _00117_DS_:
                                           ;	.line	224; stepperCon.c	CCPR1H = 0 ;
0016fa   6abf     clrf    0xbf, 0x0        	CLRF	_CCPR1H
0016fc   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	226; stepperCon.c	if(pol_a) CCPR1L = t_blank_high ;
0016fe   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
001700   e003     bz      0x001708         	BZ	_00119_DS_
001702   cf26     movff   0xf26, 0xfbe     	MOVFF	_t_blank_high, _CCPR1L
001704   ffbe
001706   d002     bra     0x00170c         	BRA	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	227; stepperCon.c	else CCPR1L = t_blank_low ;
001708   cf27     movff   0xf27, 0xfbe     	MOVFF	_t_blank_low, _CCPR1L
00170a   ffbe
                                           _00120_DS_:
00170c   010f     movlb   0xf              	BANKSEL	_a_state
                                           ;	.line	229; stepperCon.c	a_state = PH_BLANK ;
00170e   6b28     clrf    0x28, 0x1        	CLRF	_a_state, B
                                           ;	.line	231; stepperCon.c	T1CONbits.TMR1ON = 1 ;
001710   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
001712   d009     bra     0x001726         	BRA	_00125_DS_
                                           _00124_DS_:
001714   010f     movlb   0xf              	BANKSEL	_a_state
                                           ;	.line	233; stepperCon.c	else if(a_state == PH_BLANK) {
001716   5128     movf    0x28, 0x0, 0x1   	MOVF	_a_state, W, B
001718   e106     bnz     0x001726         	BNZ	_00125_DS_
                                           ;	.line	234; stepperCon.c	CCPR1H = 0 ;
00171a   6abf     clrf    0xbf, 0x0        	CLRF	_CCPR1H
                                           ;	.line	235; stepperCon.c	CCPR1L = t_off ;
00171c   cf29     movff   0xf29, 0xfbe     	MOVFF	_t_off, _CCPR1L
00171e   ffbe
                                           ;	.line	236; stepperCon.c	a_state = T_DRIVE ;
001720   0e02     movlw   0x02             	MOVLW	0x02
001722   010f     movlb   0xf              	BANKSEL	_a_state
001724   6f28     movwf   0x28, 0x1        	MOVWF	_a_state, B
                                           _00125_DS_:
                                           ;	.line	239; stepperCon.c	PIR1bits.CCP1IF = 0 ;
001726   949e     bcf     0x9e, 0x2, 0x0   	BCF	_PIR1bits, 2
                                           _00127_DS_:
                                           ;	.line	243; stepperCon.c	if (PIR2bits.CCP2IF) {
001728   a0a1     btfss   0xa1, 0x0, 0x0   	BTFSS	_PIR2bits, 0
00172a   d02c     bra     0x001784         	BRA	_00144_DS_
                                           ;	.line	244; stepperCon.c	T3CONbits.TMR3ON = 0 ;  // Toff timer off
00172c   90b1     bcf     0xb1, 0x0, 0x0   	BCF	_T3CONbits, 0
                                           ;	.line	245; stepperCon.c	TMR3L = 0 ;             // Clear off timer 
00172e   6ab2     clrf    0xb2, 0x0        	CLRF	_TMR3L
                                           ;	.line	246; stepperCon.c	TMR3H = 0 ;
001730   6ab3     clrf    0xb3, 0x0        	CLRF	_TMR3H
001732   010f     movlb   0xf              	BANKSEL	_b_state
                                           ;	.line	248; stepperCon.c	if (b_state == PH_OFF) {
001734   512a     movf    0x2a, 0x0, 0x1   	MOVF	_b_state, W, B
001736   0a01     xorlw   0x01             	XORLW	0x01
001738   e11b     bnz     0x001770         	BNZ	_00140_DS_
                                           _00196_DS_:
00173a   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	250; stepperCon.c	if (b_decay == FAST_DECAY) {
00173c   512d     movf    0x2d, 0x0, 0x1   	MOVF	_b_decay, W, B
00173e   0a01     xorlw   0x01             	XORLW	0x01
001740   e109     bnz     0x001754         	BNZ	_00132_DS_
                                           _00198_DS_:
001742   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	251; stepperCon.c	if (pol_b) {                    // Forward current, Phase-B
001744   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
001746   e003     bz      0x00174e         	BZ	_00129_DS_
                                           ;	.line	252; stepperCon.c	LATCbits.LATC2 = 0 ;
001748   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	253; stepperCon.c	LATDbits.LATD5 = 1 ;
00174a   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
00174c   d004     bra     0x001756         	BRA	_00133_DS_
                                           _00129_DS_:
                                           ;	.line	256; stepperCon.c	LATDbits.LATD5 = 0 ;
00174e   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	257; stepperCon.c	LATCbits.LATC2 = 1 ;
001750   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
001752   d001     bra     0x001756         	BRA	_00133_DS_
                                           _00132_DS_:
                                           ;	.line	260; stepperCon.c	else LATAbits.LATA5 = 1 ;  // Toggle enable for slow decay
001754   8a89     bsf     0x89, 0x5, 0x0   	BSF	_LATAbits, 5
                                           _00133_DS_:
                                           ;	.line	262; stepperCon.c	CCPR2H = 0 ;
001756   6a68     clrf    0x68, 0x0        	CLRF	_CCPR2H
001758   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	264; stepperCon.c	if(pol_b) CCPR2L = t_blank_high ;
00175a   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
00175c   e003     bz      0x001764         	BZ	_00135_DS_
00175e   cf26     movff   0xf26, 0xf67     	MOVFF	_t_blank_high, _CCPR2L
001760   ff67
001762   d002     bra     0x001768         	BRA	_00136_DS_
                                           _00135_DS_:
                                           ;	.line	265; stepperCon.c	else CCPR2L = t_blank_low ;
001764   cf27     movff   0xf27, 0xf67     	MOVFF	_t_blank_low, _CCPR2L
001766   ff67
                                           _00136_DS_:
001768   010f     movlb   0xf              	BANKSEL	_b_state
                                           ;	.line	267; stepperCon.c	b_state = PH_BLANK ;
00176a   6b2a     clrf    0x2a, 0x1        	CLRF	_b_state, B
                                           ;	.line	269; stepperCon.c	T3CONbits.TMR3ON = 1 ;
00176c   80b1     bsf     0xb1, 0x0, 0x0   	BSF	_T3CONbits, 0
00176e   d009     bra     0x001782         	BRA	_00141_DS_
                                           _00140_DS_:
001770   010f     movlb   0xf              	BANKSEL	_b_state
                                           ;	.line	271; stepperCon.c	else if(b_state == PH_BLANK) {
001772   512a     movf    0x2a, 0x0, 0x1   	MOVF	_b_state, W, B
001774   e106     bnz     0x001782         	BNZ	_00141_DS_
                                           ;	.line	272; stepperCon.c	CCPR2H = 0 ;
001776   6a68     clrf    0x68, 0x0        	CLRF	_CCPR2H
                                           ;	.line	273; stepperCon.c	CCPR2L = t_off ;
001778   cf29     movff   0xf29, 0xf67     	MOVFF	_t_off, _CCPR2L
00177a   ff67
                                           ;	.line	274; stepperCon.c	b_state = T_DRIVE ;
00177c   0e02     movlw   0x02             	MOVLW	0x02
00177e   010f     movlb   0xf              	BANKSEL	_b_state
001780   6f2a     movwf   0x2a, 0x1        	MOVWF	_b_state, B
                                           _00141_DS_:
                                           ;	.line	277; stepperCon.c	PIR2bits.CCP2IF = 0 ;
001782   90a1     bcf     0xa1, 0x0, 0x0   	BCF	_PIR2bits, 0
                                           _00144_DS_:
                                           ;	.line	279; stepperCon.c	}
001784   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001786   ffd9
001788   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
00178a   fffb
00178c   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
00178e   fffa
001790   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
001792   ffea
001794   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
001796   ffe9
001798   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
00179a   fff4
00179c   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
00179e   fff3
0017a0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0017a2   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0017a4   ffe0
0017a6   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0017a8   ffd8
0017aa   0010     retfie  0x0              	RETFIE	



                                           ; Statistics:
                                           ; code size:	 3214 (0x0c8e) bytes ( 2.45%)
                                           ;           	 1607 (0x0647) words
                                           ; udata size:	  161 (0x00a1) bytes ( 4.38%)
                                           ; access size:	   11 (0x000b) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.9 #10186 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_compsSetup
                                           	global	_ioSetup
                                           	global	_pwmSetup
                                           	global	_intSetup
                                           	global	_phTimersSetup
                                           	global	_resetCheck

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_sc_setup__resetCheck	code
                                           _resetCheck:
                                           ;	.line	154; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void resetCheck(void) {
001cce   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001cd0   ffe5
001cd2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001cd4   ffd9
001cd6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001cd8   ffe5
001cda   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001cdc   ffe5
                                           ;	.line	158; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(!RCONbits.TO || !RCONbits.PD || !RCONbits.BOR) {
001cde   a6d0     btfss   0xd0, 0x3, 0x0   	BTFSS	_RCONbits, 3
001ce0   d004     bra     0x001cea         	BRA	_00133_DS_
001ce2   a4d0     btfss   0xd0, 0x2, 0x0   	BTFSS	_RCONbits, 2
001ce4   d002     bra     0x001cea         	BRA	_00133_DS_
001ce6   b0d0     btfsc   0xd0, 0x0, 0x0   	BTFSC	_RCONbits, 0
001ce8   d007     bra     0x001cf8         	BRA	_00134_DS_
                                           _00133_DS_:
                                           ;	.line	160; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.TO = 1 ;
001cea   86d0     bsf     0xd0, 0x3, 0x0   	BSF	_RCONbits, 3
                                           ;	.line	161; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.PD = 1 ;
001cec   84d0     bsf     0xd0, 0x2, 0x0   	BSF	_RCONbits, 2
                                           ;	.line	162; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.BOR = 0 ;
001cee   90d0     bcf     0xd0, 0x0, 0x0   	BCF	_RCONbits, 0
                                           ;	.line	163; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.POR = 0 ;
001cf0   92d0     bcf     0xd0, 0x1, 0x0   	BCF	_RCONbits, 1
                                           ;	.line	165; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
001cf2   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	166; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
001cf4   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           _00131_DS_:
                                           ;	.line	168; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(1) ; 
001cf6   d7ff     bra     0x001cf6         	BRA	_00131_DS_
                                           _00134_DS_:
                                           ;	.line	172; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(STKPTRbits.STKFUL || STKPTRbits.STKUNF) {
001cf8   befc     btfsc   0xfc, 0x7, 0x0   	BTFSC	_STKPTRbits, 7
001cfa   d002     bra     0x001d00         	BRA	_00145_DS_
001cfc   acfc     btfss   0xfc, 0x6, 0x0   	BTFSS	_STKPTRbits, 6
001cfe   d031     bra     0x001d62         	BRA	_00148_DS_
                                           _00145_DS_:
                                           ;	.line	174; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKFUL = 0 ;
001d00   9efc     bcf     0xfc, 0x7, 0x0   	BCF	_STKPTRbits, 7
                                           ;	.line	175; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKUNF = 0 ;
001d02   9cfc     bcf     0xfc, 0x6, 0x0   	BCF	_STKPTRbits, 6
                                           ;	.line	177; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
001d04   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	178; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
001d06   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           ;	.line	181; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1CS = 0 ;      // Timer1 to Fosc/4
001d08   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
001d0a   0b3f     andlw   0x3f             	ANDLW	0x3f
001d0c   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	182; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
001d0e   0e78     movlw   0x78             	MOVLW	0x78
001d10   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00143_DS_:
                                           ;	.line	185; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 0 ;
001d12   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	186; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR1bits.TMR1IF = 0 ;
001d14   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	187; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.T1CKPS = 3 ;      // Timer1 1:8 prescale
001d16   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
001d18   0bcf     andlw   0xcf             	ANDLW	0xcf
001d1a   0930     iorlw   0x30             	IORLW	0x30
001d1c   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	188; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1H = TMR_10MS >> 8 ;
001d1e   0eb1     movlw   0xb1             	MOVLW	0xb1
001d20   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	189; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1L = TMR_10MS ;
001d22   0edf     movlw   0xdf             	MOVLW	0xdf
001d24   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	190; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 1 ;
001d26   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00137_DS_:
                                           ;	.line	192; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(!PIR1bits.TMR1IF) ;
001d28   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
001d2a   d7fe     bra     0x001d28         	BRA	_00137_DS_
                                           ;	.line	194; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if (--i == 0) {
001d2c   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
001d2e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001d30   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
001d32   f000
001d34   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d36   e1ed     bnz     0x001d12         	BNZ	_00143_DS_
                                           ;	.line	195; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC5 = !LATCbits.LATC5 ;
001d38   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001d3a   ba8b     btfsc   0x8b, 0x5, 0x0   	BTFSC	_LATCbits, 5
001d3c   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001d3e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d40   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001d42   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001d44   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001d46   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001d48   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
001d4a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d4c   0b01     andlw   0x01             	ANDLW	0x01
001d4e   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
001d50   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001d52   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001d54   508b     movf    0x8b, 0x0, 0x0   	MOVF	_LATCbits, W
001d56   0bdf     andlw   0xdf             	ANDLW	0xdf
001d58   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
001d5a   6e8b     movwf   0x8b, 0x0        	MOVWF	_LATCbits
                                           ;	.line	196; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
001d5c   0e78     movlw   0x78             	MOVLW	0x78
001d5e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d60   d7d8     bra     0x001d12         	BRA	_00143_DS_
                                           _00148_DS_:
                                           ;	.line	200; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
001d62   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001d64   f001
001d66   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001d68   f000
001d6a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d6c   ffd9
001d6e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__phTimersSetup	code
                                           _phTimersSetup:
                                           ;	.line	131; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void phTimersSetup(void) {
0020e6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0020e8   ffe5
0020ea   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0020ec   ffd9
                                           ;	.line	134; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1CS = 0 ;
0020ee   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
0020f0   0b3f     andlw   0x3f             	ANDLW	0x3f
0020f2   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	135; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.T1CKPS = 3 ;
0020f4   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
0020f6   0bcf     andlw   0xcf             	ANDLW	0xcf
0020f8   0930     iorlw   0x30             	IORLW	0x30
0020fa   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	136; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 0 ;
0020fc   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	137; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1L = 0 ;
0020fe   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	138; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1H = 0 ;
002100   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
                                           ;	.line	140; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T3CONbits.TMR3CS = 0 ;
002102   50b1     movf    0xb1, 0x0, 0x0   	MOVF	_T3CONbits, W
002104   0b3f     andlw   0x3f             	ANDLW	0x3f
002106   6eb1     movwf   0xb1, 0x0        	MOVWF	_T3CONbits
                                           ;	.line	141; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T3CONbits.T3CKPS = 3 ;
002108   50b1     movf    0xb1, 0x0, 0x0   	MOVF	_T3CONbits, W
00210a   0bcf     andlw   0xcf             	ANDLW	0xcf
00210c   0930     iorlw   0x30             	IORLW	0x30
00210e   6eb1     movwf   0xb1, 0x0        	MOVWF	_T3CONbits
                                           ;	.line	142; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T3CONbits.TMR3ON = 0 ;
002110   90b1     bcf     0xb1, 0x0, 0x0   	BCF	_T3CONbits, 0
                                           ;	.line	143; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR3L = 0 ;
002112   6ab2     clrf    0xb2, 0x0        	CLRF	_TMR3L
                                           ;	.line	144; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR3H = 0 ;
002114   6ab3     clrf    0xb3, 0x0        	CLRF	_TMR3H
002116   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	146; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C1TSEL = 0 ;   // Timer1 -> CCP1
002118   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
00211a   0bfc     andlw   0xfc             	ANDLW	0xfc
00211c   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
00211e   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
002120   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	147; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C2TSEL = 1 ;   // Timer3 -> CCP2
002122   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
002124   0be7     andlw   0xe7             	ANDLW	0xe7
002126   0908     iorlw   0x08             	IORLW	0x08
002128   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
00212a   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
                                           ;	.line	150; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.CCP1M = 0xa ;
00212c   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
00212e   0bf0     andlw   0xf0             	ANDLW	0xf0
002130   090a     iorlw   0x0a             	IORLW	0x0a
002132   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	151; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.CCP2M = 0xa ;
002134   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
002136   0bf0     andlw   0xf0             	ANDLW	0xf0
002138   090a     iorlw   0x0a             	IORLW	0x0a
00213a   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
00213c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00213e   ffd9
002140   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__intSetup	code
                                           _intSetup:
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void intSetup(void) {
002264   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002266   ffe5
002268   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00226a   ffd9
                                           ;	.line	109; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 0 ;   // Disable interrupts
00226c   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	110; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 0 ;
00226e   9cf2     bcf     0xf2, 0x6, 0x0   	BCF	_INTCONbits, 6
                                           ;	.line	112; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.IPEN = 1 ;         // Enable interrupts priority
002270   8ed0     bsf     0xd0, 0x7, 0x0   	BSF	_RCONbits, 7
                                           ;	.line	114; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.RBPU = 1 ;      // Disable Port B pull-ups
002272   8ef1     bsf     0xf1, 0x7, 0x0   	BSF	_INTCON2bits, 7
                                           ;	.line	115; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.INTEDG0 = 1 ;   // 'step' interrupt on rising edge
002274   8cf1     bsf     0xf1, 0x6, 0x0   	BSF	_INTCON2bits, 6
                                           ;	.line	117; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON3bits.INT2IP = 1 ;    // High priority to 'dir' interrupt
002276   8ef0     bsf     0xf0, 0x7, 0x0   	BSF	_INTCON3bits, 7
                                           ;	.line	119; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C1IP = 1 ;         // High priority to Phase-A comparator
002278   8ca2     bsf     0xa2, 0x6, 0x0   	BSF	_IPR2bits, 6
                                           ;	.line	120; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C2IP = 1 ;         // High priority to Phase-B comparator
00227a   8aa2     bsf     0xa2, 0x5, 0x0   	BSF	_IPR2bits, 5
                                           ;	.line	122; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.CCP1IP = 1 ;       // Hight priority to Phase-A compare timer
00227c   849f     bsf     0x9f, 0x2, 0x0   	BSF	_IPR1bits, 2
                                           ;	.line	123; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.CCP2IP = 1 ;       // Hight priority to Phase-B compare timer
00227e   80a2     bsf     0xa2, 0x0, 0x0   	BSF	_IPR2bits, 0
                                           ;	.line	125; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.SSP1IP = 0 ;       // Low priority to I2C interrupt
002280   969f     bcf     0x9f, 0x3, 0x0   	BCF	_IPR1bits, 3
                                           ;	.line	127; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 1 ;   // Enable interrupts
002282   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	128; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 1 ;
002284   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
                                           ;	.line	129; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002286   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002288   ffd9
00228a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__pwmSetup	code
                                           _pwmSetup:
                                           ;	.line	90; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void pwmSetup(void) {
00218e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002190   ffe5
002192   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002194   ffd9
002196   010f     movlb   0xf              	BANKSEL	_ANSELEbits
                                           ;	.line	91; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELEbits.ANSE2 = 0 ;
002198   953c     bcf     0x3c, 0x2, 0x1   	BCF	_ANSELEbits, 2, B
                                           ;	.line	92; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 1 ;          // Disable driver for setup
00219a   8496     bsf     0x96, 0x2, 0x0   	BSF	_TRISEbits, 2
00219c   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	93; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD1 = 0 ;
00219e   933b     bcf     0x3b, 0x1, 0x1   	BCF	_ANSELDbits, 1, B
                                           ;	.line	94; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 1 ;
0021a0   8295     bsf     0x95, 0x1, 0x0   	BSF	_TRISDbits, 1
0021a2   010f     movlb   0xf              	BANKSEL	_CCPTMRS1
                                           ;	.line	96; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS1 = 0x00 ;               // Use Timer2 for references
0021a4   6b48     clrf    0x48, 0x1        	CLRF	_CCPTMRS1, B
                                           ;	.line	97; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PR2 = 0xff ;                    // Set timer for 62.5kHz @64MHz, 10-bit res
0021a6   0eff     movlw   0xff             	MOVLW	0xff
0021a8   6ebb     movwf   0xbb, 0x0        	MOVWF	_PR2
                                           ;	.line	98; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.T2CKPS = 0x0 ;        // Set prescaler to 1:1
0021aa   50ba     movf    0xba, 0x0, 0x0   	MOVF	_T2CONbits, W
0021ac   0bfc     andlw   0xfc             	ANDLW	0xfc
0021ae   6eba     movwf   0xba, 0x0        	MOVWF	_T2CONbits
                                           ;	.line	99; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.TMR2ON = 1 ;          // Turn timer on
0021b0   84ba     bsf     0xba, 0x2, 0x0   	BSF	_T2CONbits, 2
0021b2   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
                                           ;	.line	101; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP5CONbits.CCP5M = 0x0c ;      // Enable Phase-A current reference
0021b4   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
0021b6   0bf0     andlw   0xf0             	ANDLW	0xf0
0021b8   090c     iorlw   0x0c             	IORLW	0x0c
0021ba   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
0021bc   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
0021be   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
                                           ;	.line	102; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP4CONbits.CCP4M = 0x0c ;      // Enable Phase-B current reference
0021c0   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
0021c2   0bf0     andlw   0xf0             	ANDLW	0xf0
0021c4   090c     iorlw   0x0c             	IORLW	0x0c
0021c6   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
0021c8   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	104; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 0 ;          // Enable driver
0021ca   9496     bcf     0x96, 0x2, 0x0   	BCF	_TRISEbits, 2
                                           ;	.line	105; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 0 ;
0021cc   9295     bcf     0x95, 0x1, 0x0   	BCF	_TRISDbits, 1
                                           ;	.line	106; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
0021ce   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0021d0   ffd9
0021d2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__ioSetup	code
                                           _ioSetup:
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void ioSetup(void) {
002142   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002144   ffe5
002146   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002148   ffd9
                                           ;	.line	52; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB4 = 0 ;     // Start with a cleared 'fault' signal
00214a   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 0 ;
00214c   9881     bcf     0x81, 0x4, 0x0   	BCF	_PORTBbits, 4
00214e   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	55; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD2 = 0 ;
002150   953b     bcf     0x3b, 0x2, 0x1   	BCF	_ANSELDbits, 2, B
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.RD2 = 0 ;     // Start with blue LED off
002152   9495     bcf     0x95, 0x2, 0x0   	BCF	_TRISDbits, 2
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTDbits.RD2 = 0 ;
002154   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
002156   010f     movlb   0xf              	BANKSEL	_ANSELC
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELC = 0x00 ;         // Disable Port-C as analog input
002158   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC5 = 0 ;     // Start with red LED off
00215a   9a94     bcf     0x94, 0x5, 0x0   	BCF	_TRISCbits, 5
                                           ;	.line	62; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 0 ;
00215c   9a82     bcf     0x82, 0x5, 0x0   	BCF	_PORTCbits, 5
                                           ;	.line	64; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC0 = 0 ;     // Phase-A outputs
00215e   9094     bcf     0x94, 0x0, 0x0   	BCF	_TRISCbits, 0
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC1 = 0 ;
002160   9294     bcf     0x94, 0x1, 0x0   	BCF	_TRISCbits, 1
                                           ;	.line	67; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA4 = 0 ;
002162   9892     bcf     0x92, 0x4, 0x0   	BCF	_TRISAbits, 4
                                           ;	.line	69; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC0 = 0 ;
002164   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC1 = 0 ;
002166   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	71; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA4 = 0 ;
002168   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	73; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC2 = 0 ;     // Phase-B outputs
00216a   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
00216c   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	74; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD5 = 0 ;
00216e   9b3b     bcf     0x3b, 0x5, 0x1   	BCF	_ANSELDbits, 5, B
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.RD5 = 0 ;
002170   9a95     bcf     0x95, 0x5, 0x0   	BCF	_TRISDbits, 5
002172   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	76; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA5 = 0 ;
002174   9b38     bcf     0x38, 0x5, 0x1   	BCF	_ANSELAbits, 5, B
                                           ;	.line	77; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA5 = 0 ;
002176   9a92     bcf     0x92, 0x5, 0x0   	BCF	_TRISAbits, 5
                                           ;	.line	79; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC2 = 0 ;
002178   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	80; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATDbits.LATD5 = 0 ; 
00217a   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	81; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA5 = 0 ;
00217c   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
00217e   010f     movlb   0xf              	BANKSEL	_ANSELB
                                           ;	.line	83; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELB = 0x00 ;         // Disable port B analog input
002180   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
                                           ;	.line	85; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB0 = 1 ;     // 'step', 'dir' and 'enable' as inputs
002182   8093     bsf     0x93, 0x0, 0x0   	BSF	_TRISBbits, 0
                                           ;	.line	86; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB2 = 1 ;
002184   8493     bsf     0x93, 0x2, 0x0   	BSF	_TRISBbits, 2
                                           ;	.line	87; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB3 = 1 ;
002186   8693     bsf     0x93, 0x3, 0x0   	BSF	_TRISBbits, 3
                                           ;	.line	88; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002188   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00218a   ffd9
00218c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__compsSetup	code
                                           _compsSetup:
                                           ;	.line	31; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void compsSetup(void) {
00220a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00220c   ffe5
00220e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002210   ffd9
002212   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA0 = 1 ;      // Enable RA0 as analog input
002214   8138     bsf     0x38, 0x0, 0x1   	BSF	_ANSELAbits, 0, B
                                           ;	.line	33; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA0 = 1 ;
002216   8092     bsf     0x92, 0x0, 0x0   	BSF	_TRISAbits, 0
002218   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA1 = 1 ;      // Enable RA1 as analog input
00221a   8338     bsf     0x38, 0x1, 0x1   	BSF	_ANSELAbits, 1, B
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA1 = 1 ;
00221c   8292     bsf     0x92, 0x1, 0x0   	BSF	_TRISAbits, 1
00221e   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA2 = 1 ;      // Enable RA2 as analog input
002220   8538     bsf     0x38, 0x2, 0x1   	BSF	_ANSELAbits, 2, B
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA2 = 1 ;
002222   8492     bsf     0x92, 0x2, 0x0   	BSF	_TRISAbits, 2
002224   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA3 = 1 ;      // Enable RA3 as analog input
002226   8738     bsf     0x38, 0x3, 0x1   	BSF	_ANSELAbits, 3, B
                                           ;	.line	42; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA3 = 1 ;
002228   8692     bsf     0x92, 0x3, 0x0   	BSF	_TRISAbits, 3
                                           ;	.line	44; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0 = 0x09 ;            // C12IN1- Goes to C1, Current of Phase-A
00222a   0e09     movlw   0x09             	MOVLW	0x09
00222c   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0 = 0x08 ;            // C12IN0- Goes to C2, Current of Phase-B
00222e   0e08     movlw   0x08             	MOVLW	0x08
002230   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           ;	.line	47; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C1HYS = 0 ;     // Enable hysteresis for both comparators
002232   9677     bcf     0x77, 0x3, 0x0   	BCF	_CM2CON1bits, 3
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C2HYS = 0 ;           
002234   9477     bcf     0x77, 0x2, 0x0   	BCF	_CM2CON1bits, 2
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002236   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002238   ffd9
00223a   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  490 (0x01ea) bytes ( 0.37%)
                                           ;           	  245 (0x00f5) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.9 #10186 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_read_regs
                                           	global	_store_regs

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_registers__store_regs	code
                                           _store_regs:
                                           ;	.line	43; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void store_regs(uint8_t * i2c_regs, uint8_t num_regs) {
001ab2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001ab4   ffe5
001ab6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001ab8   ffd9
001aba   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001abc   ffe5
001abe   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001ac0   ffe5
001ac2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001ac4   ffe5
001ac6   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001ac8   ffe5
001aca   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001acc   ffe5
001ace   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001ad0   ffe5
001ad2   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001ad4   ffe5
001ad6   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001ad8   ffe5
001ada   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001adc   ffe5
001ade   0e02     movlw   0x02             	MOVLW	0x02
001ae0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001ae2   f000
001ae4   0e03     movlw   0x03             	MOVLW	0x03
001ae6   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001ae8   f001
001aea   0e04     movlw   0x04             	MOVLW	0x04
001aec   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001aee   f002
001af0   0e05     movlw   0x05             	MOVLW	0x05
001af2   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
001af4   f003
                                           ;	.line	46; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
001af6   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001af8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00127_DS_:
001afa   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001afc   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
001afe   e22a     bc      0x001b54         	BC	_00129_DS_
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ; 
001b00   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
001b02   ffa9
                                           ;	.line	50; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001b04   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001b06   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	52; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
001b08   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	val = EEDATA ;
001b0a   cfa8     movff   0xfa8, 0x005     	MOVFF	_EEDATA, r0x05
001b0c   f005
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	if (val != i2c_regs[i]) {
001b0e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001b10   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001b12   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001b14   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001b16   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001b18   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001b1a   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001b1c   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001b1e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001b20   c006     movff   0x006, 0xfe9     	MOVFF	r0x06, FSR0L
001b22   ffe9
001b24   c007     movff   0x007, 0xff3     	MOVFF	r0x07, PRODL
001b26   fff3
001b28   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001b2a   ec6b     call    0x0022d6, 0x0    	CALL	__gptrget1
001b2c   f011
001b2e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001b30   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001b32   1806     xorwf   0x06, 0x0, 0x0   	XORWF	r0x06, W
001b34   e00d     bz      0x001b50         	BZ	_00128_DS_
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEDATA = i2c_regs[i] ;      // Prepare data
001b36   c006     movff   0x006, 0xfa8     	MOVFF	r0x06, _EEDATA
001b38   ffa8
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001b3a   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001b3c   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 1 ;       // Allow write cycle
001b3e   84a6     bsf     0xa6, 0x2, 0x0   	BSF	_EECON1bits, 2
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 0 ;        // Disable interrupts
001b40   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0x55 ;             // "magic" sequence for write
001b42   0e55     movlw   0x55             	MOVLW	0x55
001b44   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0xaa ;
001b46   0eaa     movlw   0xaa             	MOVLW	0xaa
001b48   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WR = 1 ;         // Initiate write
001b4a   82a6     bsf     0xa6, 0x1, 0x0   	BSF	_EECON1bits, 1
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 1 ;        // Enable interrupts
001b4c   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 0 ;       // Prevent write cycle
001b4e   94a6     bcf     0xa6, 0x2, 0x0   	BCF	_EECON1bits, 2
                                           _00128_DS_:
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001b50   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
001b52   d7d3     bra     0x001afa         	BRA	_00127_DS_
                                           _00129_DS_:
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
001b54   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
001b56   f008
001b58   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001b5a   f007
001b5c   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001b5e   f006
001b60   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001b62   f005
001b64   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001b66   f004
001b68   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001b6a   f003
001b6c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001b6e   f002
001b70   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001b72   f001
001b74   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001b76   f000
001b78   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001b7a   ffd9
001b7c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_registers__read_regs	code
                                           _read_regs:
                                           ;	.line	29; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void read_regs(uint8_t * i2c_regs, uint8_t num_regs) {
001d70   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001d72   ffe5
001d74   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001d76   ffd9
001d78   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001d7a   ffe5
001d7c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001d7e   ffe5
001d80   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001d82   ffe5
001d84   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001d86   ffe5
001d88   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001d8a   ffe5
001d8c   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001d8e   ffe5
001d90   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001d92   ffe5
001d94   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001d96   ffe5
001d98   0e02     movlw   0x02             	MOVLW	0x02
001d9a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001d9c   f000
001d9e   0e03     movlw   0x03             	MOVLW	0x03
001da0   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001da2   f001
001da4   0e04     movlw   0x04             	MOVLW	0x04
001da6   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001da8   f002
001daa   0e05     movlw   0x05             	MOVLW	0x05
001dac   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
001dae   f003
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
001db0   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001db2   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00107_DS_:
001db4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001db6   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
001db8   e219     bc      0x001dec         	BC	_00109_DS_
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ;              // Read I2C address from 00 location
001dba   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
001dbc   ffa9
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001dbe   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	37; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001dc0   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
001dc2   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	i2c_regs[i] = EEDATA ;
001dc4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001dc6   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001dc8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001dca   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001dcc   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001dce   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001dd0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001dd2   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001dd4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001dd6   cfa8     movff   0xfa8, 0xfe5     	MOVFF	_EEDATA, POSTDEC1
001dd8   ffe5
001dda   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
001ddc   ffe9
001dde   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
001de0   fff3
001de2   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001de4   ec8a     call    0x002314, 0x0    	CALL	__gptrput1
001de6   f011
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001de8   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
001dea   d7e4     bra     0x001db4         	BRA	_00107_DS_
                                           _00109_DS_:
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
001dec   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001dee   f007
001df0   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001df2   f006
001df4   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001df6   f005
001df8   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001dfa   f004
001dfc   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001dfe   f003
001e00   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001e02   f002
001e04   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001e06   f001
001e08   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001e0a   f000
001e0c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001e0e   ffd9
001e10   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  366 (0x016e) bytes ( 0.28%)
                                           ;           	  183 (0x00b7) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    9 (0x0009) bytes


                                           	end
