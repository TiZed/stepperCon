gplink-1.5.2 #1285 (May 24 2017)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 24/05/17  20:07:41


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.6 #9917 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec
                                           	CONFIG	FOSC=HSHP
                                           	CONFIG	PLLCFG=ON
                                           	CONFIG	WDTEN=SWON
                                           	CONFIG	XINST=OFF
                                           	CONFIG	CCP3MX=PORTE0
                                           	CONFIG	P2BMX=PORTC0
                                           	CONFIG	MCLRE=EXTMCLR


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_state
                                           	global	_skip
                                           	global	_set_amp
                                           	global	_max_amp
                                           	global	_a_decay
                                           	global	_b_decay
                                           	global	_t_off
                                           	global	_t_blank_low
                                           	global	_t_blank_high
                                           	global	_step_a
                                           	global	_step_b
                                           	global	_pol_a
                                           	global	_pol_b
                                           	global	_dir
                                           	global	_pwm_lu
                                           	global	_zero_cross
                                           	global	_i2c_address
                                           	global	_i2c_counter
                                           	global	_i2c_reg_addr
                                           	global	_i2c_regs
                                           	global	_i2c_dirty
                                           	global	_a_state
                                           	global	_b_state
                                           	global	_i2cSetup
                                           	global	_activeInts
                                           	global	_idleInts
                                           	global	_prep_pwm_lu
                                           	global	_set_op_vars
                                           	global	_delay_ms
                                           	global	_main
                                           	global	___EEPROM

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__moduchar
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	___fs2uint
                                           	extern	_read_regs
                                           	extern	_store_regs
                                           	extern	_compsSetup
                                           	extern	_ioSetup
                                           	extern	_pwmSetup
                                           	extern	_intSetup
                                           	extern	_phTimersSetup
                                           	extern	_resetCheck
                                           	extern	___uint2fs
                                           	extern	___fsdiv
                                           	extern	___sint2fs
                                           	extern	___fsmul
                                           	extern	___fsadd

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           _pwm_base	db	0x00, 0x00, 0x32, 0x00, 0x64, 0x00, 0x94, 0x00, 0xc4, 0x00, 0xf1, 0x00
                                           	db	0x1c, 0x01, 0x44, 0x01, 0x6a, 0x01, 0x8b, 0x01, 0xa9, 0x01, 0xc3, 0x01
                                           	db	0xd9, 0x01, 0xe9, 0x01, 0xf6, 0x01, 0xfd, 0x01, 0x00, 0x02, 0xfd, 0x01
                                           	db	0xf6, 0x01, 0xe9, 0x01, 0xd9, 0x01, 0xc3, 0x01, 0xa9, 0x01, 0x8b, 0x01
                                           	db	0x6a, 0x01, 0x44, 0x01, 0x1c, 0x01, 0xf1, 0x00, 0xc4, 0x00, 0x94, 0x00
                                           	db	0x64, 0x00, 0x32, 0x00, 0x00, 0x00, 0xce, 0xff, 0x9c, 0xff, 0x6c, 0xff
                                           	db	0x3c, 0xff, 0x0f, 0xff, 0xe4, 0xfe, 0xbc, 0xfe, 0x96, 0xfe, 0x75, 0xfe
                                           	db	0x57, 0xfe, 0x3d, 0xfe, 0x27, 0xfe, 0x17, 0xfe, 0x0a, 0xfe, 0x03, 0xfe
                                           	db	0x00, 0xfe, 0x03, 0xfe, 0x0a, 0xfe, 0x17, 0xfe, 0x27, 0xfe, 0x3d, 0xfe
                                           	db	0x57, 0xfe, 0x75, 0xfe, 0x96, 0xfe, 0xbc, 0xfe, 0xe4, 0xfe, 0x0f, 0xff
                                           	db	0x3c, 0xff, 0x6c, 0xff, 0x9c, 0xff, 0xce, 0xff


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1

                                           udata_stepperCon_0	udata
                                           _state	res	1

                                           udata_stepperCon_1	udata
                                           _dir	res	1

                                           udata_stepperCon_2	udata
                                           _t_blank_high	res	1

                                           udata_stepperCon_3	udata
                                           _t_blank_low	res	1

                                           udata_stepperCon_4	udata
                                           _a_state	res	1

                                           udata_stepperCon_5	udata
                                           _t_off	res	1

                                           udata_stepperCon_6	udata
                                           _b_state	res	1

                                           udata_stepperCon_7	udata
                                           _a_decay	res	1

                                           udata_stepperCon_8	udata
                                           _pol_a	res	1

                                           udata_stepperCon_9	udata
                                           _b_decay	res	1

                                           udata_stepperCon_10	udata
                                           _pol_b	res	1

                                           udata_stepperCon_11	udata
                                           _i2c_counter	res	1

                                           udata_stepperCon_12	udata
                                           _i2c_reg_addr	res	1

                                           udata_stepperCon_13	udata
                                           _i2c_dirty	res	1

                                           udata_stepperCon_14	udata
                                           _i2c_regs	res	9

                                           udata_stepperCon_15	udata
                                           _i2c_address	res	1

                                           udata_stepperCon_16	udata
                                           _zero_cross	res	2

                                           udata_stepperCon_17	udata
                                           _set_amp	res	2

                                           udata_stepperCon_18	udata
                                           _max_amp	res	2

                                           udata_stepperCon_19	udata
                                           _pwm_lu	res	128

                                           udata_stepperCon_20	udata
                                           _skip	res	1

                                           udata_stepperCon_21	udata
                                           _step_a	res	1

                                           udata_stepperCon_22	udata
                                           _step_b	res	1

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x1_highInt	code	0X000008
                                           ivec_0x1_highInt:
000008   ef4c     goto    0x001698         	GOTO	_highInt
00000a   f00b

                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x2_lowInt	code	0X000018
                                           ivec_0x2_lowInt:
000018   efe8     goto    0x0017d0         	GOTO	_lowInt
00001a   f00b

                                           ; ; Starting pCode block for absolute Ival
                                           S_stepperCon____EEPROM	code	0XF00000
                                           ___EEPROM:
                                           	DB	0x40, 0x01, 0xdc, 0x05, 0x74, 0x0e, 0x14, 0x0a, 0x01





                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stepperCon__main	code
                                           _main:
                                           ;	.line	426; stepperCon.c	uint8_t pwm_a_l = 0, pwm_a_h = 0, pwm_b_l = 0, pwm_b_h = 0 ;
00001c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
00001e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000020   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000022   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           ;	.line	428; stepperCon.c	ioSetup() ;                 // Setup IO ports
000024   ecb2     call    0x002164, 0x0    	CALL	_ioSetup
000026   f010
                                           ;	.line	431; stepperCon.c	if(RCONbits.POR) {
000028   a2d0     btfss   0xd0, 0x1, 0x0   	BTFSS	_RCONbits, 1
00002a   d002     bra     0x000030         	BRA	_00299_DS_
                                           ;	.line	432; stepperCon.c	resetCheck() ;
00002c   ec78     call    0x001cf0, 0x0    	CALL	_resetCheck
00002e   f00e
                                           _00299_DS_:
                                           ;	.line	437; stepperCon.c	RCONbits.POR = 1 ;
000030   82d0     bsf     0xd0, 0x1, 0x0   	BSF	_RCONbits, 1
                                           ;	.line	438; stepperCon.c	RCONbits.BOR = 1 ;
000032   80d0     bsf     0xd0, 0x0, 0x0   	BSF	_RCONbits, 0
                                           ;	.line	440; stepperCon.c	read_regs(i2c_regs, sizeof(i2c_regs)) ;  // Populate I2C registers from EEPROM
000034   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
000036   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000038   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
00003a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00003c   0e80     movlw   0x80             	MOVLW	0x80
00003e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000040   0e09     movlw   0x09             	MOVLW	0x09
000042   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000044   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000046   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000048   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00004a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00004c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00004e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000050   ecc9     call    0x001d92, 0x0    	CALL	_read_regs
000052   f00e
000054   0e04     movlw   0x04             	MOVLW	0x04
000056   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	441; stepperCon.c	set_op_vars() ;             // Set operation variables from I2C registers
000058   ec26     call    0x001c4c, 0x0    	CALL	_set_op_vars
00005a   f00e
00005c   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	442; stepperCon.c	i2c_dirty = 0 ;             // Clear I2C dirty flag
00005e   6b31     clrf    0x31, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	444; stepperCon.c	i2cSetup() ;                // Setup I2C I/F
000060   ec2f     call    0x00225e, 0x0    	CALL	_i2cSetup
000062   f011
                                           ;	.line	445; stepperCon.c	intSetup() ;                // Interrupts setup
000064   ec43     call    0x002286, 0x0    	CALL	_intSetup
000066   f011
                                           ;	.line	446; stepperCon.c	compsSetup() ;              // Comparators setup
000068   ec16     call    0x00222c, 0x0    	CALL	_compsSetup
00006a   f011
                                           ;	.line	447; stepperCon.c	idleInts() ;                // Set interrupts to 'idle' state
00006c   ec57     call    0x0022ae, 0x0    	CALL	_idleInts
00006e   f011
000070   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	450; stepperCon.c	state = IDLE ;              // Start in 'idle' state
000072   6b24     clrf    0x24, 0x1        	CLRF	_state, B
                                           ;	.line	452; stepperCon.c	phTimersSetup() ;
000074   ec84     call    0x002108, 0x0    	CALL	_phTimersSetup
000076   f010
                                           ;	.line	455; stepperCon.c	PORTDbits.RD2 = 1 ;     // Turn blue LED on
000078   8483     bsf     0x83, 0x2, 0x0   	BSF	_PORTDbits, 2
                                           ;	.line	456; stepperCon.c	delay_ms(300) ;    
00007a   0e01     movlw   0x01             	MOVLW	0x01
00007c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00007e   0e2c     movlw   0x2c             	MOVLW	0x2c
000080   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000082   ec17     call    0x00202e, 0x0    	CALL	_delay_ms
000084   f010
000086   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000088   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	457; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
00008a   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
                                           ;	.line	459; stepperCon.c	WDTCON = 1 ;        // Enable watchdog timer
00008c   0e01     movlw   0x01             	MOVLW	0x01
00008e   6ed1     movwf   0xd1, 0x0        	MOVWF	_WDTCON
                                           _00437_DS_:
000090   0004     clrwdt                   	clrwdt	
000092   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	465; stepperCon.c	switch(state) {
000094   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
000096   e102     bnz     0x00009c         	BNZ	_00610_DS_
000098   ef50     goto    0x0006a0         	GOTO	_00430_DS_
00009a   f003
                                           _00610_DS_:
00009c   010f     movlb   0xf              	BANKSEL	_state
00009e   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000a0   0a01     xorlw   0x01             	XORLW	0x01
0000a2   e012     bz      0x0000c8         	BZ	_00300_DS_
                                           _00612_DS_:
0000a4   010f     movlb   0xf              	BANKSEL	_state
0000a6   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000a8   0a02     xorlw   0x02             	XORLW	0x02
0000aa   e102     bnz     0x0000b0         	BNZ	_00614_DS_
0000ac   ef0e     goto    0x00061c         	GOTO	_00409_DS_
0000ae   f003
                                           _00614_DS_:
0000b0   010f     movlb   0xf              	BANKSEL	_state
0000b2   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000b4   0a04     xorlw   0x04             	XORLW	0x04
0000b6   e101     bnz     0x0000ba         	BNZ	_00616_DS_
0000b8   d14c     bra     0x000352         	BRA	_00348_DS_
                                           _00616_DS_:
0000ba   010f     movlb   0xf              	BANKSEL	_state
0000bc   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000be   0a06     xorlw   0x06             	XORLW	0x06
0000c0   e102     bnz     0x0000c6         	BNZ	_00618_DS_
0000c2   ef2e     goto    0x00045c         	GOTO	_00381_DS_
0000c4   f002
                                           _00618_DS_:
0000c6   d7e4     bra     0x000090         	BRA	_00437_DS_
                                           _00300_DS_:
                                           ;	.line	467; stepperCon.c	LATDbits.LATD2 = !LATDbits.LATD2 ;
0000c8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0000ca   b48c     btfsc   0x8c, 0x2, 0x0   	BTFSC	_LATDbits, 2
0000cc   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0000ce   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000d0   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0000d2   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0000d4   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0000d6   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0000d8   3604     rlcf    0x04, 0x1, 0x0   	RLCF	r0x04, F
0000da   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000dc   0b01     andlw   0x01             	ANDLW	0x01
0000de   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0000e0   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0000e2   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0000e4   508c     movf    0x8c, 0x0, 0x0   	MOVF	_LATDbits, W
0000e6   0bfb     andlw   0xfb             	ANDLW	0xfb
0000e8   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0000ea   6e8c     movwf   0x8c, 0x0        	MOVWF	_LATDbits
0000ec   010f     movlb   0xf              	BANKSEL	_skip
                                           ;	.line	471; stepperCon.c	if (skip == STEP_1) step_a = STEPS / 2 ;
0000ee   5133     movf    0x33, 0x0, 0x1   	MOVF	_skip, W, B
0000f0   0a10     xorlw   0x10             	XORLW	0x10
0000f2   e104     bnz     0x0000fc         	BNZ	_00302_DS_
0000f4   0e08     movlw   0x08             	MOVLW	0x08
0000f6   010f     movlb   0xf              	BANKSEL	_step_a
0000f8   6f34     movwf   0x34, 0x1        	MOVWF	_step_a, B
0000fa   d002     bra     0x000100         	BRA	_00303_DS_
                                           _00302_DS_:
0000fc   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	472; stepperCon.c	else step_a = 0 ;
0000fe   6b34     clrf    0x34, 0x1        	CLRF	_step_a, B
                                           _00303_DS_:
                                           ;	.line	475; stepperCon.c	step_b = step_a + STEPS ;
000100   0e10     movlw   0x10             	MOVLW	0x10
000102   010f     movlb   0xf              	BANKSEL	_step_a
000104   2534     addwf   0x34, 0x0, 0x1   	ADDWF	_step_a, W, B
000106   010f     movlb   0xf              	BANKSEL	_step_b
000108   6f35     movwf   0x35, 0x1        	MOVWF	_step_b, B
                                           ;	.line	478; stepperCon.c	CCPR1H = 0 ;
00010a   6abf     clrf    0xbf, 0x0        	CLRF	_CCPR1H
                                           ;	.line	479; stepperCon.c	CCPR1L = t_off ;
00010c   cf29     movff   0xf29, 0xfbe     	MOVFF	_t_off, _CCPR1L
00010e   ffbe
                                           ;	.line	481; stepperCon.c	CCPR2H = 0 ;
000110   6a68     clrf    0x68, 0x0        	CLRF	_CCPR2H
                                           ;	.line	482; stepperCon.c	CCPR2L = t_off ;
000112   cf29     movff   0xf29, 0xf67     	MOVFF	_t_off, _CCPR2L
000114   ff67
                                           ;	.line	484; stepperCon.c	if (step_a > THREE_QUARTERS) a_decay = FAST_DECAY ;
000116   0e31     movlw   0x31             	MOVLW	0x31
000118   010f     movlb   0xf              	BANKSEL	_step_a
00011a   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
00011c   e304     bnc     0x000126         	BNC	_00311_DS_
00011e   0e01     movlw   0x01             	MOVLW	0x01
000120   010f     movlb   0xf              	BANKSEL	_a_decay
000122   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
000124   d011     bra     0x000148         	BRA	_00312_DS_
                                           _00311_DS_:
                                           ;	.line	485; stepperCon.c	else if (step_a >= HALF_CYCLE) a_decay = SLOW_DECAY ;
000126   0e20     movlw   0x20             	MOVLW	0x20
000128   010f     movlb   0xf              	BANKSEL	_step_a
00012a   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
00012c   e303     bnc     0x000134         	BNC	_00308_DS_
00012e   010f     movlb   0xf              	BANKSEL	_a_decay
000130   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
000132   d00a     bra     0x000148         	BRA	_00312_DS_
                                           _00308_DS_:
                                           ;	.line	486; stepperCon.c	else if (step_a > STEPS) a_decay = FAST_DECAY ;
000134   0e11     movlw   0x11             	MOVLW	0x11
000136   010f     movlb   0xf              	BANKSEL	_step_a
000138   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
00013a   e304     bnc     0x000144         	BNC	_00305_DS_
00013c   0e01     movlw   0x01             	MOVLW	0x01
00013e   010f     movlb   0xf              	BANKSEL	_a_decay
000140   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
000142   d002     bra     0x000148         	BRA	_00312_DS_
                                           _00305_DS_:
000144   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	487; stepperCon.c	else a_decay = SLOW_DECAY ;
000146   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
                                           _00312_DS_:
                                           ;	.line	489; stepperCon.c	if (step_b > THREE_QUARTERS) b_decay = FAST_DECAY ;
000148   0e31     movlw   0x31             	MOVLW	0x31
00014a   010f     movlb   0xf              	BANKSEL	_step_b
00014c   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
00014e   e304     bnc     0x000158         	BNC	_00320_DS_
000150   0e01     movlw   0x01             	MOVLW	0x01
000152   010f     movlb   0xf              	BANKSEL	_b_decay
000154   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
000156   d011     bra     0x00017a         	BRA	_00321_DS_
                                           _00320_DS_:
                                           ;	.line	490; stepperCon.c	else if (step_b >= HALF_CYCLE) b_decay = SLOW_DECAY ;
000158   0e20     movlw   0x20             	MOVLW	0x20
00015a   010f     movlb   0xf              	BANKSEL	_step_b
00015c   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
00015e   e303     bnc     0x000166         	BNC	_00317_DS_
000160   010f     movlb   0xf              	BANKSEL	_b_decay
000162   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
000164   d00a     bra     0x00017a         	BRA	_00321_DS_
                                           _00317_DS_:
                                           ;	.line	491; stepperCon.c	else if (step_b > STEPS) b_decay = FAST_DECAY ;
000166   0e11     movlw   0x11             	MOVLW	0x11
000168   010f     movlb   0xf              	BANKSEL	_step_b
00016a   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
00016c   e304     bnc     0x000176         	BNC	_00314_DS_
00016e   0e01     movlw   0x01             	MOVLW	0x01
000170   010f     movlb   0xf              	BANKSEL	_b_decay
000172   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
000174   d002     bra     0x00017a         	BRA	_00321_DS_
                                           _00314_DS_:
000176   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	492; stepperCon.c	else b_decay = SLOW_DECAY ;
000178   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
                                           _00321_DS_:
                                           ;	.line	494; stepperCon.c	prep_pwm_lu() ;         // prepare PWM lookup table
00017a   ec97     call    0x00132e, 0x0    	CALL	_prep_pwm_lu
00017c   f009
                                           ;	.line	496; stepperCon.c	pwmSetup() ;            // Activate PWM
00017e   ecd8     call    0x0021b0, 0x0    	CALL	_pwmSetup
000180   f010
                                           ;	.line	497; stepperCon.c	activeInts() ;          // Set active state interrupts
000182   ecfb     call    0x0021f6, 0x0    	CALL	_activeInts
000184   f010
                                           ;	.line	499; stepperCon.c	T1CONbits.TMR1ON = 0 ;          // Toff timer off
000186   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	500; stepperCon.c	TMR1L = 0 ;                     // Clear off timer
000188   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	501; stepperCon.c	TMR1H = 0 ;
00018a   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
                                           ;	.line	503; stepperCon.c	T3CONbits.TMR3ON = 0 ;  // Toff timer off
00018c   90b1     bcf     0xb1, 0x0, 0x0   	BCF	_T3CONbits, 0
                                           ;	.line	504; stepperCon.c	TMR3L = 0 ;             // Clear off timer 
00018e   6ab2     clrf    0xb2, 0x0        	CLRF	_TMR3L
                                           ;	.line	505; stepperCon.c	TMR3H = 0 ;
000190   6ab3     clrf    0xb3, 0x0        	CLRF	_TMR3H
                                           ;	.line	507; stepperCon.c	a_state = T_DRIVE ;
000192   0e02     movlw   0x02             	MOVLW	0x02
000194   010f     movlb   0xf              	BANKSEL	_a_state
000196   6f28     movwf   0x28, 0x1        	MOVWF	_a_state, B
                                           ;	.line	508; stepperCon.c	b_state = T_DRIVE ;
000198   0e02     movlw   0x02             	MOVLW	0x02
00019a   010f     movlb   0xf              	BANKSEL	_b_state
00019c   6f2a     movwf   0x2a, 0x1        	MOVWF	_b_state, B
00019e   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	511; stepperCon.c	if (step_a == HALF_CYCLE || step_a == 0) pol_a = 2 ;
0001a0   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0001a2   0a20     xorlw   0x20             	XORLW	0x20
0001a4   e003     bz      0x0001ac         	BZ	_00325_DS_
                                           _00628_DS_:
0001a6   010f     movlb   0xf              	BANKSEL	_step_a
0001a8   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0001aa   e104     bnz     0x0001b4         	BNZ	_00326_DS_
                                           _00325_DS_:
0001ac   0e02     movlw   0x02             	MOVLW	0x02
0001ae   010f     movlb   0xf              	BANKSEL	_pol_a
0001b0   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
0001b2   d00a     bra     0x0001c8         	BRA	_00327_DS_
                                           _00326_DS_:
                                           ;	.line	512; stepperCon.c	else if (step_a > HALF_CYCLE) pol_a = 0 ;
0001b4   0e21     movlw   0x21             	MOVLW	0x21
0001b6   010f     movlb   0xf              	BANKSEL	_step_a
0001b8   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
0001ba   e303     bnc     0x0001c2         	BNC	_00323_DS_
0001bc   010f     movlb   0xf              	BANKSEL	_pol_a
0001be   6b2c     clrf    0x2c, 0x1        	CLRF	_pol_a, B
0001c0   d003     bra     0x0001c8         	BRA	_00327_DS_
                                           _00323_DS_:
                                           ;	.line	513; stepperCon.c	else pol_a = 1 ;
0001c2   0e01     movlw   0x01             	MOVLW	0x01
0001c4   010f     movlb   0xf              	BANKSEL	_pol_a
0001c6   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
                                           _00327_DS_:
0001c8   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	515; stepperCon.c	if (step_b == HALF_CYCLE || step_b == 0) pol_b = 2 ;
0001ca   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0001cc   0a20     xorlw   0x20             	XORLW	0x20
0001ce   e003     bz      0x0001d6         	BZ	_00332_DS_
                                           _00631_DS_:
0001d0   010f     movlb   0xf              	BANKSEL	_step_b
0001d2   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0001d4   e104     bnz     0x0001de         	BNZ	_00333_DS_
                                           _00332_DS_:
0001d6   0e02     movlw   0x02             	MOVLW	0x02
0001d8   010f     movlb   0xf              	BANKSEL	_pol_b
0001da   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
0001dc   d00a     bra     0x0001f2         	BRA	_00334_DS_
                                           _00333_DS_:
                                           ;	.line	516; stepperCon.c	else if (step_b > HALF_CYCLE) pol_b = 0 ;
0001de   0e21     movlw   0x21             	MOVLW	0x21
0001e0   010f     movlb   0xf              	BANKSEL	_step_b
0001e2   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0001e4   e303     bnc     0x0001ec         	BNC	_00330_DS_
0001e6   010f     movlb   0xf              	BANKSEL	_pol_b
0001e8   6b2e     clrf    0x2e, 0x1        	CLRF	_pol_b, B
0001ea   d003     bra     0x0001f2         	BRA	_00334_DS_
                                           _00330_DS_:
                                           ;	.line	517; stepperCon.c	else pol_b = 1 ;
0001ec   0e01     movlw   0x01             	MOVLW	0x01
0001ee   010f     movlb   0xf              	BANKSEL	_pol_b
0001f0   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
                                           _00334_DS_:
                                           ;	.line	519; stepperCon.c	CM1CON0 = 0x09 ;
0001f2   0e09     movlw   0x09             	MOVLW	0x09
0001f4   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           ;	.line	520; stepperCon.c	CM2CON0 = 0x08 ;
0001f6   0e08     movlw   0x08             	MOVLW	0x08
0001f8   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
0001fa   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	522; stepperCon.c	if (pol_a == 2) {
0001fc   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
0001fe   0a02     xorlw   0x02             	XORLW	0x02
000200   e103     bnz     0x000208         	BNZ	_00340_DS_
                                           ;	.line	523; stepperCon.c	LATCbits.LATC1 = 0 ;
000202   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	524; stepperCon.c	LATCbits.LATC0 = 0 ;
000204   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
000206   d00c     bra     0x000220         	BRA	_00341_DS_
                                           _00340_DS_:
000208   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	526; stepperCon.c	else if (pol_a) {               // Forward current, Phase-A
00020a   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
00020c   e005     bz      0x000218         	BZ	_00337_DS_
                                           ;	.line	527; stepperCon.c	LATCbits.LATC1 = 0 ;
00020e   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	528; stepperCon.c	LATCbits.LATC0 = 1 ;
000210   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
                                           ;	.line	529; stepperCon.c	CM1CON0 = 0x99 ; 
000212   0e99     movlw   0x99             	MOVLW	0x99
000214   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
000216   d004     bra     0x000220         	BRA	_00341_DS_
                                           _00337_DS_:
                                           ;	.line	532; stepperCon.c	LATCbits.LATC0 = 0 ;
000218   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	533; stepperCon.c	LATCbits.LATC1 = 1 ;
00021a   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
                                           ;	.line	534; stepperCon.c	CM1CON0 = 0x89 ; 
00021c   0e89     movlw   0x89             	MOVLW	0x89
00021e   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           _00341_DS_:
000220   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	537; stepperCon.c	if(pol_b == 2) {
000222   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000224   0a02     xorlw   0x02             	XORLW	0x02
000226   e103     bnz     0x00022e         	BNZ	_00346_DS_
                                           ;	.line	538; stepperCon.c	LATCbits.LATC2 = 0 ;
000228   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	539; stepperCon.c	LATDbits.LATD5 = 0 ;
00022a   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
00022c   d00c     bra     0x000246         	BRA	_00347_DS_
                                           _00346_DS_:
00022e   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	541; stepperCon.c	else if (pol_b) {               // Forward current, Phase-B
000230   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000232   e005     bz      0x00023e         	BZ	_00343_DS_
                                           ;	.line	542; stepperCon.c	LATCbits.LATC2 = 0 ;
000234   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	543; stepperCon.c	LATDbits.LATD5 = 1 ;
000236   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
                                           ;	.line	544; stepperCon.c	CM2CON0 = 0x98 ;
000238   0e98     movlw   0x98             	MOVLW	0x98
00023a   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
00023c   d004     bra     0x000246         	BRA	_00347_DS_
                                           _00343_DS_:
                                           ;	.line	547; stepperCon.c	LATDbits.LATD5 = 0 ;
00023e   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	548; stepperCon.c	LATCbits.LATC2 = 1 ;
000240   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
                                           ;	.line	549; stepperCon.c	CM2CON0 = 0x88 ;
000242   0e88     movlw   0x88             	MOVLW	0x88
000244   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
                                           _00347_DS_:
000246   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	553; stepperCon.c	CCP5CONbits.DC5B = 0x0c + (pwm_lu[step_a] & 0x3) << 4 ;
000248   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00024a   0d02     mullw   0x02             	MULLW	0x02
00024c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00024e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000250   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000252   f004
000254   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
000256   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000258   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
00025a   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00025c   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00025e   ffe9
000260   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000262   ffea
000264   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000266   f004
000268   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
00026a   f005
00026c   0e03     movlw   0x03             	MOVLW	0x03
00026e   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
000270   0e0c     movlw   0x0c             	MOVLW	0x0c
000272   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000274   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
000276   0bf0     andlw   0xf0             	ANDLW	0xf0
000278   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00027a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00027c   0b03     andlw   0x03             	ANDLW	0x03
00027e   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000280   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000282   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
000284   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
000286   0bcf     andlw   0xcf             	ANDLW	0xcf
000288   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00028a   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
00028c   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
00028e   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	554; stepperCon.c	CCPR5L = pwm_lu[step_a] >> 2 ;
000290   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
000292   0d02     mullw   0x02             	MULLW	0x02
000294   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000296   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000298   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
00029a   f004
00029c   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00029e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002a0   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0002a2   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0002a4   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0002a6   ffe9
0002a8   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0002aa   ffea
0002ac   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0002ae   f004
0002b0   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0002b2   f005
0002b4   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002b6   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0002b8   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0002ba   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002bc   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0002be   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0002c0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0002c2   010f     movlb   0xf              	BANKSEL	_CCPR5L
0002c4   6f55     movwf   0x55, 0x1        	MOVWF	_CCPR5L, B
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
0002c6   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	556; stepperCon.c	CCP4CONbits.DC4B = 0x0c + (pwm_lu[step_b] & 0x3) << 4 ;
0002c8   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0002ca   0d02     mullw   0x02             	MULLW	0x02
0002cc   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0002ce   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0002d0   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0002d2   f004
0002d4   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0002d6   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002d8   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0002da   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0002dc   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0002de   ffe9
0002e0   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0002e2   ffea
0002e4   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0002e6   f004
0002e8   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0002ea   f005
0002ec   0e03     movlw   0x03             	MOVLW	0x03
0002ee   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
0002f0   0e0c     movlw   0x0c             	MOVLW	0x0c
0002f2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002f4   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
0002f6   0bf0     andlw   0xf0             	ANDLW	0xf0
0002f8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0002fa   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0002fc   0b03     andlw   0x03             	ANDLW	0x03
0002fe   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000300   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000302   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000304   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
000306   0bcf     andlw   0xcf             	ANDLW	0xcf
000308   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00030a   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
00030c   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
00030e   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	557; stepperCon.c	CCPR4L = pwm_lu[step_b] >> 2 ;
000310   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000312   0d02     mullw   0x02             	MULLW	0x02
000314   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000316   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000318   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
00031a   f004
00031c   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00031e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000320   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000322   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000324   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000326   ffe9
000328   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
00032a   ffea
00032c   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00032e   f004
000330   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
000332   f005
000334   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000336   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
000338   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
00033a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00033c   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
00033e   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000340   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000342   010f     movlb   0xf              	BANKSEL	_CCPR4L
000344   6f58     movwf   0x58, 0x1        	MOVWF	_CCPR4L, B
                                           ;	.line	559; stepperCon.c	PORTAbits.RA4 = 1 ;
000346   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
                                           ;	.line	560; stepperCon.c	PORTAbits.RA5 = 1 ; 
000348   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
                                           ;	.line	562; stepperCon.c	state = NEXT_STEP ;
00034a   0e06     movlw   0x06             	MOVLW	0x06
00034c   010f     movlb   0xf              	BANKSEL	_state
00034e   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	563; stepperCon.c	break ;
000350   d69f     bra     0x000090         	BRA	_00437_DS_
                                           _00348_DS_:
                                           ;	.line	566; stepperCon.c	CM1CON0 = 0x09 ;
000352   0e09     movlw   0x09             	MOVLW	0x09
000354   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           ;	.line	567; stepperCon.c	CM2CON0 = 0x08 ;
000356   0e08     movlw   0x08             	MOVLW	0x08
000358   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           ;	.line	569; stepperCon.c	CCP5CONbits.DC5B = pwm_a_l ;             // Set PWM duty cycle, Phase-A
00035a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00035c   0b03     andlw   0x03             	ANDLW	0x03
00035e   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000360   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000362   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
000364   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
000366   0bcf     andlw   0xcf             	ANDLW	0xcf
000368   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00036a   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
00036c   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ;	.line	570; stepperCon.c	CCPR5L = pwm_a_h ;
00036e   c001     movff   0x001, 0xf55     	MOVFF	r0x01, _CCPR5L
000370   ff55
                                           ;	.line	572; stepperCon.c	CCP4CONbits.DC4B = pwm_b_l ;             // Set PWM duty cycle, Phase-B
000372   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000374   0b03     andlw   0x03             	ANDLW	0x03
000376   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000378   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00037a   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
00037c   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
00037e   0bcf     andlw   0xcf             	ANDLW	0xcf
000380   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000382   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000384   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	573; stepperCon.c	CCPR4L = pwm_b_h ;
000386   c003     movff   0x003, 0xf58     	MOVFF	r0x03, _CCPR4L
000388   ff58
                                           ;	.line	575; stepperCon.c	if (step_a > THREE_QUARTERS && step_a < (FULL_CYCLE - 1)) {
00038a   0e31     movlw   0x31             	MOVLW	0x31
00038c   010f     movlb   0xf              	BANKSEL	_step_a
00038e   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
000390   e309     bnc     0x0003a4         	BNC	_00356_DS_
000392   0e3f     movlw   0x3f             	MOVLW	0x3f
000394   010f     movlb   0xf              	BANKSEL	_step_a
000396   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
000398   e205     bc      0x0003a4         	BC	_00356_DS_
                                           ;	.line	576; stepperCon.c	a_decay = FAST_DECAY ;
00039a   0e01     movlw   0x01             	MOVLW	0x01
00039c   010f     movlb   0xf              	BANKSEL	_a_decay
00039e   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
                                           ;	.line	577; stepperCon.c	PORTAbits.RA4 = 1 ;
0003a0   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
0003a2   d012     bra     0x0003c8         	BRA	_00357_DS_
                                           _00356_DS_:
                                           ;	.line	579; stepperCon.c	else if (step_a >= HALF_CYCLE) a_decay = SLOW_DECAY ;
0003a4   0e20     movlw   0x20             	MOVLW	0x20
0003a6   010f     movlb   0xf              	BANKSEL	_step_a
0003a8   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
0003aa   e303     bnc     0x0003b2         	BNC	_00353_DS_
0003ac   010f     movlb   0xf              	BANKSEL	_a_decay
0003ae   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
0003b0   d00b     bra     0x0003c8         	BRA	_00357_DS_
                                           _00353_DS_:
                                           ;	.line	580; stepperCon.c	else if (step_a > STEPS) {
0003b2   0e11     movlw   0x11             	MOVLW	0x11
0003b4   010f     movlb   0xf              	BANKSEL	_step_a
0003b6   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
0003b8   e305     bnc     0x0003c4         	BNC	_00350_DS_
                                           ;	.line	581; stepperCon.c	a_decay = FAST_DECAY ;
0003ba   0e01     movlw   0x01             	MOVLW	0x01
0003bc   010f     movlb   0xf              	BANKSEL	_a_decay
0003be   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
                                           ;	.line	582; stepperCon.c	PORTAbits.RA4 = 1 ;
0003c0   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
0003c2   d002     bra     0x0003c8         	BRA	_00357_DS_
                                           _00350_DS_:
0003c4   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	584; stepperCon.c	else a_decay = SLOW_DECAY ;
0003c6   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
                                           _00357_DS_:
                                           ;	.line	586; stepperCon.c	if (step_b > THREE_QUARTERS && step_b < (FULL_CYCLE - 1)) {
0003c8   0e31     movlw   0x31             	MOVLW	0x31
0003ca   010f     movlb   0xf              	BANKSEL	_step_b
0003cc   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0003ce   e309     bnc     0x0003e2         	BNC	_00366_DS_
0003d0   0e3f     movlw   0x3f             	MOVLW	0x3f
0003d2   010f     movlb   0xf              	BANKSEL	_step_b
0003d4   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0003d6   e205     bc      0x0003e2         	BC	_00366_DS_
                                           ;	.line	587; stepperCon.c	b_decay = FAST_DECAY ;
0003d8   0e01     movlw   0x01             	MOVLW	0x01
0003da   010f     movlb   0xf              	BANKSEL	_b_decay
0003dc   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
                                           ;	.line	588; stepperCon.c	PORTAbits.RA5 = 1 ;
0003de   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
0003e0   d012     bra     0x000406         	BRA	_00367_DS_
                                           _00366_DS_:
                                           ;	.line	590; stepperCon.c	else if (step_b >= HALF_CYCLE) b_decay = SLOW_DECAY ;
0003e2   0e20     movlw   0x20             	MOVLW	0x20
0003e4   010f     movlb   0xf              	BANKSEL	_step_b
0003e6   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0003e8   e303     bnc     0x0003f0         	BNC	_00363_DS_
0003ea   010f     movlb   0xf              	BANKSEL	_b_decay
0003ec   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
0003ee   d00b     bra     0x000406         	BRA	_00367_DS_
                                           _00363_DS_:
                                           ;	.line	591; stepperCon.c	else if (step_b > STEPS) {
0003f0   0e11     movlw   0x11             	MOVLW	0x11
0003f2   010f     movlb   0xf              	BANKSEL	_step_b
0003f4   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0003f6   e305     bnc     0x000402         	BNC	_00360_DS_
                                           ;	.line	592; stepperCon.c	b_decay = FAST_DECAY ;
0003f8   0e01     movlw   0x01             	MOVLW	0x01
0003fa   010f     movlb   0xf              	BANKSEL	_b_decay
0003fc   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
                                           ;	.line	593; stepperCon.c	PORTAbits.RA5 = 1 ;
0003fe   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
000400   d002     bra     0x000406         	BRA	_00367_DS_
                                           _00360_DS_:
000402   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	595; stepperCon.c	else b_decay = SLOW_DECAY ;
000404   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
                                           _00367_DS_:
000406   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	597; stepperCon.c	if (pol_a == 2) {
000408   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
00040a   0a02     xorlw   0x02             	XORLW	0x02
00040c   e103     bnz     0x000414         	BNZ	_00373_DS_
                                           ;	.line	598; stepperCon.c	LATCbits.LATC1 = 0 ;
00040e   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	599; stepperCon.c	LATCbits.LATC0 = 0 ;
000410   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
000412   d00c     bra     0x00042c         	BRA	_00374_DS_
                                           _00373_DS_:
000414   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	601; stepperCon.c	else if (pol_a) {               // Forward current, Phase-A
000416   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
000418   e005     bz      0x000424         	BZ	_00370_DS_
                                           ;	.line	602; stepperCon.c	LATCbits.LATC1 = 0 ;
00041a   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	603; stepperCon.c	LATCbits.LATC0 = 1 ;
00041c   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
                                           ;	.line	604; stepperCon.c	CM1CON0 = 0x99 ; 
00041e   0e99     movlw   0x99             	MOVLW	0x99
000420   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
000422   d004     bra     0x00042c         	BRA	_00374_DS_
                                           _00370_DS_:
                                           ;	.line	607; stepperCon.c	LATCbits.LATC0 = 0 ;
000424   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	608; stepperCon.c	LATCbits.LATC1 = 1 ;
000426   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
                                           ;	.line	609; stepperCon.c	CM1CON0 = 0x89 ; 
000428   0e89     movlw   0x89             	MOVLW	0x89
00042a   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           _00374_DS_:
00042c   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	612; stepperCon.c	if(pol_b == 2) {
00042e   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000430   0a02     xorlw   0x02             	XORLW	0x02
000432   e103     bnz     0x00043a         	BNZ	_00379_DS_
                                           ;	.line	613; stepperCon.c	LATCbits.LATC2 = 0 ;
000434   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	614; stepperCon.c	LATDbits.LATD5 = 0 ;
000436   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
000438   d00c     bra     0x000452         	BRA	_00380_DS_
                                           _00379_DS_:
00043a   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	616; stepperCon.c	else if (pol_b) {               // Forward current, Phase-B
00043c   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
00043e   e005     bz      0x00044a         	BZ	_00376_DS_
                                           ;	.line	617; stepperCon.c	LATCbits.LATC2 = 0 ;
000440   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	618; stepperCon.c	LATDbits.LATD5 = 1 ;
000442   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
                                           ;	.line	619; stepperCon.c	CM2CON0 = 0x98 ;
000444   0e98     movlw   0x98             	MOVLW	0x98
000446   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
000448   d004     bra     0x000452         	BRA	_00380_DS_
                                           _00376_DS_:
                                           ;	.line	622; stepperCon.c	LATDbits.LATD5 = 0 ;
00044a   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	623; stepperCon.c	LATCbits.LATC2 = 1 ;
00044c   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
                                           ;	.line	624; stepperCon.c	CM2CON0 = 0x88 ;
00044e   0e88     movlw   0x88             	MOVLW	0x88
000450   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           _00380_DS_:
                                           ;	.line	627; stepperCon.c	state = NEXT_STEP ;
000452   0e06     movlw   0x06             	MOVLW	0x06
000454   010f     movlb   0xf              	BANKSEL	_state
000456   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	628; stepperCon.c	break ;
000458   ef48     goto    0x000090         	GOTO	_00437_DS_
00045a   f000
                                           _00381_DS_:
                                           ;	.line	631; stepperCon.c	state = RUNNING ;
00045c   0e02     movlw   0x02             	MOVLW	0x02
00045e   010f     movlb   0xf              	BANKSEL	_state
000460   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
000462   010f     movlb   0xf              	BANKSEL	_dir
                                           ;	.line	634; stepperCon.c	if (dir == 1) {
000464   5125     movf    0x25, 0x0, 0x1   	MOVF	_dir, W, B
000466   0a01     xorlw   0x01             	XORLW	0x01
000468   e113     bnz     0x000490         	BNZ	_00391_DS_
                                           ;	.line	635; stepperCon.c	if (step_a++ == FULL_CYCLE - 1) step_a = 0 ;
00046a   cf34     movff   0xf34, 0x004     	MOVFF	_step_a, r0x04
00046c   f004
00046e   010f     movlb   0xf              	BANKSEL	_step_a
000470   2b34     incf    0x34, 0x1, 0x1   	INCF	_step_a, F, B
000472   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000474   0a3f     xorlw   0x3f             	XORLW	0x3f
000476   e102     bnz     0x00047c         	BNZ	_00383_DS_
                                           _00654_DS_:
000478   010f     movlb   0xf              	BANKSEL	_step_a
00047a   6b34     clrf    0x34, 0x1        	CLRF	_step_a, B
                                           _00383_DS_:
                                           ;	.line	636; stepperCon.c	if (step_b++ == FULL_CYCLE - 1) step_b = 0 ;
00047c   cf35     movff   0xf35, 0x004     	MOVFF	_step_b, r0x04
00047e   f004
000480   010f     movlb   0xf              	BANKSEL	_step_b
000482   2b35     incf    0x35, 0x1, 0x1   	INCF	_step_b, F, B
000484   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000486   0a3f     xorlw   0x3f             	XORLW	0x3f
000488   e115     bnz     0x0004b4         	BNZ	_00392_DS_
                                           _00656_DS_:
00048a   010f     movlb   0xf              	BANKSEL	_step_b
00048c   6b35     clrf    0x35, 0x1        	CLRF	_step_b, B
00048e   d012     bra     0x0004b4         	BRA	_00392_DS_
                                           _00391_DS_:
                                           ;	.line	640; stepperCon.c	if (step_a-- == 0) step_a = FULL_CYCLE - 1 ;
000490   cf34     movff   0xf34, 0x004     	MOVFF	_step_a, r0x04
000492   f004
000494   010f     movlb   0xf              	BANKSEL	_step_a
000496   0734     decf    0x34, 0x1, 0x1   	DECF	_step_a, F, B
000498   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00049a   e103     bnz     0x0004a2         	BNZ	_00387_DS_
00049c   0e3f     movlw   0x3f             	MOVLW	0x3f
00049e   010f     movlb   0xf              	BANKSEL	_step_a
0004a0   6f34     movwf   0x34, 0x1        	MOVWF	_step_a, B
                                           _00387_DS_:
                                           ;	.line	641; stepperCon.c	if (step_b-- == 0) step_b = FULL_CYCLE - 1 ;
0004a2   cf35     movff   0xf35, 0x004     	MOVFF	_step_b, r0x04
0004a4   f004
0004a6   010f     movlb   0xf              	BANKSEL	_step_b
0004a8   0735     decf    0x35, 0x1, 0x1   	DECF	_step_b, F, B
0004aa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004ac   e103     bnz     0x0004b4         	BNZ	_00392_DS_
0004ae   0e3f     movlw   0x3f             	MOVLW	0x3f
0004b0   010f     movlb   0xf              	BANKSEL	_step_b
0004b2   6f35     movwf   0x35, 0x1        	MOVWF	_step_b, B
                                           _00392_DS_:
0004b4   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	645; stepperCon.c	if (step_a == HALF_CYCLE || step_a == 0 || pwm_lu[step_a] == zero_cross) pol_a = 2 ;
0004b6   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0004b8   0a20     xorlw   0x20             	XORLW	0x20
0004ba   e01f     bz      0x0004fa         	BZ	_00396_DS_
                                           _00658_DS_:
0004bc   010f     movlb   0xf              	BANKSEL	_step_a
0004be   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0004c0   e01c     bz      0x0004fa         	BZ	_00396_DS_
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
0004c2   010f     movlb   0xf              	BANKSEL	_step_a
0004c4   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0004c6   0d02     mullw   0x02             	MULLW	0x02
0004c8   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0004ca   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0004cc   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0004ce   f004
0004d0   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0004d2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0004d4   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0004d6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0004d8   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0004da   ffe9
0004dc   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0004de   ffea
0004e0   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0004e2   f004
0004e4   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0004e6   f005
0004e8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004ea   0100     movlb   0x0              	BANKSEL	_zero_cross
0004ec   19fe     xorwf   0xfe, 0x0, 0x1   	XORWF	_zero_cross, W, B
0004ee   e104     bnz     0x0004f8         	BNZ	_00659_DS_
0004f0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0004f2   0100     movlb   0x0              	BANKSEL	(_zero_cross + 1)
0004f4   19ff     xorwf   0xff, 0x0, 0x1   	XORWF	(_zero_cross + 1), W, B
0004f6   e001     bz      0x0004fa         	BZ	_00396_DS_
                                           _00659_DS_:
0004f8   d004     bra     0x000502         	BRA	_00397_DS_
                                           _00396_DS_:
0004fa   0e02     movlw   0x02             	MOVLW	0x02
0004fc   010f     movlb   0xf              	BANKSEL	_pol_a
0004fe   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
000500   d00e     bra     0x00051e         	BRA	_00398_DS_
                                           _00397_DS_:
000502   0100     movlb   0x0              	BANKSEL	(_zero_cross + 1)
                                           ;	.line	646; stepperCon.c	else if (pwm_lu[step_a] < zero_cross) pol_a = 0 ;
000504   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_zero_cross + 1), W, B
000506   5c05     subwf   0x05, 0x0, 0x0   	SUBWF	r0x05, W
000508   e103     bnz     0x000510         	BNZ	_00661_DS_
00050a   0100     movlb   0x0              	BANKSEL	_zero_cross
00050c   51fe     movf    0xfe, 0x0, 0x1   	MOVF	_zero_cross, W, B
00050e   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00661_DS_:
000510   e203     bc      0x000518         	BC	_00394_DS_
000512   010f     movlb   0xf              	BANKSEL	_pol_a
000514   6b2c     clrf    0x2c, 0x1        	CLRF	_pol_a, B
000516   d003     bra     0x00051e         	BRA	_00398_DS_
                                           _00394_DS_:
                                           ;	.line	647; stepperCon.c	else pol_a = 1 ;
000518   0e01     movlw   0x01             	MOVLW	0x01
00051a   010f     movlb   0xf              	BANKSEL	_pol_a
00051c   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
                                           _00398_DS_:
00051e   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	649; stepperCon.c	if (step_b == HALF_CYCLE || step_b == 0 || pwm_lu[step_b] == zero_cross) pol_b = 2 ;
000520   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000522   0a20     xorlw   0x20             	XORLW	0x20
000524   e01f     bz      0x000564         	BZ	_00404_DS_
                                           _00663_DS_:
000526   010f     movlb   0xf              	BANKSEL	_step_b
000528   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
00052a   e01c     bz      0x000564         	BZ	_00404_DS_
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
00052c   010f     movlb   0xf              	BANKSEL	_step_b
00052e   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000530   0d02     mullw   0x02             	MULLW	0x02
000532   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000534   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000536   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000538   f004
00053a   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00053c   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00053e   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000540   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000542   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000544   ffe9
000546   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000548   ffea
00054a   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00054c   f004
00054e   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
000550   f005
000552   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000554   0100     movlb   0x0              	BANKSEL	_zero_cross
000556   19fe     xorwf   0xfe, 0x0, 0x1   	XORWF	_zero_cross, W, B
000558   e104     bnz     0x000562         	BNZ	_00664_DS_
00055a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00055c   0100     movlb   0x0              	BANKSEL	(_zero_cross + 1)
00055e   19ff     xorwf   0xff, 0x0, 0x1   	XORWF	(_zero_cross + 1), W, B
000560   e001     bz      0x000564         	BZ	_00404_DS_
                                           _00664_DS_:
000562   d004     bra     0x00056c         	BRA	_00405_DS_
                                           _00404_DS_:
000564   0e02     movlw   0x02             	MOVLW	0x02
000566   010f     movlb   0xf              	BANKSEL	_pol_b
000568   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
00056a   d00e     bra     0x000588         	BRA	_00406_DS_
                                           _00405_DS_:
00056c   0100     movlb   0x0              	BANKSEL	(_zero_cross + 1)
                                           ;	.line	650; stepperCon.c	else if (pwm_lu[step_b] < zero_cross) pol_b = 0 ;
00056e   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_zero_cross + 1), W, B
000570   5c05     subwf   0x05, 0x0, 0x0   	SUBWF	r0x05, W
000572   e103     bnz     0x00057a         	BNZ	_00666_DS_
000574   0100     movlb   0x0              	BANKSEL	_zero_cross
000576   51fe     movf    0xfe, 0x0, 0x1   	MOVF	_zero_cross, W, B
000578   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00666_DS_:
00057a   e203     bc      0x000582         	BC	_00402_DS_
00057c   010f     movlb   0xf              	BANKSEL	_pol_b
00057e   6b2e     clrf    0x2e, 0x1        	CLRF	_pol_b, B
000580   d003     bra     0x000588         	BRA	_00406_DS_
                                           _00402_DS_:
                                           ;	.line	651; stepperCon.c	else pol_b = 1 ;
000582   0e01     movlw   0x01             	MOVLW	0x01
000584   010f     movlb   0xf              	BANKSEL	_pol_b
000586   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
                                           _00406_DS_:
000588   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	654; stepperCon.c	pwm_a_l = 0x0c + (pwm_lu[step_a] & 0x3) << 4 ;
00058a   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00058c   0d02     mullw   0x02             	MULLW	0x02
00058e   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000590   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000592   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000594   f004
000596   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
000598   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00059a   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
00059c   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00059e   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0005a0   ffe9
0005a2   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0005a4   ffea
0005a6   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0005a8   f004
0005aa   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0005ac   f005
0005ae   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005b0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0005b2   0e03     movlw   0x03             	MOVLW	0x03
0005b4   1606     andwf   0x06, 0x1, 0x0   	ANDWF	r0x06, F
0005b6   0e0c     movlw   0x0c             	MOVLW	0x0c
0005b8   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
0005ba   3806     swapf   0x06, 0x0, 0x0   	SWAPF	r0x06, W
0005bc   0bf0     andlw   0xf0             	ANDLW	0xf0
0005be   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	655; stepperCon.c	pwm_a_h = pwm_lu[step_a] >> 2 ;
0005c0   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0005c2   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0005c4   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0005c6   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0005c8   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0005ca   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0005cc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005ce   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
0005d0   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	657; stepperCon.c	pwm_b_l = 0x0c + (pwm_lu[step_b] & 0x3) << 4 ;
0005d2   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0005d4   0d02     mullw   0x02             	MULLW	0x02
0005d6   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0005d8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0005da   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0005dc   f004
0005de   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0005e0   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0005e2   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0005e4   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0005e6   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0005e8   ffe9
0005ea   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0005ec   ffea
0005ee   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0005f0   f004
0005f2   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0005f4   f005
0005f6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005f8   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0005fa   0e03     movlw   0x03             	MOVLW	0x03
0005fc   1606     andwf   0x06, 0x1, 0x0   	ANDWF	r0x06, F
0005fe   0e0c     movlw   0x0c             	MOVLW	0x0c
000600   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
000602   3806     swapf   0x06, 0x0, 0x0   	SWAPF	r0x06, W
000604   0bf0     andlw   0xf0             	ANDLW	0xf0
000606   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           ;	.line	658; stepperCon.c	pwm_b_h = pwm_lu[step_b] >> 2 ;
000608   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00060a   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
00060c   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
00060e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000610   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
000612   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000614   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000616   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           ;	.line	660; stepperCon.c	break ;
000618   ef48     goto    0x000090         	GOTO	_00437_DS_
00061a   f000
                                           _00409_DS_:
                                           ;	.line	663; stepperCon.c	if(CM1CON0bits.C1OUT && a_state == T_DRIVE) {
00061c   ac79     btfss   0x79, 0x6, 0x0   	BTFSS	_CM1CON0bits, 6
00061e   d016     bra     0x00064c         	BRA	_00417_DS_
000620   010f     movlb   0xf              	BANKSEL	_a_state
000622   5128     movf    0x28, 0x0, 0x1   	MOVF	_a_state, W, B
000624   0a02     xorlw   0x02             	XORLW	0x02
000626   e112     bnz     0x00064c         	BNZ	_00417_DS_
                                           _00670_DS_:
000628   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	664; stepperCon.c	if (a_decay == FAST_DECAY) {            
00062a   512b     movf    0x2b, 0x0, 0x1   	MOVF	_a_decay, W, B
00062c   0a01     xorlw   0x01             	XORLW	0x01
00062e   e109     bnz     0x000642         	BNZ	_00414_DS_
                                           _00672_DS_:
000630   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	665; stepperCon.c	if (pol_a) {                    // Forward current, Phase-A
000632   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
000634   e003     bz      0x00063c         	BZ	_00411_DS_
                                           ;	.line	666; stepperCon.c	LATCbits.LATC0 = 0 ;
000636   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	667; stepperCon.c	LATCbits.LATC1 = 1 ;  
000638   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
00063a   d004     bra     0x000644         	BRA	_00415_DS_
                                           _00411_DS_:
                                           ;	.line	670; stepperCon.c	LATCbits.LATC1 = 0 ;
00063c   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	671; stepperCon.c	LATCbits.LATC0 = 1 ;
00063e   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
000640   d001     bra     0x000644         	BRA	_00415_DS_
                                           _00414_DS_:
                                           ;	.line	674; stepperCon.c	else PORTAbits.RA4 = 0 ;
000642   9880     bcf     0x80, 0x4, 0x0   	BCF	_PORTAbits, 4
                                           _00415_DS_:
                                           ;	.line	676; stepperCon.c	a_state = PH_OFF ;
000644   0e01     movlw   0x01             	MOVLW	0x01
000646   010f     movlb   0xf              	BANKSEL	_a_state
000648   6f28     movwf   0x28, 0x1        	MOVWF	_a_state, B
                                           ;	.line	677; stepperCon.c	T1CONbits.TMR1ON = 1 ;
00064a   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00417_DS_:
                                           ;	.line	680; stepperCon.c	if(CM2CON0bits.C2OUT && b_state == T_DRIVE) {
00064c   ac78     btfss   0x78, 0x6, 0x0   	BTFSS	_CM2CON0bits, 6
00064e   d016     bra     0x00067c         	BRA	_00426_DS_
000650   010f     movlb   0xf              	BANKSEL	_b_state
000652   512a     movf    0x2a, 0x0, 0x1   	MOVF	_b_state, W, B
000654   0a02     xorlw   0x02             	XORLW	0x02
000656   e112     bnz     0x00067c         	BNZ	_00426_DS_
                                           _00674_DS_:
000658   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	681; stepperCon.c	if (b_decay == FAST_DECAY) {
00065a   512d     movf    0x2d, 0x0, 0x1   	MOVF	_b_decay, W, B
00065c   0a01     xorlw   0x01             	XORLW	0x01
00065e   e109     bnz     0x000672         	BNZ	_00423_DS_
                                           _00676_DS_:
000660   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	682; stepperCon.c	if (pol_b) {                    // Forward current, Phase-B
000662   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000664   e003     bz      0x00066c         	BZ	_00420_DS_
                                           ;	.line	683; stepperCon.c	LATDbits.LATD5 = 0 ;
000666   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	684; stepperCon.c	LATCbits.LATC2 = 1 ;
000668   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
00066a   d004     bra     0x000674         	BRA	_00424_DS_
                                           _00420_DS_:
                                           ;	.line	687; stepperCon.c	LATCbits.LATC2 = 0 ;
00066c   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	688; stepperCon.c	LATDbits.LATD5 = 1 ;
00066e   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
000670   d001     bra     0x000674         	BRA	_00424_DS_
                                           _00423_DS_:
                                           ;	.line	691; stepperCon.c	else PORTAbits.RA5 = 0 ;
000672   9a80     bcf     0x80, 0x5, 0x0   	BCF	_PORTAbits, 5
                                           _00424_DS_:
                                           ;	.line	693; stepperCon.c	b_state = PH_OFF ;
000674   0e01     movlw   0x01             	MOVLW	0x01
000676   010f     movlb   0xf              	BANKSEL	_b_state
000678   6f2a     movwf   0x2a, 0x1        	MOVWF	_b_state, B
                                           ;	.line	694; stepperCon.c	T3CONbits.TMR3ON = 1 ;
00067a   80b1     bsf     0xb1, 0x0, 0x0   	BSF	_T3CONbits, 0
                                           _00426_DS_:
                                           ;	.line	698; stepperCon.c	if (!PORTBbits.RB3) {
00067c   b681     btfsc   0x81, 0x3, 0x0   	BTFSC	_PORTBbits, 3
00067e   ef48     goto    0x000090         	GOTO	_00437_DS_
000680   f000
                                           ;	.line	699; stepperCon.c	INTCONbits.GIE = 0 ;
000682   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	700; stepperCon.c	idleInts() ;
000684   ec57     call    0x0022ae, 0x0    	CALL	_idleInts
000686   f011
                                           ;	.line	702; stepperCon.c	CM1CON0bits.C1ON = 0 ;
000688   9e79     bcf     0x79, 0x7, 0x0   	BCF	_CM1CON0bits, 7
                                           ;	.line	703; stepperCon.c	CM2CON0bits.C2ON = 0 ;
00068a   9e78     bcf     0x78, 0x7, 0x0   	BCF	_CM2CON0bits, 7
                                           ;	.line	705; stepperCon.c	CM1CON0bits.C1ON = 0 ; 
00068c   9e79     bcf     0x79, 0x7, 0x0   	BCF	_CM1CON0bits, 7
                                           ;	.line	706; stepperCon.c	CM2CON0bits.C2OE = 0 ;
00068e   9a78     bcf     0x78, 0x5, 0x0   	BCF	_CM2CON0bits, 5
                                           ;	.line	708; stepperCon.c	LATAbits.LATA4 = 0 ;    // Shut phases down
000690   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	709; stepperCon.c	LATAbits.LATA5 = 0 ; 
000692   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
                                           ;	.line	711; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
000694   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
000696   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	712; stepperCon.c	state = IDLE ;
000698   6b24     clrf    0x24, 0x1        	CLRF	_state, B
                                           ;	.line	713; stepperCon.c	INTCONbits.GIE = 1 ;
00069a   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	715; stepperCon.c	break ;
00069c   ef48     goto    0x000090         	GOTO	_00437_DS_
00069e   f000
                                           _00430_DS_:
                                           ;	.line	719; stepperCon.c	if (PORTBbits.RB3) state = START ;
0006a0   a681     btfss   0x81, 0x3, 0x0   	BTFSS	_PORTBbits, 3
0006a2   d003     bra     0x0006aa         	BRA	_00432_DS_
0006a4   0e01     movlw   0x01             	MOVLW	0x01
0006a6   010f     movlb   0xf              	BANKSEL	_state
0006a8   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           _00432_DS_:
0006aa   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	722; stepperCon.c	if (i2c_dirty) {
0006ac   5131     movf    0x31, 0x0, 0x1   	MOVF	_i2c_dirty, W, B
0006ae   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
0006b0   ef48     goto    0x000090         	GOTO	_00437_DS_
0006b2   f000
                                           ;	.line	723; stepperCon.c	store_regs(i2c_regs, sizeof(i2c_regs)) ;
0006b4   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
0006b6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0006b8   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
0006ba   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0006bc   0e80     movlw   0x80             	MOVLW	0x80
0006be   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0006c0   0e09     movlw   0x09             	MOVLW	0x09
0006c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006c4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0006c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006c8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0006ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006cc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0006ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006d0   ec6a     call    0x001ad4, 0x0    	CALL	_store_regs
0006d2   f00d
0006d4   0e04     movlw   0x04             	MOVLW	0x04
0006d6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0006d8   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	724; stepperCon.c	i2c_dirty = 0 ;
0006da   6b31     clrf    0x31, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	725; stepperCon.c	set_op_vars() ; 
0006dc   ec26     call    0x001c4c, 0x0    	CALL	_set_op_vars
0006de   f00e
                                           ;	.line	729; stepperCon.c	}
0006e0   ef48     goto    0x000090         	GOTO	_00437_DS_
0006e2   f000
0006e4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__delay_ms	code
                                           _delay_ms:
                                           ;	.line	406; stepperCon.c	void delay_ms(uint16_t time) {
00202e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002030   ffe5
002032   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002034   ffd9
002036   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002038   ffe5
00203a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00203c   ffe5
00203e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002040   ffe5
002042   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002044   ffe5
002046   0e02     movlw   0x02             	MOVLW	0x02
002048   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00204a   f000
00204c   0e03     movlw   0x03             	MOVLW	0x03
00204e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002050   f001
                                           ;	.line	409; stepperCon.c	T0CON = 0x02 ;
002052   0e02     movlw   0x02             	MOVLW	0x02
002054   6ed5     movwf   0xd5, 0x0        	MOVWF	_T0CON
                                           _00290_DS_:
                                           ;	.line	411; stepperCon.c	while(--i) {
002056   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002058   0fff     addlw   0xff             	ADDLW	0xff
00205a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00205c   0eff     movlw   0xff             	MOVLW	0xff
00205e   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002060   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002062   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
002064   f000
002066   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
002068   f001
00206a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00206c   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
00206e   e00a     bz      0x002084         	BZ	_00292_DS_
                                           ;	.line	412; stepperCon.c	T0CONbits.TMR0ON = 0 ;
002070   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	413; stepperCon.c	INTCONbits.TMR0IF = 0 ;
002072   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	414; stepperCon.c	TMR0H = TMR_1MS >> 8 ;
002074   0ef8     movlw   0xf8             	MOVLW	0xf8
002076   6ed7     movwf   0xd7, 0x0        	MOVWF	_TMR0H
                                           ;	.line	415; stepperCon.c	TMR0L = TMR_1MS ;
002078   0e30     movlw   0x30             	MOVLW	0x30
00207a   6ed6     movwf   0xd6, 0x0        	MOVWF	_TMR0L
                                           ;	.line	416; stepperCon.c	T0CONbits.TMR0ON = 1 ;
00207c   8ed5     bsf     0xd5, 0x7, 0x0   	BSF	_T0CONbits, 7
                                           _00287_DS_:
                                           ;	.line	418; stepperCon.c	while(!INTCONbits.TMR0IF) ;
00207e   b4f2     btfsc   0xf2, 0x2, 0x0   	BTFSC	_INTCONbits, 2
002080   d7ea     bra     0x002056         	BRA	_00290_DS_
002082   d7fd     bra     0x00207e         	BRA	_00287_DS_
                                           _00292_DS_:
                                           ;	.line	421; stepperCon.c	T0CONbits.TMR0ON = 0 ;
002084   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	422; stepperCon.c	INTCONbits.TMR0IF = 0 ;
002086   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
002088   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00208a   f003
00208c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00208e   f002
002090   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002092   f001
002094   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002096   f000
002098   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00209a   ffd9
00209c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__set_op_vars	code
                                           _set_op_vars:
                                           ;	.line	394; stepperCon.c	void set_op_vars(void) {
001c4c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001c4e   ffe5
001c50   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c52   ffd9
001c54   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001c56   ffe5
001c58   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001c5a   ffe5
001c5c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001c5e   ffe5
001c60   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001c62   ffe5
                                           ;	.line	395; stepperCon.c	i2c_address = i2c_regs[0x00] ;
001c64   c0e1     movff   0x0e1, 0xf32     	MOVFF	_i2c_regs, _i2c_address
001c66   ff32
                                           ;	.line	396; stepperCon.c	skip        = i2c_regs[0x01] ;
001c68   c0e2     movff   0x0e2, 0xf33     	MOVFF	(_i2c_regs + 1), _skip
001c6a   ff33
                                           ;	.line	397; stepperCon.c	set_amp     = i2c_regs[0x02] ;
001c6c   c0e3     movff   0x0e3, 0xf20     	MOVFF	(_i2c_regs + 2), _set_amp
001c6e   ff20
001c70   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
001c72   6b21     clrf    0x21, 0x1        	CLRF	(_set_amp + 1), B
                                           ;	.line	398; stepperCon.c	set_amp    += i2c_regs[0x03] << 8 ;
001c74   c0e4     movff   0x0e4, 0x000     	MOVFF	(_i2c_regs + 3), r0x00
001c76   f000
001c78   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c7a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c7c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001c7e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001c80   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001c82   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c84   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001c86   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c88   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c8a   010f     movlb   0xf              	BANKSEL	_set_amp
001c8c   2720     addwf   0x20, 0x1, 0x1   	ADDWF	_set_amp, F, B
001c8e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c90   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
001c92   2321     addwfc  0x21, 0x1, 0x1   	ADDWFC	(_set_amp + 1), F, B
                                           ;	.line	399; stepperCon.c	max_amp     = i2c_regs[0x04] ;
001c94   c0e5     movff   0x0e5, 0xf22     	MOVFF	(_i2c_regs + 4), _max_amp
001c96   ff22
001c98   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001c9a   6b23     clrf    0x23, 0x1        	CLRF	(_max_amp + 1), B
                                           ;	.line	400; stepperCon.c	max_amp    += i2c_regs[0x05] << 8 ;
001c9c   c0e6     movff   0x0e6, 0x000     	MOVFF	(_i2c_regs + 5), r0x00
001c9e   f000
001ca0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001ca2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001ca4   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001ca6   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001ca8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001caa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001cac   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001cae   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001cb0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001cb2   010f     movlb   0xf              	BANKSEL	_max_amp
001cb4   2722     addwf   0x22, 0x1, 0x1   	ADDWF	_max_amp, F, B
001cb6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001cb8   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001cba   2323     addwfc  0x23, 0x1, 0x1   	ADDWFC	(_max_amp + 1), F, B
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 6) and store in _t_off
001cbc   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 6)
                                           ;	.line	401; stepperCon.c	t_off       = i2c_regs[0x06] * 2 * TMR_500NS ;
001cbe   51e7     movf    0xe7, 0x0, 0x1   	MOVF	(_i2c_regs + 6), W, B
001cc0   0d02     mullw   0x02             	MULLW	0x02
001cc2   cff3     movff   0xff3, 0xf29     	MOVFF	PRODL, _t_off
001cc4   ff29
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 7) and store in _t_blank_low
001cc6   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 7)
                                           ;	.line	402; stepperCon.c	t_blank_low = i2c_regs[0x07] * 2 * TMR_500NS ;
001cc8   51e8     movf    0xe8, 0x0, 0x1   	MOVF	(_i2c_regs + 7), W, B
001cca   0d02     mullw   0x02             	MULLW	0x02
001ccc   cff3     movff   0xff3, 0xf27     	MOVFF	PRODL, _t_blank_low
001cce   ff27
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 8) and store in _t_blank_high
001cd0   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 8)
                                           ;	.line	403; stepperCon.c	t_blank_high= i2c_regs[0x08] * 2 * TMR_500NS ;
001cd2   51e9     movf    0xe9, 0x0, 0x1   	MOVF	(_i2c_regs + 8), W, B
001cd4   0d02     mullw   0x02             	MULLW	0x02
001cd6   cff3     movff   0xff3, 0xf26     	MOVFF	PRODL, _t_blank_high
001cd8   ff26
001cda   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001cdc   f003
001cde   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001ce0   f002
001ce2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001ce4   f001
001ce6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001ce8   f000
001cea   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001cec   ffd9
001cee   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__prep_pwm_lu	code
                                           _prep_pwm_lu:
                                           ;	.line	379; stepperCon.c	void prep_pwm_lu(void) {
00132e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001330   ffe5
001332   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001334   ffd9
001336   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001338   ffe5
00133a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00133c   ffe5
00133e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001340   ffe5
001342   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001344   ffe5
001346   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001348   ffe5
00134a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00134c   ffe5
00134e   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001350   ffe5
001352   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001354   ffe5
001356   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001358   ffe5
00135a   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
00135c   ffe5
00135e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
001360   ffe5
001362   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
                                           ;	.line	383; stepperCon.c	ratio = (float)set_amp / (float)max_amp ;
001364   5121     movf    0x21, 0x0, 0x1   	MOVF	(_set_amp + 1), W, B
001366   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001368   010f     movlb   0xf              	BANKSEL	_set_amp
00136a   5120     movf    0x20, 0x0, 0x1   	MOVF	_set_amp, W, B
00136c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00136e   ec4f     call    0x00209e, 0x0    	CALL	___uint2fs
001370   f010
001372   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001374   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001376   f001
001378   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00137a   f002
00137c   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00137e   f003
001380   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001382   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001384   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001386   5123     movf    0x23, 0x0, 0x1   	MOVF	(_max_amp + 1), W, B
001388   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00138a   010f     movlb   0xf              	BANKSEL	_max_amp
00138c   5122     movf    0x22, 0x0, 0x1   	MOVF	_max_amp, W, B
00138e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001390   ec4f     call    0x00209e, 0x0    	CALL	___uint2fs
001392   f010
001394   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001396   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001398   f005
00139a   cff4     movff   0xff4, 0x006     	MOVFF	PRODH, r0x06
00139c   f006
00139e   cfe9     movff   0xfe9, 0x007     	MOVFF	FSR0L, r0x07
0013a0   f007
0013a2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0013a4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0013a6   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0013a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013aa   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0013ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013ae   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0013b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013b2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0013b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013b6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0013b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013ba   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0013bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013be   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0013c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013c2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0013c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013c6   ece1     call    0x000dc2, 0x0    	CALL	___fsdiv
0013c8   f006
0013ca   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0013cc   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0013ce   f001
0013d0   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0013d2   f002
0013d4   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0013d6   f003
0013d8   0e08     movlw   0x08             	MOVLW	0x08
0013da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	386; stepperCon.c	zero_cross = __fs2uint(bias) ;
0013dc   0e43     movlw   0x43             	MOVLW	0x43
0013de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013e0   0eff     movlw   0xff             	MOVLW	0xff
0013e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013e4   0ec0     movlw   0xc0             	MOVLW	0xc0
0013e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013e8   0e00     movlw   0x00             	MOVLW	0x00
0013ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013ec   ec1a     call    0x001e34, 0x0    	CALL	___fs2uint
0013ee   f00f
0013f0   0100     movlb   0x0              	BANKSEL	_zero_cross
0013f2   6ffe     movwf   0xfe, 0x1        	MOVWF	_zero_cross, B
0013f4   cff3     movff   0xff3, 0x0ff     	MOVFF	PRODL, (_zero_cross + 1)
0013f6   f0ff
0013f8   0e04     movlw   0x04             	MOVLW	0x04
0013fa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	388; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0013fc   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           ; ;multiply lit val:0x02 by variable r0x04 and store in r0x05
                                           _00269_DS_:
                                           ;	.line	389; stepperCon.c	set = (float)pwm_base[i] * ratio + bias ;
0013fe   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001400   0d02     mullw   0x02             	MULLW	0x02
001402   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001404   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001406   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001408   f005
00140a   0e60     movlw   0x60             	MOVLW	LOW(_pwm_base)
00140c   2405     addwf   0x05, 0x0, 0x0   	ADDWF	r0x05, W
00140e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001410   0e00     movlw   0x00             	MOVLW	HIGH(_pwm_base)
001412   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001414   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001416   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001418   ffe9
00141a   c008     movff   0x008, 0xfea     	MOVFF	r0x08, FSR0H
00141c   ffea
00141e   cfee     movff   0xfee, 0x007     	MOVFF	POSTINC0, r0x07
001420   f007
001422   cfef     movff   0xfef, 0x008     	MOVFF	INDF0, r0x08
001424   f008
001426   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001428   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00142a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00142c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00142e   eca3     call    0x001f46, 0x0    	CALL	___sint2fs
001430   f00f
001432   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001434   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
001436   f008
001438   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
00143a   f009
00143c   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
00143e   f00a
001440   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001442   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001444   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001446   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001448   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00144a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00144c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00144e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001450   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001452   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001454   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
001456   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001458   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00145a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00145c   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00145e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001460   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001462   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001464   ec73     call    0x0006e6, 0x0    	CALL	___fsmul
001466   f003
001468   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00146a   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
00146c   f008
00146e   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
001470   f009
001472   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
001474   f00a
001476   0e08     movlw   0x08             	MOVLW	0x08
001478   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00147a   0e43     movlw   0x43             	MOVLW	0x43
00147c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00147e   0eff     movlw   0xff             	MOVLW	0xff
001480   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001482   0ec0     movlw   0xc0             	MOVLW	0xc0
001484   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001486   0e00     movlw   0x00             	MOVLW	0x00
001488   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00148a   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00148c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00148e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001490   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001492   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001494   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001496   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001498   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00149a   ec2f     call    0x000a5e, 0x0    	CALL	___fsadd
00149c   f005
00149e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0014a0   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
0014a2   f008
0014a4   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
0014a6   f009
0014a8   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
0014aa   f00a
0014ac   0e08     movlw   0x08             	MOVLW	0x08
0014ae   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	390; stepperCon.c	pwm_lu[i] = __fs2uint(set) ;
0014b0   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0014b2   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
0014b4   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0014b6   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0014b8   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0014ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014bc   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0014be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014c0   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0014c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014c4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0014c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014c8   ec1a     call    0x001e34, 0x0    	CALL	___fs2uint
0014ca   f00f
0014cc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0014ce   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
0014d0   f008
0014d2   0e04     movlw   0x04             	MOVLW	0x04
0014d4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0014d6   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0014d8   ffe9
0014da   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
0014dc   ffea
0014de   c007     movff   0x007, 0xfee     	MOVFF	r0x07, POSTINC0
0014e0   ffee
0014e2   c008     movff   0x008, 0xfef     	MOVFF	r0x08, INDF0
0014e4   ffef
                                           ;	.line	388; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0014e6   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0014e8   0e40     movlw   0x40             	MOVLW	0x40
0014ea   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
0014ec   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0014ee   d787     bra     0x0013fe         	BRA	_00269_DS_
0014f0   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
0014f2   f00a
0014f4   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
0014f6   f009
0014f8   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
0014fa   f008
0014fc   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0014fe   f007
001500   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001502   f006
001504   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001506   f005
001508   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00150a   f004
00150c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00150e   f003
001510   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001512   f002
001514   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001516   f001
001518   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00151a   f000
00151c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00151e   ffd9
001520   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__idleInts	code
                                           _idleInts:
                                           ;	.line	360; stepperCon.c	void idleInts(void) {
0022ae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0022b0   ffe5
0022b2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0022b4   ffd9
                                           ;	.line	361; stepperCon.c	INTCONbits.INT0IE = 0 ;     // Disable 'step' interrupt
0022b6   98f2     bcf     0xf2, 0x4, 0x0   	BCF	_INTCONbits, 4
                                           ;	.line	362; stepperCon.c	INTCON3bits.INT2IE = 0 ;    // Disable 'dir' interrupt
0022b8   98f0     bcf     0xf0, 0x4, 0x0   	BCF	_INTCON3bits, 4
                                           ;	.line	364; stepperCon.c	PIE2bits.C1IE = 0 ;         // Disable Comparator C1 Interrupt
0022ba   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           ;	.line	365; stepperCon.c	PIE2bits.C2IE = 0 ;         // Disable Comparator C2 Interrupt
0022bc   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           ;	.line	367; stepperCon.c	PIE1bits.CCP1IE = 0 ;       // Disable CCP1 interrupt
0022be   949d     bcf     0x9d, 0x2, 0x0   	BCF	_PIE1bits, 2
                                           ;	.line	368; stepperCon.c	PIE2bits.CCP2IE = 0 ;       // Disable CCP2 interrupt
0022c0   90a0     bcf     0xa0, 0x0, 0x0   	BCF	_PIE2bits, 0
                                           ;	.line	370; stepperCon.c	PIE1bits.SSP1IE = 1 ;       // Enable I2C interrupt
0022c2   869d     bsf     0x9d, 0x3, 0x0   	BSF	_PIE1bits, 3
                                           ;	.line	371; stepperCon.c	PIE2bits.BCL1IE = 1 ;       // Enable I2C collision detection interrupt
0022c4   86a0     bsf     0xa0, 0x3, 0x0   	BSF	_PIE2bits, 3
                                           ;	.line	373; stepperCon.c	SSP1CON1bits.SSPOV = 0 ;
0022c6   9cc6     bcf     0xc6, 0x6, 0x0   	BCF	_SSP1CON1bits, 6
                                           ;	.line	374; stepperCon.c	PIR1bits.SSP1IF = 0 ;
0022c8   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	375; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
0022ca   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
                                           ;	.line	376; stepperCon.c	SSP1CON1bits.SSPEN = 1 ;    // Enable I2C port
0022cc   8ac6     bsf     0xc6, 0x5, 0x0   	BSF	_SSP1CON1bits, 5
0022ce   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0022d0   ffd9
0022d2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__activeInts	code
                                           _activeInts:
                                           ;	.line	335; stepperCon.c	void activeInts(void) {
0021f6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021f8   ffe5
0021fa   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021fc   ffd9
                                           ;	.line	336; stepperCon.c	PIE1bits.SSP1IE = 0 ;       // Disable I2C interrupt
0021fe   969d     bcf     0x9d, 0x3, 0x0   	BCF	_PIE1bits, 3
                                           ;	.line	337; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;    // Disable I2C port
002200   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	338; stepperCon.c	PIE2bits.BCL1IE = 0 ;       // Disable I2C collision detection interrupt
002202   96a0     bcf     0xa0, 0x3, 0x0   	BCF	_PIE2bits, 3
                                           ;	.line	341; stepperCon.c	if(PORTBbits.RB2) { 
002204   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
002206   d005     bra     0x002212         	BRA	_00256_DS_
                                           ;	.line	342; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;
002208   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	343; stepperCon.c	dir = 1 ;
00220a   0e01     movlw   0x01             	MOVLW	0x01
00220c   010f     movlb   0xf              	BANKSEL	_dir
00220e   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
002210   d004     bra     0x00221a         	BRA	_00257_DS_
                                           _00256_DS_:
                                           ;	.line	346; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
002212   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	347; stepperCon.c	dir = -1 ;
002214   0eff     movlw   0xff             	MOVLW	0xff
002216   010f     movlb   0xf              	BANKSEL	_dir
002218   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
                                           _00257_DS_:
                                           ;	.line	350; stepperCon.c	INTCONbits.INT0IE = 1 ;     // Enable 'step' interrupt
00221a   88f2     bsf     0xf2, 0x4, 0x0   	BSF	_INTCONbits, 4
                                           ;	.line	351; stepperCon.c	INTCON3bits.INT2IE = 1 ;    // Enable 'dir' interrupt
00221c   88f0     bsf     0xf0, 0x4, 0x0   	BSF	_INTCON3bits, 4
                                           ;	.line	353; stepperCon.c	PIE2bits.C1IE = 0 ;         // Disable Comparator C1 Interrupt
00221e   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           ;	.line	354; stepperCon.c	PIE2bits.C2IE = 0 ;         // Disable Comparator C2 Interrupt
002220   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           ;	.line	356; stepperCon.c	PIE1bits.CCP1IE = 1 ;       // Enable CCP1 interrupt
002222   849d     bsf     0x9d, 0x2, 0x0   	BSF	_PIE1bits, 2
                                           ;	.line	357; stepperCon.c	PIE2bits.CCP2IE = 1 ;       // Enable CCP2 interrupt
002224   80a0     bsf     0xa0, 0x0, 0x0   	BSF	_PIE2bits, 0
002226   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002228   ffd9
00222a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__i2cSetup	code
                                           _i2cSetup:
                                           ;	.line	321; stepperCon.c	void i2cSetup(void) {
00225e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002260   ffe5
002262   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002264   ffd9
                                           ;	.line	322; stepperCon.c	TRISCbits.TRISC3 = 1 ;      // Set I2C pins as input
002266   8694     bsf     0x94, 0x3, 0x0   	BSF	_TRISCbits, 3
                                           ;	.line	323; stepperCon.c	TRISCbits.TRISC4 = 1 ;
002268   8894     bsf     0x94, 0x4, 0x0   	BSF	_TRISCbits, 4
                                           ;	.line	325; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;
00226a   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	326; stepperCon.c	SSP1CON2bits.GCEN = 1 ;     // Enable general call on address 0x00
00226c   8ec5     bsf     0xc5, 0x7, 0x0   	BSF	_SSP1CON2bits, 7
                                           ;	.line	327; stepperCon.c	SSP1CON2bits.SEN = 1 ;      // Enable clock stretching
00226e   80c5     bsf     0xc5, 0x0, 0x0   	BSF	_SSP1CON2bits, 0
                                           ;	.line	328; stepperCon.c	SSP1ADD = i2c_address ;     // Set device I2C address
002270   cf32     movff   0xf32, 0xfc8     	MOVFF	_i2c_address, _SSP1ADD
002272   ffc8
002274   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
                                           ;	.line	330; stepperCon.c	i2c_reg_addr = 0 ;
002276   6b30     clrf    0x30, 0x1        	CLRF	_i2c_reg_addr, B
                                           ;	.line	332; stepperCon.c	SSP1CON1bits.SSPM = 0x6 ;   // I2C Slave mode, 7-bit address
002278   50c6     movf    0xc6, 0x0, 0x0   	MOVF	_SSP1CON1bits, W
00227a   0bf0     andlw   0xf0             	ANDLW	0xf0
00227c   0906     iorlw   0x06             	IORLW	0x06
00227e   6ec6     movwf   0xc6, 0x0        	MOVWF	_SSP1CON1bits
002280   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002282   ffd9
002284   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__lowInt	code
                                           _lowInt:
                                           ;	.line	279; stepperCon.c	static void lowInt(void) __interrupt(2) {
0017d0   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0017d2   ffe5
0017d4   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0017d6   ffe5
0017d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017da   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0017dc   ffe5
0017de   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0017e0   ffe5
0017e2   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0017e4   ffe5
0017e6   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0017e8   ffe5
0017ea   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0017ec   ffe5
0017ee   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0017f0   ffe5
0017f2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0017f4   ffe5
0017f6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0017f8   ffd9
0017fa   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0017fc   ffe5
0017fe   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001800   ffe5
001802   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001804   ffe5
                                           ;	.line	283; stepperCon.c	if (PIR1bits.SSP1IF) {
001806   a69e     btfss   0x9e, 0x3, 0x0   	BTFSS	_PIR1bits, 3
001808   d054     bra     0x0018b2         	BRA	_00219_DS_
                                           ;	.line	284; stepperCon.c	if (SSP1STATbits.BF) i2c_buf = SSP1BUF ;    // Read data, clear BF
00180a   a0c7     btfss   0xc7, 0x0, 0x0   	BTFSS	_SSP1STATbits, 0
00180c   d002     bra     0x001812         	BRA	_00204_DS_
00180e   cfc9     movff   0xfc9, 0x000     	MOVFF	_SSP1BUF, r0x00
001810   f000
                                           _00204_DS_:
                                           ;	.line	287; stepperCon.c	if (!SSP1STATbits.D) {
001812   bac7     btfsc   0xc7, 0x5, 0x0   	BTFSC	_SSP1STATbits, 5
001814   d014     bra     0x00183e         	BRA	_00214_DS_
001816   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	288; stepperCon.c	i2c_counter = 0 ;                       // Reset counter
001818   6b2f     clrf    0x2f, 0x1        	CLRF	_i2c_counter, B
                                           ;	.line	289; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
00181a   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
00181c   d03d     bra     0x001898         	BRA	_00215_DS_
                                           ;	.line	290; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
00181e   cf30     movff   0xf30, 0x001     	MOVFF	_i2c_reg_addr, r0x01
001820   f001
001822   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
001824   2b30     incf    0x30, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001826   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001828   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
00182a   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00182c   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
00182e   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001830   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001832   ffe9
001834   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
001836   ffea
001838   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
00183a   ffc9
00183c   d02d     bra     0x001898         	BRA	_00215_DS_
                                           _00214_DS_:
00183e   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	295; stepperCon.c	i2c_counter++ ;                         // Increment counter
001840   2b2f     incf    0x2f, 0x1, 0x1   	INCF	_i2c_counter, F, B
                                           ;	.line	296; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
001842   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
001844   d010     bra     0x001866         	BRA	_00211_DS_
                                           ;	.line	297; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
001846   cf30     movff   0xf30, 0x001     	MOVFF	_i2c_reg_addr, r0x01
001848   f001
00184a   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
00184c   2b30     incf    0x30, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
00184e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001850   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001852   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001854   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001856   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001858   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
00185a   ffe9
00185c   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00185e   ffea
001860   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001862   ffc9
001864   d019     bra     0x001898         	BRA	_00215_DS_
                                           _00211_DS_:
001866   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	300; stepperCon.c	if (i2c_counter == 1) {             // First byte is register
001868   512f     movf    0x2f, 0x0, 0x1   	MOVF	_i2c_counter, W, B
00186a   0a01     xorlw   0x01             	XORLW	0x01
00186c   e103     bnz     0x001874         	BNZ	_00208_DS_
                                           ;	.line	301; stepperCon.c	i2c_reg_addr = i2c_buf ;        // value
00186e   c000     movff   0x000, 0xf30     	MOVFF	r0x00, _i2c_reg_addr
001870   ff30
001872   d012     bra     0x001898         	BRA	_00215_DS_
                                           _00208_DS_:
                                           ;	.line	304; stepperCon.c	i2c_regs[i2c_reg_addr++] = i2c_buf ; // write
001874   cf30     movff   0xf30, 0x001     	MOVFF	_i2c_reg_addr, r0x01
001876   f001
001878   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
00187a   2b30     incf    0x30, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
00187c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00187e   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001880   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001882   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001884   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001886   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001888   ffe9
00188a   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00188c   ffea
00188e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001890   ffef
                                           ;	.line	305; stepperCon.c	i2c_dirty = 1 ;                 // set I2C dirty flag
001892   0e01     movlw   0x01             	MOVLW	0x01
001894   010f     movlb   0xf              	BANKSEL	_i2c_dirty
001896   6f31     movwf   0x31, 0x1        	MOVWF	_i2c_dirty, B
                                           _00215_DS_:
                                           ;	.line	310; stepperCon.c	i2c_reg_addr %= sizeof(i2c_regs) ;          // Prevent buffer overflow
001898   0e09     movlw   0x09             	MOVLW	0x09
00189a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00189c   cf30     movff   0xf30, 0xfe5     	MOVFF	_i2c_reg_addr, POSTDEC1
00189e   ffe5
0018a0   ecdd     call    0x001fba, 0x0    	CALL	__moduchar
0018a2   f00f
0018a4   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
0018a6   6f30     movwf   0x30, 0x1        	MOVWF	_i2c_reg_addr, B
0018a8   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0018aa   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	312; stepperCon.c	PIR1bits.SSP1IF = 0 ;       // Clear interrupt
0018ac   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	313; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
0018ae   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
0018b0   d003     bra     0x0018b8         	BRA	_00221_DS_
                                           _00219_DS_:
                                           ;	.line	316; stepperCon.c	else if (PIR2bits.BCL1IF) {
0018b2   a6a1     btfss   0xa1, 0x3, 0x0   	BTFSS	_PIR2bits, 3
0018b4   d001     bra     0x0018b8         	BRA	_00221_DS_
                                           ;	.line	317; stepperCon.c	PIR2bits.BCL1IF = 0 ;       // Clear I2C collision interrupt
0018b6   96a1     bcf     0xa1, 0x3, 0x0   	BCF	_PIR2bits, 3
                                           _00221_DS_:
0018b8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0018ba   f002
0018bc   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0018be   f001
0018c0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0018c2   f000
0018c4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0018c6   ffd9
0018c8   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0018ca   fffb
0018cc   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0018ce   fffa
0018d0   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0018d2   ffea
0018d4   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0018d6   ffe9
0018d8   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0018da   fff4
0018dc   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0018de   fff3
0018e0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0018e2   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0018e4   ffe0
0018e6   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0018e8   ffd8
0018ea   0010     retfie  0x0              	RETFIE	

                                           ; ; Starting pCode block
                                           S_stepperCon__highInt	code
                                           _highInt:
                                           ;	.line	177; stepperCon.c	static void highInt(void) __interrupt(1) {
001698   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
00169a   ffe5
00169c   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
00169e   ffe5
0016a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016a2   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0016a4   ffe5
0016a6   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0016a8   ffe5
0016aa   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0016ac   ffe5
0016ae   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0016b0   ffe5
0016b2   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0016b4   ffe5
0016b6   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0016b8   ffe5
0016ba   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0016bc   ffe5
0016be   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0016c0   ffd9
                                           ;	.line	179; stepperCon.c	if (INTCONbits.INT0IF) {
0016c2   a2f2     btfss   0xf2, 0x1, 0x0   	BTFSS	_INTCONbits, 1
0016c4   d004     bra     0x0016ce         	BRA	_00106_DS_
                                           ;	.line	180; stepperCon.c	state = STEP ;
0016c6   0e04     movlw   0x04             	MOVLW	0x04
0016c8   010f     movlb   0xf              	BANKSEL	_state
0016ca   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	181; stepperCon.c	INTCONbits.INT0IF = 0 ;     // clear 'step' interrupt
0016cc   92f2     bcf     0xf2, 0x1, 0x0   	BCF	_INTCONbits, 1
                                           _00106_DS_:
                                           ;	.line	185; stepperCon.c	if (INTCON3bits.INT2IF) {
0016ce   a2f0     btfss   0xf0, 0x1, 0x0   	BTFSS	_INTCON3bits, 1
0016d0   d00f     bra     0x0016f0         	BRA	_00111_DS_
                                           ;	.line	187; stepperCon.c	if(PORTBbits.RB2) {
0016d2   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
0016d4   d005     bra     0x0016e0         	BRA	_00108_DS_
                                           ;	.line	189; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;   
0016d6   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	190; stepperCon.c	dir = 1 ;
0016d8   0e01     movlw   0x01             	MOVLW	0x01
0016da   010f     movlb   0xf              	BANKSEL	_dir
0016dc   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
0016de   d004     bra     0x0016e8         	BRA	_00109_DS_
                                           _00108_DS_:
                                           ;	.line	194; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
0016e0   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	195; stepperCon.c	dir = -1 ;
0016e2   0eff     movlw   0xff             	MOVLW	0xff
0016e4   010f     movlb   0xf              	BANKSEL	_dir
0016e6   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
                                           _00109_DS_:
                                           ;	.line	198; stepperCon.c	state = NEXT_STEP ;         // Force recalculate of next step
0016e8   0e06     movlw   0x06             	MOVLW	0x06
0016ea   010f     movlb   0xf              	BANKSEL	_state
0016ec   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	199; stepperCon.c	INTCON3bits.INT2IF = 0 ;    // clear 'dir' interrupt
0016ee   92f0     bcf     0xf0, 0x1, 0x0   	BCF	_INTCON3bits, 1
                                           _00111_DS_:
                                           ;	.line	203; stepperCon.c	if (PIR1bits.CCP1IF) {
0016f0   a49e     btfss   0x9e, 0x2, 0x0   	BTFSS	_PIR1bits, 2
0016f2   d02c     bra     0x00174c         	BRA	_00127_DS_
                                           ;	.line	204; stepperCon.c	T1CONbits.TMR1ON = 0 ;  // Toff timer off
0016f4   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	205; stepperCon.c	TMR1L = 0 ;             // Clear off timer
0016f6   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	206; stepperCon.c	TMR1H = 0 ;
0016f8   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
0016fa   010f     movlb   0xf              	BANKSEL	_a_state
                                           ;	.line	208; stepperCon.c	if (a_state == PH_OFF) {
0016fc   5128     movf    0x28, 0x0, 0x1   	MOVF	_a_state, W, B
0016fe   0a01     xorlw   0x01             	XORLW	0x01
001700   e11b     bnz     0x001738         	BNZ	_00124_DS_
                                           _00192_DS_:
001702   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	209; stepperCon.c	if (a_decay == FAST_DECAY) {            
001704   512b     movf    0x2b, 0x0, 0x1   	MOVF	_a_decay, W, B
001706   0a01     xorlw   0x01             	XORLW	0x01
001708   e109     bnz     0x00171c         	BNZ	_00116_DS_
                                           _00194_DS_:
00170a   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	210; stepperCon.c	if (pol_a) {                    // Forward current, Phase-A
00170c   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
00170e   e003     bz      0x001716         	BZ	_00113_DS_
                                           ;	.line	211; stepperCon.c	LATCbits.LATC1 = 0 ;
001710   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	212; stepperCon.c	LATCbits.LATC0 = 1 ;
001712   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
001714   d004     bra     0x00171e         	BRA	_00117_DS_
                                           _00113_DS_:
                                           ;	.line	215; stepperCon.c	LATCbits.LATC0 = 0 ;
001716   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	216; stepperCon.c	LATCbits.LATC1 = 1 ;
001718   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
00171a   d001     bra     0x00171e         	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	219; stepperCon.c	else LATAbits.LATA4 = 1 ;  // Toggle enable for slow decay
00171c   8889     bsf     0x89, 0x4, 0x0   	BSF	_LATAbits, 4
                                           _00117_DS_:
                                           ;	.line	221; stepperCon.c	CCPR1H = 0 ;
00171e   6abf     clrf    0xbf, 0x0        	CLRF	_CCPR1H
001720   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	223; stepperCon.c	if(pol_a) CCPR1L = t_blank_high ;
001722   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
001724   e003     bz      0x00172c         	BZ	_00119_DS_
001726   cf26     movff   0xf26, 0xfbe     	MOVFF	_t_blank_high, _CCPR1L
001728   ffbe
00172a   d002     bra     0x001730         	BRA	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	224; stepperCon.c	else CCPR1L = t_blank_low ;
00172c   cf27     movff   0xf27, 0xfbe     	MOVFF	_t_blank_low, _CCPR1L
00172e   ffbe
                                           _00120_DS_:
001730   010f     movlb   0xf              	BANKSEL	_a_state
                                           ;	.line	226; stepperCon.c	a_state = PH_BLANK ;
001732   6b28     clrf    0x28, 0x1        	CLRF	_a_state, B
                                           ;	.line	228; stepperCon.c	T1CONbits.TMR1ON = 1 ;
001734   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
001736   d009     bra     0x00174a         	BRA	_00125_DS_
                                           _00124_DS_:
001738   010f     movlb   0xf              	BANKSEL	_a_state
                                           ;	.line	230; stepperCon.c	else if(a_state == PH_BLANK) {
00173a   5128     movf    0x28, 0x0, 0x1   	MOVF	_a_state, W, B
00173c   e106     bnz     0x00174a         	BNZ	_00125_DS_
                                           ;	.line	231; stepperCon.c	CCPR1H = 0 ;
00173e   6abf     clrf    0xbf, 0x0        	CLRF	_CCPR1H
                                           ;	.line	232; stepperCon.c	CCPR1L = t_off ;
001740   cf29     movff   0xf29, 0xfbe     	MOVFF	_t_off, _CCPR1L
001742   ffbe
                                           ;	.line	233; stepperCon.c	a_state = T_DRIVE ;
001744   0e02     movlw   0x02             	MOVLW	0x02
001746   010f     movlb   0xf              	BANKSEL	_a_state
001748   6f28     movwf   0x28, 0x1        	MOVWF	_a_state, B
                                           _00125_DS_:
                                           ;	.line	236; stepperCon.c	PIR1bits.CCP1IF = 0 ;
00174a   949e     bcf     0x9e, 0x2, 0x0   	BCF	_PIR1bits, 2
                                           _00127_DS_:
                                           ;	.line	240; stepperCon.c	if (PIR2bits.CCP2IF) {
00174c   a0a1     btfss   0xa1, 0x0, 0x0   	BTFSS	_PIR2bits, 0
00174e   d02c     bra     0x0017a8         	BRA	_00144_DS_
                                           ;	.line	241; stepperCon.c	T3CONbits.TMR3ON = 0 ;  // Toff timer off
001750   90b1     bcf     0xb1, 0x0, 0x0   	BCF	_T3CONbits, 0
                                           ;	.line	242; stepperCon.c	TMR3L = 0 ;             // Clear off timer 
001752   6ab2     clrf    0xb2, 0x0        	CLRF	_TMR3L
                                           ;	.line	243; stepperCon.c	TMR3H = 0 ;
001754   6ab3     clrf    0xb3, 0x0        	CLRF	_TMR3H
001756   010f     movlb   0xf              	BANKSEL	_b_state
                                           ;	.line	245; stepperCon.c	if (b_state == PH_OFF) {
001758   512a     movf    0x2a, 0x0, 0x1   	MOVF	_b_state, W, B
00175a   0a01     xorlw   0x01             	XORLW	0x01
00175c   e11b     bnz     0x001794         	BNZ	_00140_DS_
                                           _00196_DS_:
00175e   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	247; stepperCon.c	if (b_decay == FAST_DECAY) {
001760   512d     movf    0x2d, 0x0, 0x1   	MOVF	_b_decay, W, B
001762   0a01     xorlw   0x01             	XORLW	0x01
001764   e109     bnz     0x001778         	BNZ	_00132_DS_
                                           _00198_DS_:
001766   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	248; stepperCon.c	if (pol_b) {                    // Forward current, Phase-B
001768   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
00176a   e003     bz      0x001772         	BZ	_00129_DS_
                                           ;	.line	249; stepperCon.c	LATCbits.LATC2 = 0 ;
00176c   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	250; stepperCon.c	LATDbits.LATD5 = 1 ;
00176e   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
001770   d004     bra     0x00177a         	BRA	_00133_DS_
                                           _00129_DS_:
                                           ;	.line	253; stepperCon.c	LATDbits.LATD5 = 0 ;
001772   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	254; stepperCon.c	LATCbits.LATC2 = 1 ;
001774   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
001776   d001     bra     0x00177a         	BRA	_00133_DS_
                                           _00132_DS_:
                                           ;	.line	257; stepperCon.c	else LATAbits.LATA5 = 1 ;  // Toggle enable for slow decay
001778   8a89     bsf     0x89, 0x5, 0x0   	BSF	_LATAbits, 5
                                           _00133_DS_:
                                           ;	.line	259; stepperCon.c	CCPR2H = 0 ;
00177a   6a68     clrf    0x68, 0x0        	CLRF	_CCPR2H
00177c   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	261; stepperCon.c	if(pol_b) CCPR2L = t_blank_high ;
00177e   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
001780   e003     bz      0x001788         	BZ	_00135_DS_
001782   cf26     movff   0xf26, 0xf67     	MOVFF	_t_blank_high, _CCPR2L
001784   ff67
001786   d002     bra     0x00178c         	BRA	_00136_DS_
                                           _00135_DS_:
                                           ;	.line	262; stepperCon.c	else CCPR2L = t_blank_low ;
001788   cf27     movff   0xf27, 0xf67     	MOVFF	_t_blank_low, _CCPR2L
00178a   ff67
                                           _00136_DS_:
00178c   010f     movlb   0xf              	BANKSEL	_b_state
                                           ;	.line	264; stepperCon.c	b_state = PH_BLANK ;
00178e   6b2a     clrf    0x2a, 0x1        	CLRF	_b_state, B
                                           ;	.line	266; stepperCon.c	T3CONbits.TMR3ON = 1 ;
001790   80b1     bsf     0xb1, 0x0, 0x0   	BSF	_T3CONbits, 0
001792   d009     bra     0x0017a6         	BRA	_00141_DS_
                                           _00140_DS_:
001794   010f     movlb   0xf              	BANKSEL	_b_state
                                           ;	.line	268; stepperCon.c	else if(b_state == PH_BLANK) {
001796   512a     movf    0x2a, 0x0, 0x1   	MOVF	_b_state, W, B
001798   e106     bnz     0x0017a6         	BNZ	_00141_DS_
                                           ;	.line	269; stepperCon.c	CCPR2H = 0 ;
00179a   6a68     clrf    0x68, 0x0        	CLRF	_CCPR2H
                                           ;	.line	270; stepperCon.c	CCPR2L = t_off ;
00179c   cf29     movff   0xf29, 0xf67     	MOVFF	_t_off, _CCPR2L
00179e   ff67
                                           ;	.line	271; stepperCon.c	b_state = T_DRIVE ;
0017a0   0e02     movlw   0x02             	MOVLW	0x02
0017a2   010f     movlb   0xf              	BANKSEL	_b_state
0017a4   6f2a     movwf   0x2a, 0x1        	MOVWF	_b_state, B
                                           _00141_DS_:
                                           ;	.line	274; stepperCon.c	PIR2bits.CCP2IF = 0 ;
0017a6   90a1     bcf     0xa1, 0x0, 0x0   	BCF	_PIR2bits, 0
                                           _00144_DS_:
0017a8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0017aa   ffd9
0017ac   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0017ae   fffb
0017b0   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0017b2   fffa
0017b4   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0017b6   ffea
0017b8   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0017ba   ffe9
0017bc   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0017be   fff4
0017c0   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0017c2   fff3
0017c4   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0017c6   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0017c8   ffe0
0017ca   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0017cc   ffd8
0017ce   0010     retfie  0x0              	RETFIE	



                                           ; Statistics:
                                           ; code size:	 3248 (0x0cb0) bytes ( 2.48%)
                                           ;           	 1624 (0x0658) words
                                           ; udata size:	  161 (0x00a1) bytes ( 4.38%)
                                           ; access size:	   11 (0x000b) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.6 #9917 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_compsSetup
                                           	global	_ioSetup
                                           	global	_pwmSetup
                                           	global	_intSetup
                                           	global	_phTimersSetup
                                           	global	_resetCheck

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_sc_setup__resetCheck	code
                                           _resetCheck:
                                           ;	.line	154; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void resetCheck(void) {
001cf0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001cf2   ffe5
001cf4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001cf6   ffd9
001cf8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001cfa   ffe5
001cfc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001cfe   ffe5
                                           ;	.line	158; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(!RCONbits.TO || !RCONbits.PD || !RCONbits.BOR) {
001d00   a6d0     btfss   0xd0, 0x3, 0x0   	BTFSS	_RCONbits, 3
001d02   d004     bra     0x001d0c         	BRA	_00133_DS_
001d04   a4d0     btfss   0xd0, 0x2, 0x0   	BTFSS	_RCONbits, 2
001d06   d002     bra     0x001d0c         	BRA	_00133_DS_
001d08   b0d0     btfsc   0xd0, 0x0, 0x0   	BTFSC	_RCONbits, 0
001d0a   d007     bra     0x001d1a         	BRA	_00134_DS_
                                           _00133_DS_:
                                           ;	.line	160; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.TO = 1 ;
001d0c   86d0     bsf     0xd0, 0x3, 0x0   	BSF	_RCONbits, 3
                                           ;	.line	161; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.PD = 1 ;
001d0e   84d0     bsf     0xd0, 0x2, 0x0   	BSF	_RCONbits, 2
                                           ;	.line	162; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.BOR = 0 ;
001d10   90d0     bcf     0xd0, 0x0, 0x0   	BCF	_RCONbits, 0
                                           ;	.line	163; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.POR = 0 ;
001d12   92d0     bcf     0xd0, 0x1, 0x0   	BCF	_RCONbits, 1
                                           ;	.line	165; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
001d14   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	166; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
001d16   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           _00131_DS_:
                                           ;	.line	168; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(1) ; 
001d18   d7ff     bra     0x001d18         	BRA	_00131_DS_
                                           _00134_DS_:
                                           ;	.line	172; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(STKPTRbits.STKFUL || STKPTRbits.STKUNF) {
001d1a   befc     btfsc   0xfc, 0x7, 0x0   	BTFSC	_STKPTRbits, 7
001d1c   d002     bra     0x001d22         	BRA	_00145_DS_
001d1e   acfc     btfss   0xfc, 0x6, 0x0   	BTFSS	_STKPTRbits, 6
001d20   d031     bra     0x001d84         	BRA	_00148_DS_
                                           _00145_DS_:
                                           ;	.line	174; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKFUL = 0 ;
001d22   9efc     bcf     0xfc, 0x7, 0x0   	BCF	_STKPTRbits, 7
                                           ;	.line	175; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKUNF = 0 ;
001d24   9cfc     bcf     0xfc, 0x6, 0x0   	BCF	_STKPTRbits, 6
                                           ;	.line	177; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
001d26   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	178; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
001d28   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           ;	.line	181; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1CS = 0 ;      // Timer1 to Fosc/4
001d2a   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
001d2c   0b3f     andlw   0x3f             	ANDLW	0x3f
001d2e   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	182; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
001d30   0e78     movlw   0x78             	MOVLW	0x78
001d32   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00143_DS_:
                                           ;	.line	185; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 0 ;
001d34   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	186; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR1bits.TMR1IF = 0 ;
001d36   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	187; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.T1CKPS = 3 ;      // Timer1 1:8 prescale
001d38   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
001d3a   0bcf     andlw   0xcf             	ANDLW	0xcf
001d3c   0930     iorlw   0x30             	IORLW	0x30
001d3e   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	188; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1H = TMR_10MS >> 8 ;
001d40   0eb1     movlw   0xb1             	MOVLW	0xb1
001d42   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	189; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1L = TMR_10MS ;
001d44   0edf     movlw   0xdf             	MOVLW	0xdf
001d46   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	190; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 1 ;
001d48   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00137_DS_:
                                           ;	.line	192; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(!PIR1bits.TMR1IF) ;
001d4a   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
001d4c   d7fe     bra     0x001d4a         	BRA	_00137_DS_
                                           ;	.line	194; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if (--i == 0) {
001d4e   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
001d50   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001d52   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
001d54   f000
001d56   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d58   e1ed     bnz     0x001d34         	BNZ	_00143_DS_
                                           ;	.line	195; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC5 = !LATCbits.LATC5 ;
001d5a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001d5c   ba8b     btfsc   0x8b, 0x5, 0x0   	BTFSC	_LATCbits, 5
001d5e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001d60   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d62   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001d64   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001d66   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001d68   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001d6a   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
001d6c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d6e   0b01     andlw   0x01             	ANDLW	0x01
001d70   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
001d72   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001d74   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001d76   508b     movf    0x8b, 0x0, 0x0   	MOVF	_LATCbits, W
001d78   0bdf     andlw   0xdf             	ANDLW	0xdf
001d7a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
001d7c   6e8b     movwf   0x8b, 0x0        	MOVWF	_LATCbits
                                           ;	.line	196; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
001d7e   0e78     movlw   0x78             	MOVLW	0x78
001d80   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d82   d7d8     bra     0x001d34         	BRA	_00143_DS_
                                           _00148_DS_:
001d84   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001d86   f001
001d88   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001d8a   f000
001d8c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d8e   ffd9
001d90   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__phTimersSetup	code
                                           _phTimersSetup:
                                           ;	.line	131; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void phTimersSetup(void) {
002108   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00210a   ffe5
00210c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00210e   ffd9
                                           ;	.line	134; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1CS = 0 ;
002110   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
002112   0b3f     andlw   0x3f             	ANDLW	0x3f
002114   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	135; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.T1CKPS = 3 ;
002116   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
002118   0bcf     andlw   0xcf             	ANDLW	0xcf
00211a   0930     iorlw   0x30             	IORLW	0x30
00211c   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	136; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 0 ;
00211e   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	137; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1L = 0 ;
002120   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	138; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1H = 0 ;
002122   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
                                           ;	.line	140; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T3CONbits.TMR3CS = 0 ;
002124   50b1     movf    0xb1, 0x0, 0x0   	MOVF	_T3CONbits, W
002126   0b3f     andlw   0x3f             	ANDLW	0x3f
002128   6eb1     movwf   0xb1, 0x0        	MOVWF	_T3CONbits
                                           ;	.line	141; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T3CONbits.T3CKPS = 3 ;
00212a   50b1     movf    0xb1, 0x0, 0x0   	MOVF	_T3CONbits, W
00212c   0bcf     andlw   0xcf             	ANDLW	0xcf
00212e   0930     iorlw   0x30             	IORLW	0x30
002130   6eb1     movwf   0xb1, 0x0        	MOVWF	_T3CONbits
                                           ;	.line	142; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T3CONbits.TMR3ON = 0 ;
002132   90b1     bcf     0xb1, 0x0, 0x0   	BCF	_T3CONbits, 0
                                           ;	.line	143; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR3L = 0 ;
002134   6ab2     clrf    0xb2, 0x0        	CLRF	_TMR3L
                                           ;	.line	144; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR3H = 0 ;
002136   6ab3     clrf    0xb3, 0x0        	CLRF	_TMR3H
002138   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	146; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C1TSEL = 0 ;   // Timer1 -> CCP1
00213a   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
00213c   0bfc     andlw   0xfc             	ANDLW	0xfc
00213e   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
002140   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
002142   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	147; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C2TSEL = 1 ;   // Timer3 -> CCP2
002144   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
002146   0be7     andlw   0xe7             	ANDLW	0xe7
002148   0908     iorlw   0x08             	IORLW	0x08
00214a   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
00214c   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
                                           ;	.line	150; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.CCP1M = 0xa ;
00214e   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
002150   0bf0     andlw   0xf0             	ANDLW	0xf0
002152   090a     iorlw   0x0a             	IORLW	0x0a
002154   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	151; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.CCP2M = 0xa ;
002156   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
002158   0bf0     andlw   0xf0             	ANDLW	0xf0
00215a   090a     iorlw   0x0a             	IORLW	0x0a
00215c   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
00215e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002160   ffd9
002162   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__intSetup	code
                                           _intSetup:
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void intSetup(void) {
002286   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002288   ffe5
00228a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00228c   ffd9
                                           ;	.line	109; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 0 ;   // Disable interrupts
00228e   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	110; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 0 ;
002290   9cf2     bcf     0xf2, 0x6, 0x0   	BCF	_INTCONbits, 6
                                           ;	.line	112; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.IPEN = 1 ;         // Enable interrupts priority
002292   8ed0     bsf     0xd0, 0x7, 0x0   	BSF	_RCONbits, 7
                                           ;	.line	114; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.RBPU = 1 ;      // Disable Port B pull-ups
002294   8ef1     bsf     0xf1, 0x7, 0x0   	BSF	_INTCON2bits, 7
                                           ;	.line	115; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.INTEDG0 = 1 ;   // 'step' interrupt on rising edge
002296   8cf1     bsf     0xf1, 0x6, 0x0   	BSF	_INTCON2bits, 6
                                           ;	.line	117; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON3bits.INT2IP = 1 ;    // High priority to 'dir' interrupt
002298   8ef0     bsf     0xf0, 0x7, 0x0   	BSF	_INTCON3bits, 7
                                           ;	.line	119; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C1IP = 1 ;         // High priority to Phase-A comparator
00229a   8ca2     bsf     0xa2, 0x6, 0x0   	BSF	_IPR2bits, 6
                                           ;	.line	120; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C2IP = 1 ;         // High priority to Phase-B comparator
00229c   8aa2     bsf     0xa2, 0x5, 0x0   	BSF	_IPR2bits, 5
                                           ;	.line	122; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.CCP1IP = 1 ;       // Hight priority to Phase-A compare timer
00229e   849f     bsf     0x9f, 0x2, 0x0   	BSF	_IPR1bits, 2
                                           ;	.line	123; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.CCP2IP = 1 ;       // Hight priority to Phase-B compare timer
0022a0   80a2     bsf     0xa2, 0x0, 0x0   	BSF	_IPR2bits, 0
                                           ;	.line	125; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.SSP1IP = 0 ;       // Low priority to I2C interrupt
0022a2   969f     bcf     0x9f, 0x3, 0x0   	BCF	_IPR1bits, 3
                                           ;	.line	127; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 1 ;   // Enable interrupts
0022a4   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	128; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 1 ;
0022a6   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
0022a8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0022aa   ffd9
0022ac   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__pwmSetup	code
                                           _pwmSetup:
                                           ;	.line	90; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void pwmSetup(void) {
0021b0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021b2   ffe5
0021b4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021b6   ffd9
0021b8   010f     movlb   0xf              	BANKSEL	_ANSELEbits
                                           ;	.line	91; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELEbits.ANSE2 = 0 ;
0021ba   953c     bcf     0x3c, 0x2, 0x1   	BCF	_ANSELEbits, 2, B
                                           ;	.line	92; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 1 ;          // Disable driver for setup
0021bc   8496     bsf     0x96, 0x2, 0x0   	BSF	_TRISEbits, 2
0021be   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	93; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD1 = 0 ;
0021c0   933b     bcf     0x3b, 0x1, 0x1   	BCF	_ANSELDbits, 1, B
                                           ;	.line	94; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 1 ;
0021c2   8295     bsf     0x95, 0x1, 0x0   	BSF	_TRISDbits, 1
0021c4   010f     movlb   0xf              	BANKSEL	_CCPTMRS1
                                           ;	.line	96; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS1 = 0x00 ;               // Use Timer2 for references
0021c6   6b48     clrf    0x48, 0x1        	CLRF	_CCPTMRS1, B
                                           ;	.line	97; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PR2 = 0xff ;                    // Set timer for 62.5kHz @64MHz, 10-bit res
0021c8   0eff     movlw   0xff             	MOVLW	0xff
0021ca   6ebb     movwf   0xbb, 0x0        	MOVWF	_PR2
                                           ;	.line	98; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.T2CKPS = 0x0 ;        // Set prescaler to 1:1
0021cc   50ba     movf    0xba, 0x0, 0x0   	MOVF	_T2CONbits, W
0021ce   0bfc     andlw   0xfc             	ANDLW	0xfc
0021d0   6eba     movwf   0xba, 0x0        	MOVWF	_T2CONbits
                                           ;	.line	99; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.TMR2ON = 1 ;          // Turn timer on
0021d2   84ba     bsf     0xba, 0x2, 0x0   	BSF	_T2CONbits, 2
0021d4   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
                                           ;	.line	101; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP5CONbits.CCP5M = 0x0c ;      // Enable Phase-A current reference
0021d6   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
0021d8   0bf0     andlw   0xf0             	ANDLW	0xf0
0021da   090c     iorlw   0x0c             	IORLW	0x0c
0021dc   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
0021de   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
0021e0   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
                                           ;	.line	102; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP4CONbits.CCP4M = 0x0c ;      // Enable Phase-B current reference
0021e2   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
0021e4   0bf0     andlw   0xf0             	ANDLW	0xf0
0021e6   090c     iorlw   0x0c             	IORLW	0x0c
0021e8   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
0021ea   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	104; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 0 ;          // Enable driver
0021ec   9496     bcf     0x96, 0x2, 0x0   	BCF	_TRISEbits, 2
                                           ;	.line	105; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 0 ;
0021ee   9295     bcf     0x95, 0x1, 0x0   	BCF	_TRISDbits, 1
0021f0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0021f2   ffd9
0021f4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__ioSetup	code
                                           _ioSetup:
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void ioSetup(void) {
002164   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002166   ffe5
002168   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00216a   ffd9
                                           ;	.line	52; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB4 = 0 ;     // Start with a cleared 'fault' signal
00216c   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 0 ;
00216e   9881     bcf     0x81, 0x4, 0x0   	BCF	_PORTBbits, 4
002170   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	55; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD2 = 0 ;
002172   953b     bcf     0x3b, 0x2, 0x1   	BCF	_ANSELDbits, 2, B
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.RD2 = 0 ;     // Start with blue LED off
002174   9495     bcf     0x95, 0x2, 0x0   	BCF	_TRISDbits, 2
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTDbits.RD2 = 0 ;
002176   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
002178   010f     movlb   0xf              	BANKSEL	_ANSELC
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELC = 0x00 ;         // Disable Port-C as analog input
00217a   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC5 = 0 ;     // Start with red LED off
00217c   9a94     bcf     0x94, 0x5, 0x0   	BCF	_TRISCbits, 5
                                           ;	.line	62; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 0 ;
00217e   9a82     bcf     0x82, 0x5, 0x0   	BCF	_PORTCbits, 5
                                           ;	.line	64; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC0 = 0 ;     // Phase-A outputs
002180   9094     bcf     0x94, 0x0, 0x0   	BCF	_TRISCbits, 0
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC1 = 0 ;
002182   9294     bcf     0x94, 0x1, 0x0   	BCF	_TRISCbits, 1
                                           ;	.line	67; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA4 = 0 ;
002184   9892     bcf     0x92, 0x4, 0x0   	BCF	_TRISAbits, 4
                                           ;	.line	69; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC0 = 0 ;
002186   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC1 = 0 ;
002188   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	71; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA4 = 0 ;
00218a   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	73; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC2 = 0 ;     // Phase-B outputs
00218c   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
00218e   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	74; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD5 = 0 ;
002190   9b3b     bcf     0x3b, 0x5, 0x1   	BCF	_ANSELDbits, 5, B
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.RD5 = 0 ;
002192   9a95     bcf     0x95, 0x5, 0x0   	BCF	_TRISDbits, 5
002194   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	76; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA5 = 0 ;
002196   9b38     bcf     0x38, 0x5, 0x1   	BCF	_ANSELAbits, 5, B
                                           ;	.line	77; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA5 = 0 ;
002198   9a92     bcf     0x92, 0x5, 0x0   	BCF	_TRISAbits, 5
                                           ;	.line	79; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC2 = 0 ;
00219a   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	80; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATDbits.LATD5 = 0 ; 
00219c   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	81; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA5 = 0 ;
00219e   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
0021a0   010f     movlb   0xf              	BANKSEL	_ANSELB
                                           ;	.line	83; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELB = 0x00 ;         // Disable port B analog input
0021a2   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
                                           ;	.line	85; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB0 = 1 ;     // 'step', 'dir' and 'enable' as inputs
0021a4   8093     bsf     0x93, 0x0, 0x0   	BSF	_TRISBbits, 0
                                           ;	.line	86; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB2 = 1 ;
0021a6   8493     bsf     0x93, 0x2, 0x0   	BSF	_TRISBbits, 2
                                           ;	.line	87; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB3 = 1 ;
0021a8   8693     bsf     0x93, 0x3, 0x0   	BSF	_TRISBbits, 3
0021aa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0021ac   ffd9
0021ae   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__compsSetup	code
                                           _compsSetup:
                                           ;	.line	31; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void compsSetup(void) {
00222c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00222e   ffe5
002230   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002232   ffd9
002234   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA0 = 1 ;      // Enable RA0 as analog input
002236   8138     bsf     0x38, 0x0, 0x1   	BSF	_ANSELAbits, 0, B
                                           ;	.line	33; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA0 = 1 ;
002238   8092     bsf     0x92, 0x0, 0x0   	BSF	_TRISAbits, 0
00223a   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA1 = 1 ;      // Enable RA1 as analog input
00223c   8338     bsf     0x38, 0x1, 0x1   	BSF	_ANSELAbits, 1, B
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA1 = 1 ;
00223e   8292     bsf     0x92, 0x1, 0x0   	BSF	_TRISAbits, 1
002240   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA2 = 1 ;      // Enable RA2 as analog input
002242   8538     bsf     0x38, 0x2, 0x1   	BSF	_ANSELAbits, 2, B
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA2 = 1 ;
002244   8492     bsf     0x92, 0x2, 0x0   	BSF	_TRISAbits, 2
002246   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA3 = 1 ;      // Enable RA3 as analog input
002248   8738     bsf     0x38, 0x3, 0x1   	BSF	_ANSELAbits, 3, B
                                           ;	.line	42; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA3 = 1 ;
00224a   8692     bsf     0x92, 0x3, 0x0   	BSF	_TRISAbits, 3
                                           ;	.line	44; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0 = 0x09 ;            // C12IN1- Goes to C1, Current of Phase-A
00224c   0e09     movlw   0x09             	MOVLW	0x09
00224e   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0 = 0x08 ;            // C12IN0- Goes to C2, Current of Phase-B
002250   0e08     movlw   0x08             	MOVLW	0x08
002252   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           ;	.line	47; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C1HYS = 0 ;     // Enable hysteresis for both comparators
002254   9677     bcf     0x77, 0x3, 0x0   	BCF	_CM2CON1bits, 3
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C2HYS = 0 ;           
002256   9477     bcf     0x77, 0x2, 0x0   	BCF	_CM2CON1bits, 2
002258   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00225a   ffd9
00225c   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  490 (0x01ea) bytes ( 0.37%)
                                           ;           	  245 (0x00f5) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.6 #9917 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_read_regs
                                           	global	_store_regs

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_registers__store_regs	code
                                           _store_regs:
                                           ;	.line	43; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void store_regs(uint8_t * i2c_regs, uint8_t num_regs) {
001ad4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001ad6   ffe5
001ad8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001ada   ffd9
001adc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001ade   ffe5
001ae0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001ae2   ffe5
001ae4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001ae6   ffe5
001ae8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001aea   ffe5
001aec   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001aee   ffe5
001af0   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001af2   ffe5
001af4   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001af6   ffe5
001af8   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001afa   ffe5
001afc   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001afe   ffe5
001b00   0e02     movlw   0x02             	MOVLW	0x02
001b02   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001b04   f000
001b06   0e03     movlw   0x03             	MOVLW	0x03
001b08   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001b0a   f001
001b0c   0e04     movlw   0x04             	MOVLW	0x04
001b0e   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001b10   f002
001b12   0e05     movlw   0x05             	MOVLW	0x05
001b14   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
001b16   f003
                                           ;	.line	46; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
001b18   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001b1a   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00127_DS_:
001b1c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001b1e   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
001b20   e22a     bc      0x001b76         	BC	_00129_DS_
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ; 
001b22   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
001b24   ffa9
                                           ;	.line	50; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001b26   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001b28   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	52; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
001b2a   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	val = EEDATA ;
001b2c   cfa8     movff   0xfa8, 0x005     	MOVFF	_EEDATA, r0x05
001b2e   f005
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	if (val != i2c_regs[i]) {
001b30   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001b32   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001b34   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001b36   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001b38   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001b3a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001b3c   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001b3e   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001b40   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001b42   c006     movff   0x006, 0xfe9     	MOVFF	r0x06, FSR0L
001b44   ffe9
001b46   c007     movff   0x007, 0xff3     	MOVFF	r0x07, PRODL
001b48   fff3
001b4a   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001b4c   ec7c     call    0x0022f8, 0x0    	CALL	__gptrget1
001b4e   f011
001b50   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001b52   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001b54   1806     xorwf   0x06, 0x0, 0x0   	XORWF	r0x06, W
001b56   e00d     bz      0x001b72         	BZ	_00128_DS_
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEDATA = i2c_regs[i] ;      // Prepare data
001b58   c006     movff   0x006, 0xfa8     	MOVFF	r0x06, _EEDATA
001b5a   ffa8
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001b5c   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001b5e   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 1 ;       // Allow write cycle
001b60   84a6     bsf     0xa6, 0x2, 0x0   	BSF	_EECON1bits, 2
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 0 ;        // Disable interrupts
001b62   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0x55 ;             // "magic" sequence for write
001b64   0e55     movlw   0x55             	MOVLW	0x55
001b66   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0xaa ;
001b68   0eaa     movlw   0xaa             	MOVLW	0xaa
001b6a   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WR = 1 ;         // Initiate write
001b6c   82a6     bsf     0xa6, 0x1, 0x0   	BSF	_EECON1bits, 1
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 1 ;        // Enable interrupts
001b6e   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 0 ;       // Prevent write cycle
001b70   94a6     bcf     0xa6, 0x2, 0x0   	BCF	_EECON1bits, 2
                                           _00128_DS_:
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001b72   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
001b74   d7d3     bra     0x001b1c         	BRA	_00127_DS_
                                           _00129_DS_:
001b76   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
001b78   f008
001b7a   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001b7c   f007
001b7e   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001b80   f006
001b82   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001b84   f005
001b86   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001b88   f004
001b8a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001b8c   f003
001b8e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001b90   f002
001b92   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001b94   f001
001b96   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001b98   f000
001b9a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001b9c   ffd9
001b9e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_registers__read_regs	code
                                           _read_regs:
                                           ;	.line	29; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void read_regs(uint8_t * i2c_regs, uint8_t num_regs) {
001d92   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001d94   ffe5
001d96   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001d98   ffd9
001d9a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001d9c   ffe5
001d9e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001da0   ffe5
001da2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001da4   ffe5
001da6   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001da8   ffe5
001daa   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001dac   ffe5
001dae   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001db0   ffe5
001db2   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001db4   ffe5
001db6   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001db8   ffe5
001dba   0e02     movlw   0x02             	MOVLW	0x02
001dbc   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001dbe   f000
001dc0   0e03     movlw   0x03             	MOVLW	0x03
001dc2   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001dc4   f001
001dc6   0e04     movlw   0x04             	MOVLW	0x04
001dc8   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001dca   f002
001dcc   0e05     movlw   0x05             	MOVLW	0x05
001dce   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
001dd0   f003
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
001dd2   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001dd4   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00107_DS_:
001dd6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001dd8   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
001dda   e219     bc      0x001e0e         	BC	_00109_DS_
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ;              // Read I2C address from 00 location
001ddc   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
001dde   ffa9
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001de0   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	37; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001de2   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
001de4   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	i2c_regs[i] = EEDATA ;
001de6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001de8   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001dea   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001dec   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001dee   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001df0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001df2   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001df4   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001df6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001df8   cfa8     movff   0xfa8, 0xfe5     	MOVFF	_EEDATA, POSTDEC1
001dfa   ffe5
001dfc   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
001dfe   ffe9
001e00   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
001e02   fff3
001e04   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001e06   ec9b     call    0x002336, 0x0    	CALL	__gptrput1
001e08   f011
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001e0a   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
001e0c   d7e4     bra     0x001dd6         	BRA	_00107_DS_
                                           _00109_DS_:
001e0e   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001e10   f007
001e12   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001e14   f006
001e16   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001e18   f005
001e1a   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001e1c   f004
001e1e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001e20   f003
001e22   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001e24   f002
001e26   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001e28   f001
001e2a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001e2c   f000
001e2e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001e30   ffd9
001e32   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  366 (0x016e) bytes ( 0.28%)
                                           ;           	  183 (0x00b7) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    9 (0x0009) bytes


                                           	end
