gplink-1.5.2 #1313 (Aug 28 2018)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 08/09/18  23:47:22


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.2 #10526 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec
                                           	CONFIG	FOSC=HSHP
                                           	CONFIG	PLLCFG=ON
                                           	CONFIG	WDTEN=SWON
                                           	CONFIG	XINST=OFF
                                           	CONFIG	CCP3MX=PORTB5
                                           	CONFIG	P2BMX=PORTC0
                                           	CONFIG	MCLRE=EXTMCLR


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_zero_cross
                                           	global	_state
                                           	global	_micro_steps
                                           	global	_set_amp
                                           	global	_max_amp
                                           	global	_t_blank
                                           	global	_pid_kp
                                           	global	_pid_ki
                                           	global	_dir
                                           	global	_skip
                                           	global	_pwm_lu
                                           	global	_i2c_address
                                           	global	_i2c_counter
                                           	global	_i2c_reg_addr
                                           	global	_i2c_regs
                                           	global	_i2c_dirty
                                           	global	_i2c_buf
                                           	global	_adc_wdt
                                           	global	_i2cSetup
                                           	global	_activeInts
                                           	global	_idleInts
                                           	global	_prep_pwm_lu
                                           	global	_set_op_vars
                                           	global	_delay_ms
                                           	global	_main
                                           	global	___EEPROM

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__moduchar
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	__max_out
                                           	extern	__min_out
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_set_max_out
                                           	extern	_set_min_out
                                           	extern	_init_result
                                           	extern	_calc_pi
                                           	extern	_read_regs
                                           	extern	_store_regs
                                           	extern	_ioSetup
                                           	extern	_pwmSetup
                                           	extern	_compsSetup
                                           	extern	_intSetup
                                           	extern	_adc_setup
                                           	extern	_resetCheck
                                           	extern	_pwmOut
                                           	extern	___uint2fs
                                           	extern	___fsdiv
                                           	extern	___sint2fs
                                           	extern	___fsmul
                                           	extern	___fsadd
                                           	extern	___fs2uint
                                           	extern	__mulint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           _pwm_base	db	0x00, 0x00, 0x32, 0x00, 0x64, 0x00, 0x95, 0x00, 0xc4, 0x00, 0xf1, 0x00
                                           	db	0x1c, 0x01, 0x45, 0x01, 0x6a, 0x01, 0x8c, 0x01, 0xaa, 0x01, 0xc4, 0x01
                                           	db	0xd9, 0x01, 0xea, 0x01, 0xf6, 0x01, 0xfe, 0x01, 0x00, 0x02, 0xfe, 0x01
                                           	db	0xf6, 0x01, 0xea, 0x01, 0xd9, 0x01, 0xc4, 0x01, 0xaa, 0x01, 0x8c, 0x01
                                           	db	0x6a, 0x01, 0x45, 0x01, 0x1c, 0x01, 0xf1, 0x00, 0xc4, 0x00, 0x95, 0x00
                                           	db	0x64, 0x00, 0x32, 0x00, 0x00, 0x00, 0xce, 0xff, 0x9c, 0xff, 0x6b, 0xff
                                           	db	0x3c, 0xff, 0x0f, 0xff, 0xe4, 0xfe, 0xbb, 0xfe, 0x96, 0xfe, 0x74, 0xfe
                                           	db	0x56, 0xfe, 0x3b, 0xfe, 0x27, 0xfe, 0x16, 0xfe, 0x0a, 0xfe, 0x02, 0xfe
                                           	db	0x00, 0xfe, 0x02, 0xfe, 0x0a, 0xfe, 0x16, 0xfe, 0x27, 0xfe, 0x3c, 0xfe
                                           	db	0x56, 0xfe, 0x74, 0xfe, 0x96, 0xfe, 0xbb, 0xfe, 0xe4, 0xfe, 0x0f, 0xff
                                           	db	0x3c, 0xff, 0x6b, 0xff, 0x9c, 0xff, 0xce, 0xff


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1

                                           udata_stepperCon_0	udata
                                           _zero_cross	res	2

                                           udata_stepperCon_1	udata
                                           _adc_wdt	res	2

                                           udata_stepperCon_2	udata
                                           _state	res	1

                                           udata_stepperCon_3	udata
                                           _dir	res	1

                                           udata_stepperCon_4	udata
                                           _skip	res	1

                                           udata_stepperCon_5	udata
                                           _micro_steps	res	1

                                           udata_stepperCon_6	udata
                                           _i2c_buf	res	1

                                           udata_stepperCon_7	udata
                                           _i2c_counter	res	1

                                           udata_stepperCon_8	udata
                                           _i2c_reg_addr	res	1

                                           udata_stepperCon_9	udata
                                           _i2c_regs	res	11

                                           udata_stepperCon_10	udata
                                           _i2c_dirty	res	1

                                           udata_stepperCon_11	udata
                                           _i2c_address	res	1

                                           udata_stepperCon_12	udata
                                           _set_amp	res	2

                                           udata_stepperCon_13	udata
                                           _max_amp	res	2

                                           udata_stepperCon_14	udata
                                           _pwm_lu	res	128

                                           udata_stepperCon_15	udata
                                           _t_blank	res	1

                                           udata_stepperCon_16	udata
                                           _pid_kp	res	2

                                           udata_stepperCon_17	udata
                                           _pid_ki	res	2

                                           udata_stepperCon_18	udata
                                           _main_pi_result_a_65536_99	res	8

                                           udata_stepperCon_19	udata
                                           _main_pi_result_b_65536_99	res	8

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x1_highInt	code	0X000008
                                           ivec_0x1_highInt:
000008   ef07     goto    0x00200e         	GOTO	_highInt
00000a   f010

                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x2_lowInt	code	0X000018
                                           ivec_0x2_lowInt:
000018   efda     goto    0x001bb4         	GOTO	_lowInt
00001a   f00d

                                           ; ; Starting pCode block for absolute Ival
                                           S_stepperCon____EEPROM	code	0XF00000
                                           ___EEPROM:
                                           	DB	0x44, 0x01, 0x78, 0x05, 0x3c, 0x07, 0x18, 0x1e, 0x00, 0x0a, 0x00






                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stepperCon__main	code
                                           _main:
                                           ;	.line	384; stepperCon.c	int16_t pwm_a = 0, pwm_b = 0 ;
00001c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
00001e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000020   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000022   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           ;	.line	390; stepperCon.c	int16_t step_a = 0 ;                         // Current phase A step
000024   6a04     clrf    0x04, 0x0        	CLRF	r0x04
000026   6a05     clrf    0x05, 0x0        	CLRF	r0x05
                                           ;	.line	391; stepperCon.c	int16_t step_b = 0 ;                         // Current phase B step
000028   6a06     clrf    0x06, 0x0        	CLRF	r0x06
00002a   6a07     clrf    0x07, 0x0        	CLRF	r0x07
                                           ;	.line	393; stepperCon.c	ioSetup() ;                 // Setup IO ports
00002c   ecad     call    0x002b5a, 0x0    	CALL	_ioSetup
00002e   f015
                                           ;	.line	396; stepperCon.c	if(RCONbits.POR) resetCheck() ;
000030   a2d0     btfss   0xd0, 0x1, 0x0   	BTFSS	_RCONbits, 1
000032   d002     bra     0x000038         	BRA	_00314_DS_
000034   ecee     call    0x0023dc, 0x0    	CALL	_resetCheck
000036   f011
                                           _00314_DS_:
                                           ;	.line	400; stepperCon.c	RCONbits.POR = 1 ;
000038   82d0     bsf     0xd0, 0x1, 0x0   	BSF	_RCONbits, 1
                                           ;	.line	401; stepperCon.c	RCONbits.BOR = 1 ;
00003a   80d0     bsf     0xd0, 0x0, 0x0   	BSF	_RCONbits, 0
                                           ;	.line	403; stepperCon.c	read_regs(i2c_regs, sizeof(i2c_regs)) ;  // Populate I2C registers from EEPROM
00003c   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
00003e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000040   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
000042   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000044   0e80     movlw   0x80             	MOVLW	0x80
000046   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000048   0e0b     movlw   0x0b             	MOVLW	0x0b
00004a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00004c   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00004e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000050   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000052   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000054   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000056   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000058   ec3f     call    0x00247e, 0x0    	CALL	_read_regs
00005a   f012
00005c   0e04     movlw   0x04             	MOVLW	0x04
00005e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	404; stepperCon.c	set_op_vars() ;             // Set operation variables from I2C registers
000060   ecd3     call    0x0021a6, 0x0    	CALL	_set_op_vars
000062   f010
000064   0102     movlb   0x2              	BANKSEL	_i2c_dirty
                                           ;	.line	405; stepperCon.c	i2c_dirty = 0 ;             // Clear I2C dirty flag
000066   6b97     clrf    0x97, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	407; stepperCon.c	i2cSetup() ;                // Setup I2C I/F
000068   ec0f     call    0x002c1e, 0x0    	CALL	_i2cSetup
00006a   f016
                                           ;	.line	408; stepperCon.c	intSetup() ;                // Interrupts setup
00006c   ec23     call    0x002c46, 0x0    	CALL	_intSetup
00006e   f016
                                           ;	.line	409; stepperCon.c	compsSetup() ;
000070   ec26     call    0x00284c, 0x0    	CALL	_compsSetup
000072   f014
                                           ;	.line	410; stepperCon.c	adc_setup() ;
000074   ec8c     call    0x002b18, 0x0    	CALL	_adc_setup
000076   f015
                                           ;	.line	411; stepperCon.c	idleInts() ;                // Set interrupts to 'idle' state
000078   ec49     call    0x002c92, 0x0    	CALL	_idleInts
00007a   f016
00007c   0102     movlb   0x2              	BANKSEL	_state
                                           ;	.line	414; stepperCon.c	state = IDLE ;              // Start in 'idle' state
00007e   6b90     clrf    0x90, 0x1        	CLRF	_state, B
                                           ;	.line	417; stepperCon.c	PORTDbits.RD2 = 1 ;     // Turn blue LED on
000080   8483     bsf     0x83, 0x2, 0x0   	BSF	_PORTDbits, 2
                                           ;	.line	418; stepperCon.c	delay_ms(300) ;    
000082   0e01     movlw   0x01             	MOVLW	0x01
000084   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000086   0e2c     movlw   0x2c             	MOVLW	0x2c
000088   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00008a   ec5f     call    0x0028be, 0x0    	CALL	_delay_ms
00008c   f014
00008e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000090   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	419; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
000092   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
                                           ;	.line	421; stepperCon.c	WDTCON = 1 ;        // Enable watchdog timer
000094   0e01     movlw   0x01             	MOVLW	0x01
000096   6ed1     movwf   0xd1, 0x0        	MOVWF	_WDTCON
                                           _00349_DS_:
000098   0004     clrwdt                   	clrwdt	
                                           ;	.line	427; stepperCon.c	switch(state) {
00009a   c290     movff   0x290, 0x008     	MOVFF	_state, r0x08
00009c   f008
00009e   0e07     movlw   0x07             	MOVLW	0x07
0000a0   5c08     subwf   0x08, 0x0, 0x0   	SUBWF	r0x08, W
0000a2   e2fa     bc      0x000098         	BC	_00349_DS_
0000a4   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
0000a6   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
0000a8   3408     rlcf    0x08, 0x0, 0x0   	RLCF	r0x08, W
0000aa   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
0000ac   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
0000ae   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
0000b0   0bfc     andlw   0xfc             	ANDLW	0xfc
0000b2   0fc2     addlw   0xc2             	ADDLW	LOW(_00434_DS_)
0000b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000b6   0e00     movlw   0x00             	MOVLW	HIGH(_00434_DS_)
0000b8   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
0000ba   0e00     movlw   0x00             	MOVLW	UPPER(_00434_DS_)
0000bc   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
0000be   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0000c0   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00434_DS_:
0000c2   ef81     goto    0x000502         	GOTO	_00342_DS_
0000c4   f002
0000c6   ef6f     goto    0x0000de         	GOTO	_00315_DS_
0000c8   f000
0000ca   ef58     goto    0x0004b0         	GOTO	_00336_DS_
0000cc   f002
0000ce   ef8b     goto    0x000316         	GOTO	_00334_DS_
0000d0   f001
0000d2   eff2     goto    0x0003e4         	GOTO	_00335_DS_
0000d4   f001
0000d6   ef4c     goto    0x000098         	GOTO	_00349_DS_
0000d8   f000
0000da   ef0c     goto    0x000218         	GOTO	_00319_DS_
0000dc   f001
                                           _00315_DS_:
                                           ;	.line	429; stepperCon.c	state = RUNNING ;
0000de   0e02     movlw   0x02             	MOVLW	0x02
0000e0   0102     movlb   0x2              	BANKSEL	_state
0000e2   6f90     movwf   0x90, 0x1        	MOVWF	_state, B
                                           ;	.line	432; stepperCon.c	LATDbits.LATD2 = 1 ;
0000e4   848c     bsf     0x8c, 0x2, 0x0   	BSF	_LATDbits, 2
                                           ; ;multiply variable :_micro_steps by variable _dir and store in _skip
0000e6   0102     movlb   0x2              	BANKSEL	_dir
                                           ;	.line	434; stepperCon.c	skip = dir * micro_steps ;
0000e8   5191     movf    0x91, 0x0, 0x1   	MOVF	_dir, W, B
0000ea   0102     movlb   0x2              	BANKSEL	_micro_steps
0000ec   0393     mulwf   0x93, 0x1        	MULWF	_micro_steps, B
0000ee   cff3     movff   0xff3, 0x292     	MOVFF	PRODL, _skip
0000f0   f292
0000f2   0102     movlb   0x2              	BANKSEL	_micro_steps
                                           ;	.line	437; stepperCon.c	if (micro_steps == STEP_1) step_a = STEPS / 2 ;
0000f4   5193     movf    0x93, 0x0, 0x1   	MOVF	_micro_steps, W, B
0000f6   0a10     xorlw   0x10             	XORLW	0x10
0000f8   e104     bnz     0x000102         	BNZ	_00317_DS_
0000fa   0e08     movlw   0x08             	MOVLW	0x08
0000fc   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0000fe   6a05     clrf    0x05, 0x0        	CLRF	r0x05
000100   d002     bra     0x000106         	BRA	_00318_DS_
                                           _00317_DS_:
                                           ;	.line	438; stepperCon.c	else step_a = 0 ;
000102   6a04     clrf    0x04, 0x0        	CLRF	r0x04
000104   6a05     clrf    0x05, 0x0        	CLRF	r0x05
                                           _00318_DS_:
                                           ;	.line	441; stepperCon.c	step_b = step_a + STEPS ;
000106   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000108   0f10     addlw   0x10             	ADDLW	0x10
00010a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00010c   0e00     movlw   0x00             	MOVLW	0x00
00010e   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000110   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
                                           ;	.line	443; stepperCon.c	init_result(&pi_result_a, pid_kp, pid_ki) ;
000112   0e00     movlw   0x00             	MOVLW	HIGH(_main_pi_result_a_65536_99)
000114   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000116   0eec     movlw   0xec             	MOVLW	LOW(_main_pi_result_a_65536_99)
000118   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00011a   0e80     movlw   0x80             	MOVLW	0x80
00011c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00011e   0102     movlb   0x2              	BANKSEL	(_pid_ki + 1)
000120   5183     movf    0x83, 0x0, 0x1   	MOVF	(_pid_ki + 1), W, B
000122   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000124   0102     movlb   0x2              	BANKSEL	_pid_ki
000126   5182     movf    0x82, 0x0, 0x1   	MOVF	_pid_ki, W, B
000128   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00012a   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
00012c   5181     movf    0x81, 0x0, 0x1   	MOVF	(_pid_kp + 1), W, B
00012e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000130   0102     movlb   0x2              	BANKSEL	_pid_kp
000132   5180     movf    0x80, 0x0, 0x1   	MOVF	_pid_kp, W, B
000134   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000136   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000138   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00013a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00013c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00013e   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000140   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000142   ec05     call    0x001e0a, 0x0    	CALL	_init_result
000144   f00f
000146   0e07     movlw   0x07             	MOVLW	0x07
000148   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	444; stepperCon.c	init_result(&pi_result_b, pid_kp, pid_ki) ;
00014a   0e00     movlw   0x00             	MOVLW	HIGH(_main_pi_result_b_65536_99)
00014c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00014e   0ef4     movlw   0xf4             	MOVLW	LOW(_main_pi_result_b_65536_99)
000150   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000152   0e80     movlw   0x80             	MOVLW	0x80
000154   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000156   0102     movlb   0x2              	BANKSEL	(_pid_ki + 1)
000158   5183     movf    0x83, 0x0, 0x1   	MOVF	(_pid_ki + 1), W, B
00015a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00015c   0102     movlb   0x2              	BANKSEL	_pid_ki
00015e   5182     movf    0x82, 0x0, 0x1   	MOVF	_pid_ki, W, B
000160   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000162   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
000164   5181     movf    0x81, 0x0, 0x1   	MOVF	(_pid_kp + 1), W, B
000166   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000168   0102     movlb   0x2              	BANKSEL	_pid_kp
00016a   5180     movf    0x80, 0x0, 0x1   	MOVF	_pid_kp, W, B
00016c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00016e   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000170   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000172   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000174   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000176   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000178   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00017a   ec05     call    0x001e0a, 0x0    	CALL	_init_result
00017c   f00f
00017e   0e07     movlw   0x07             	MOVLW	0x07
000180   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	446; stepperCon.c	prep_pwm_lu() ;            // prepare PWM lookup table
000182   ece6     call    0x0013cc, 0x0    	CALL	_prep_pwm_lu
000184   f009
                                           ;	.line	448; stepperCon.c	pwm_a = pwm_lu[step_a] ;
000186   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000188   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00018a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00018c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00018e   0e00     movlw   0x00             	MOVLW	0x00
000190   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000192   0e02     movlw   0x02             	MOVLW	0x02
000194   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000196   ec90     call    0x002520, 0x0    	CALL	__mulint
000198   f012
00019a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00019c   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
00019e   f009
0001a0   0e04     movlw   0x04             	MOVLW	0x04
0001a2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0001a4   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0001a6   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0001a8   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0001aa   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
0001ac   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
0001ae   ffe9
0001b0   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
0001b2   ffea
0001b4   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
0001b6   f000
0001b8   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0001ba   f001
                                           ;	.line	449; stepperCon.c	pwm_b = pwm_lu[step_b] ;
0001bc   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0001be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001c0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0001c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001c4   0e00     movlw   0x00             	MOVLW	0x00
0001c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001c8   0e02     movlw   0x02             	MOVLW	0x02
0001ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001cc   ec90     call    0x002520, 0x0    	CALL	__mulint
0001ce   f012
0001d0   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0001d2   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
0001d4   f009
0001d6   0e04     movlw   0x04             	MOVLW	0x04
0001d8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0001da   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0001dc   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0001de   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0001e0   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
0001e2   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
0001e4   ffe9
0001e6   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
0001e8   ffea
0001ea   cfee     movff   0xfee, 0x002     	MOVFF	POSTINC0, r0x02
0001ec   f002
0001ee   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
0001f0   f003
                                           ;	.line	451; stepperCon.c	LATAbits.LATA4 = 1 ;
0001f2   8889     bsf     0x89, 0x4, 0x0   	BSF	_LATAbits, 4
                                           ;	.line	452; stepperCon.c	LATAbits.LATA5 = 1 ; 
0001f4   8a89     bsf     0x89, 0x5, 0x0   	BSF	_LATAbits, 5
                                           ;	.line	453; stepperCon.c	LATCbits.LATC5 = 0 ;
0001f6   9a8b     bcf     0x8b, 0x5, 0x0   	BCF	_LATCbits, 5
0001f8   0102     movlb   0x2              	BANKSEL	_t_blank
                                           ;	.line	455; stepperCon.c	pwmSetup(t_blank) ;        // Activate PWM
0001fa   5199     movf    0x99, 0x0, 0x1   	MOVF	_t_blank, W, B
0001fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001fe   ec35     call    0x001a6a, 0x0    	CALL	_pwmSetup
000200   f00d
000202   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	456; stepperCon.c	pwmOut() ;
000204   ec64     call    0x002ac8, 0x0    	CALL	_pwmOut
000206   f015
                                           ;	.line	457; stepperCon.c	activeInts() ;             // Set active state interrupts
000208   eccb     call    0x002b96, 0x0    	CALL	_activeInts
00020a   f015
                                           ;	.line	459; stepperCon.c	ADCON0bits.CHS = 0b0001 ;  // Set capture to RA0
00020c   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
00020e   0b83     andlw   0x83             	ANDLW	0x83
000210   0904     iorlw   0x04             	IORLW	0x04
000212   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
                                           ;	.line	460; stepperCon.c	ADCON0bits.GO = 1 ;
000214   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           ;	.line	462; stepperCon.c	break ;
000216   d740     bra     0x000098         	BRA	_00349_DS_
                                           _00319_DS_:
                                           ;	.line	465; stepperCon.c	state = RUNNING ;
000218   0e02     movlw   0x02             	MOVLW	0x02
00021a   0102     movlb   0x2              	BANKSEL	_state
00021c   6f90     movwf   0x90, 0x1        	MOVWF	_state, B
                                           ;	.line	467; stepperCon.c	step_a += skip ;
00021e   c292     movff   0x292, 0x008     	MOVFF	_skip, r0x08
000220   f008
000222   6a09     clrf    0x09, 0x0        	CLRF	r0x09
000224   0102     movlb   0x2              	BANKSEL	_skip
000226   bf92     btfsc   0x92, 0x7, 0x1   	BTFSC	_skip, 7, B
000228   6809     setf    0x09, 0x0        	SETF	r0x09
00022a   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00022c   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00022e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000230   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
                                           ;	.line	468; stepperCon.c	step_b += skip ;
000232   c292     movff   0x292, 0x008     	MOVFF	_skip, r0x08
000234   f008
000236   6a09     clrf    0x09, 0x0        	CLRF	r0x09
000238   0102     movlb   0x2              	BANKSEL	_skip
00023a   bf92     btfsc   0x92, 0x7, 0x1   	BTFSC	_skip, 7, B
00023c   6809     setf    0x09, 0x0        	SETF	r0x09
00023e   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000240   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
000242   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000244   2207     addwfc  0x07, 0x1, 0x0   	ADDWFC	r0x07, F
                                           ;	.line	470; stepperCon.c	if (step_a > FULL_CYCLE - 1) step_a -= FULL_CYCLE ;
000246   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000248   0f80     addlw   0x80             	ADDLW	0x80
00024a   0f80     addlw   0x80             	ADDLW	0x80
00024c   e102     bnz     0x000252         	BNZ	_00437_DS_
00024e   0e40     movlw   0x40             	MOVLW	0x40
000250   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00437_DS_:
000252   e305     bnc     0x00025e         	BNC	_00323_DS_
000254   0ec0     movlw   0xc0             	MOVLW	0xc0
000256   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000258   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00025a   0605     decf    0x05, 0x1, 0x0   	DECF	r0x05, F
00025c   d008     bra     0x00026e         	BRA	_00324_DS_
                                           _00323_DS_:
                                           ;	.line	471; stepperCon.c	else if (step_a < 0) step_a += FULL_CYCLE ;
00025e   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
000260   ae05     btfss   0x05, 0x7, 0x0   	BTFSS	r0x05, 7
000262   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000264   e304     bnc     0x00026e         	BNC	_00324_DS_
000266   0e40     movlw   0x40             	MOVLW	0x40
000268   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00026a   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00026c   2a05     incf    0x05, 0x1, 0x0   	INCF	r0x05, F
                                           _00324_DS_:
                                           ;	.line	473; stepperCon.c	if (step_b > FULL_CYCLE - 1) step_b -= FULL_CYCLE ; 
00026e   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000270   0f80     addlw   0x80             	ADDLW	0x80
000272   0f80     addlw   0x80             	ADDLW	0x80
000274   e102     bnz     0x00027a         	BNZ	_00438_DS_
000276   0e40     movlw   0x40             	MOVLW	0x40
000278   5c06     subwf   0x06, 0x0, 0x0   	SUBWF	r0x06, W
                                           _00438_DS_:
00027a   e305     bnc     0x000286         	BNC	_00328_DS_
00027c   0ec0     movlw   0xc0             	MOVLW	0xc0
00027e   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
000280   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
000282   0607     decf    0x07, 0x1, 0x0   	DECF	r0x07, F
000284   d008     bra     0x000296         	BRA	_00329_DS_
                                           _00328_DS_:
                                           ;	.line	474; stepperCon.c	else if (step_b < 0) step_b += FULL_CYCLE ;
000286   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
000288   ae07     btfss   0x07, 0x7, 0x0   	BTFSS	r0x07, 7
00028a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00028c   e304     bnc     0x000296         	BNC	_00329_DS_
00028e   0e40     movlw   0x40             	MOVLW	0x40
000290   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
000292   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000294   2a07     incf    0x07, 0x1, 0x0   	INCF	r0x07, F
                                           _00329_DS_:
                                           ;	.line	476; stepperCon.c	pwm_a = pwm_lu[step_a] ;
000296   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000298   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00029a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00029c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00029e   0e00     movlw   0x00             	MOVLW	0x00
0002a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002a2   0e02     movlw   0x02             	MOVLW	0x02
0002a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002a6   ec90     call    0x002520, 0x0    	CALL	__mulint
0002a8   f012
0002aa   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0002ac   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
0002ae   f009
0002b0   0e04     movlw   0x04             	MOVLW	0x04
0002b2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0002b4   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0002b6   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0002b8   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0002ba   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
0002bc   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
0002be   ffe9
0002c0   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
0002c2   ffea
0002c4   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
0002c6   f000
0002c8   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0002ca   f001
                                           ;	.line	477; stepperCon.c	pwm_b = pwm_lu[step_b] ;
0002cc   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0002ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002d0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0002d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002d4   0e00     movlw   0x00             	MOVLW	0x00
0002d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002d8   0e02     movlw   0x02             	MOVLW	0x02
0002da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002dc   ec90     call    0x002520, 0x0    	CALL	__mulint
0002de   f012
0002e0   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0002e2   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
0002e4   f009
0002e6   0e04     movlw   0x04             	MOVLW	0x04
0002e8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0002ea   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0002ec   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0002ee   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0002f0   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
0002f2   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
0002f4   ffe9
0002f6   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
0002f8   ffea
0002fa   cfee     movff   0xfee, 0x002     	MOVFF	POSTINC0, r0x02
0002fc   f002
0002fe   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
000300   f003
                                           ;	.line	479; stepperCon.c	if (!PIE2bits.C2IE && !PIE2bits.C1IE && !ADCON0bits.GO) {
000302   baa0     btfsc   0xa0, 0x5, 0x0   	BTFSC	_PIE2bits, 5
000304   d6c9     bra     0x000098         	BRA	_00349_DS_
000306   bca0     btfsc   0xa0, 0x6, 0x0   	BTFSC	_PIE2bits, 6
000308   d6c7     bra     0x000098         	BRA	_00349_DS_
00030a   b2c2     btfsc   0xc2, 0x1, 0x0   	BTFSC	_ADCON0bits, 1
00030c   d6c5     bra     0x000098         	BRA	_00349_DS_
                                           	;	VOLATILE READ - BEGIN
00030e   5079     movf    0x79, 0x0, 0x0   	MOVF	_CM1CON0, W
                                           	;	VOLATILE READ - END
                                           ;	.line	481; stepperCon.c	PIR2bits.C1IF = 0 ; 
000310   9ca1     bcf     0xa1, 0x6, 0x0   	BCF	_PIR2bits, 6
                                           ;	.line	482; stepperCon.c	PIE2bits.C1IE = 1 ;
000312   8ca0     bsf     0xa0, 0x6, 0x0   	BSF	_PIE2bits, 6
                                           ;	.line	485; stepperCon.c	break ;
000314   d6c1     bra     0x000098         	BRA	_00349_DS_
                                           _00334_DS_:
                                           ;	.line	488; stepperCon.c	state = RUNNING ;
000316   0e02     movlw   0x02             	MOVLW	0x02
000318   0102     movlb   0x2              	BANKSEL	_state
00031a   6f90     movwf   0x90, 0x1        	MOVWF	_state, B
                                           ;	.line	490; stepperCon.c	adc_res = ADRESH ;
00031c   cfc4     movff   0xfc4, 0x008     	MOVFF	_ADRESH, r0x08
00031e   f008
000320   6a09     clrf    0x09, 0x0        	CLRF	r0x09
                                           ;	.line	491; stepperCon.c	adc_res <<= 8 ;
000322   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000324   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
000326   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
                                           ;	.line	492; stepperCon.c	adc_res += ADRESL ;
000328   cfc3     movff   0xfc3, 0x008     	MOVFF	_ADRESL, r0x08
00032a   f008
00032c   6a09     clrf    0x09, 0x0        	CLRF	r0x09
00032e   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000330   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
000332   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
000334   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
                                           	;	VOLATILE READ - BEGIN
000336   5078     movf    0x78, 0x0, 0x0   	MOVF	_CM2CON0, W
                                           	;	VOLATILE READ - END
                                           ;	.line	495; stepperCon.c	PIR2bits.C2IF = 0 ; 
000338   9aa1     bcf     0xa1, 0x5, 0x0   	BCF	_PIR2bits, 5
                                           ;	.line	496; stepperCon.c	PIE2bits.C2IE = 1 ;
00033a   8aa0     bsf     0xa0, 0x5, 0x0   	BSF	_PIE2bits, 5
                                           ;	.line	498; stepperCon.c	LATCbits.LATC5 = 1 ;
00033c   8a8b     bsf     0x8b, 0x5, 0x0   	BSF	_LATCbits, 5
                                           ;	.line	499; stepperCon.c	calc_pi(&pi_result_a, adc_res, pwm_a) ;
00033e   0e00     movlw   0x00             	MOVLW	HIGH(_main_pi_result_a_65536_99)
000340   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
000342   0eec     movlw   0xec             	MOVLW	LOW(_main_pi_result_a_65536_99)
000344   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000346   0e80     movlw   0x80             	MOVLW	0x80
000348   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
00034a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00034c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00034e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000350   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000352   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000354   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000356   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000358   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00035a   500c     movf    0x0c, 0x0, 0x0   	MOVF	r0x0c, W
00035c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00035e   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
000360   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000362   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000364   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000366   eca4     call    0x000548, 0x0    	CALL	_calc_pi
000368   f002
00036a   0e07     movlw   0x07             	MOVLW	0x07
00036c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00036e   0100     movlb   0x0              	BANKSEL	(_main_pi_result_a_65536_99 + 1)
                                           ;	.line	501; stepperCon.c	CCPR2L = pi_result_a.output >> 2 ;
000370   35ed     rlcf    0xed, 0x0, 0x1   	RLCF	(_main_pi_result_a_65536_99 + 1), W, B
000372   0100     movlb   0x0              	BANKSEL	(_main_pi_result_a_65536_99 + 1)
000374   31ed     rrcf    0xed, 0x0, 0x1   	RRCF	(_main_pi_result_a_65536_99 + 1), W, B
000376   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000378   0100     movlb   0x0              	BANKSEL	_main_pi_result_a_65536_99
00037a   31ec     rrcf    0xec, 0x0, 0x1   	RRCF	_main_pi_result_a_65536_99, W, B
00037c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00037e   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
000380   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
000382   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
000384   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000386   6e67     movwf   0x67, 0x0        	MOVWF	_CCPR2L
000388   0100     movlb   0x0              	BANKSEL	_main_pi_result_a_65536_99
                                           ;	.line	502; stepperCon.c	CCP2CONbits.DC2B = pi_result_a.output ;
00038a   51ec     movf    0xec, 0x0, 0x1   	MOVF	_main_pi_result_a_65536_99, W, B
00038c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00038e   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000390   0b03     andlw   0x03             	ANDLW	0x03
000392   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000394   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000396   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
000398   0bcf     andlw   0xcf             	ANDLW	0xcf
00039a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00039c   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	503; stepperCon.c	LATCbits.LATC5 = 0 ;
00039e   9a8b     bcf     0x8b, 0x5, 0x0   	BCF	_LATCbits, 5
0003a0   0100     movlb   0x0              	BANKSEL	(_main_pi_result_a_65536_99 + 1)
                                           ;	.line	505; stepperCon.c	CCPR5L = pi_result_a.output >> 3 ;
0003a2   35ed     rlcf    0xed, 0x0, 0x1   	RLCF	(_main_pi_result_a_65536_99 + 1), W, B
0003a4   0100     movlb   0x0              	BANKSEL	(_main_pi_result_a_65536_99 + 1)
0003a6   31ed     rrcf    0xed, 0x0, 0x1   	RRCF	(_main_pi_result_a_65536_99 + 1), W, B
0003a8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0003aa   0100     movlb   0x0              	BANKSEL	_main_pi_result_a_65536_99
0003ac   31ec     rrcf    0xec, 0x0, 0x1   	RRCF	_main_pi_result_a_65536_99, W, B
0003ae   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0003b0   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
0003b2   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
0003b4   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
0003b6   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
0003b8   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
0003ba   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
0003bc   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0003be   010f     movlb   0xf              	BANKSEL	_CCPR5L
0003c0   6f55     movwf   0x55, 0x1        	MOVWF	_CCPR5L, B
0003c2   0100     movlb   0x0              	BANKSEL	_main_pi_result_a_65536_99
                                           ;	.line	506; stepperCon.c	CCP5CONbits.DC5B = pi_result_a.output >> 1 ;
0003c4   51ec     movf    0xec, 0x0, 0x1   	MOVF	_main_pi_result_a_65536_99, W, B
0003c6   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0003c8   4008     rrncf   0x08, 0x0, 0x0   	RRNCF	r0x08, W
0003ca   0b7f     andlw   0x7f             	ANDLW	0x7f
0003cc   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0003ce   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0003d0   0b03     andlw   0x03             	ANDLW	0x03
0003d2   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
0003d4   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0003d6   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
0003d8   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
0003da   0bcf     andlw   0xcf             	ANDLW	0xcf
0003dc   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0003de   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
0003e0   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ;	.line	508; stepperCon.c	break ;
0003e2   d65a     bra     0x000098         	BRA	_00349_DS_
                                           _00335_DS_:
                                           ;	.line	511; stepperCon.c	state = RUNNING ;
0003e4   0e02     movlw   0x02             	MOVLW	0x02
0003e6   0102     movlb   0x2              	BANKSEL	_state
0003e8   6f90     movwf   0x90, 0x1        	MOVWF	_state, B
                                           ;	.line	513; stepperCon.c	adc_res = ADRESH  ;
0003ea   cfc4     movff   0xfc4, 0x008     	MOVFF	_ADRESH, r0x08
0003ec   f008
0003ee   6a09     clrf    0x09, 0x0        	CLRF	r0x09
                                           ;	.line	514; stepperCon.c	adc_res <<= 8 ;
0003f0   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0003f2   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
0003f4   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
                                           ;	.line	515; stepperCon.c	adc_res += ADRESL ;
0003f6   cfc3     movff   0xfc3, 0x008     	MOVFF	_ADRESL, r0x08
0003f8   f008
0003fa   6a09     clrf    0x09, 0x0        	CLRF	r0x09
0003fc   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0003fe   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
000400   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
000402   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
                                           	;	VOLATILE READ - BEGIN
000404   5079     movf    0x79, 0x0, 0x0   	MOVF	_CM1CON0, W
                                           	;	VOLATILE READ - END
                                           ;	.line	518; stepperCon.c	PIR2bits.C1IF = 0 ; 
000406   9ca1     bcf     0xa1, 0x6, 0x0   	BCF	_PIR2bits, 6
                                           ;	.line	519; stepperCon.c	PIE2bits.C1IE = 1 ;
000408   8ca0     bsf     0xa0, 0x6, 0x0   	BSF	_PIE2bits, 6
                                           ;	.line	521; stepperCon.c	calc_pi(&pi_result_b, adc_res, pwm_b) ;
00040a   0e00     movlw   0x00             	MOVLW	HIGH(_main_pi_result_b_65536_99)
00040c   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
00040e   0ef4     movlw   0xf4             	MOVLW	LOW(_main_pi_result_b_65536_99)
000410   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000412   0e80     movlw   0x80             	MOVLW	0x80
000414   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
000416   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000418   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00041a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00041c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00041e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000420   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000422   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000424   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000426   500c     movf    0x0c, 0x0, 0x0   	MOVF	r0x0c, W
000428   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00042a   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
00042c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00042e   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000430   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000432   eca4     call    0x000548, 0x0    	CALL	_calc_pi
000434   f002
000436   0e07     movlw   0x07             	MOVLW	0x07
000438   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00043a   0100     movlb   0x0              	BANKSEL	(_main_pi_result_b_65536_99 + 1)
                                           ;	.line	523; stepperCon.c	CCPR1L = pi_result_b.output >> 2 ;
00043c   35f5     rlcf    0xf5, 0x0, 0x1   	RLCF	(_main_pi_result_b_65536_99 + 1), W, B
00043e   0100     movlb   0x0              	BANKSEL	(_main_pi_result_b_65536_99 + 1)
000440   31f5     rrcf    0xf5, 0x0, 0x1   	RRCF	(_main_pi_result_b_65536_99 + 1), W, B
000442   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000444   0100     movlb   0x0              	BANKSEL	_main_pi_result_b_65536_99
000446   31f4     rrcf    0xf4, 0x0, 0x1   	RRCF	_main_pi_result_b_65536_99, W, B
000448   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00044a   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
00044c   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
00044e   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
000450   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000452   6ebe     movwf   0xbe, 0x0        	MOVWF	_CCPR1L
000454   0100     movlb   0x0              	BANKSEL	_main_pi_result_b_65536_99
                                           ;	.line	524; stepperCon.c	CCP1CONbits.DC1B = pi_result_b.output ;
000456   51f4     movf    0xf4, 0x0, 0x1   	MOVF	_main_pi_result_b_65536_99, W, B
000458   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00045a   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00045c   0b03     andlw   0x03             	ANDLW	0x03
00045e   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000460   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000462   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
000464   0bcf     andlw   0xcf             	ANDLW	0xcf
000466   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000468   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
00046a   0100     movlb   0x0              	BANKSEL	(_main_pi_result_b_65536_99 + 1)
                                           ;	.line	528; stepperCon.c	CCPR4L = pi_result_b.output >> 3 ;
00046c   35f5     rlcf    0xf5, 0x0, 0x1   	RLCF	(_main_pi_result_b_65536_99 + 1), W, B
00046e   0100     movlb   0x0              	BANKSEL	(_main_pi_result_b_65536_99 + 1)
000470   31f5     rrcf    0xf5, 0x0, 0x1   	RRCF	(_main_pi_result_b_65536_99 + 1), W, B
000472   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000474   0100     movlb   0x0              	BANKSEL	_main_pi_result_b_65536_99
000476   31f4     rrcf    0xf4, 0x0, 0x1   	RRCF	_main_pi_result_b_65536_99, W, B
000478   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00047a   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
00047c   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
00047e   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
000480   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
000482   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
000484   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
000486   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000488   010f     movlb   0xf              	BANKSEL	_CCPR4L
00048a   6f58     movwf   0x58, 0x1        	MOVWF	_CCPR4L, B
00048c   0100     movlb   0x0              	BANKSEL	_main_pi_result_b_65536_99
                                           ;	.line	529; stepperCon.c	CCP4CONbits.DC4B = pi_result_b.output >> 1 ;
00048e   51f4     movf    0xf4, 0x0, 0x1   	MOVF	_main_pi_result_b_65536_99, W, B
000490   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000492   4008     rrncf   0x08, 0x0, 0x0   	RRNCF	r0x08, W
000494   0b7f     andlw   0x7f             	ANDLW	0x7f
000496   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000498   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00049a   0b03     andlw   0x03             	ANDLW	0x03
00049c   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00049e   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0004a0   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
0004a2   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
0004a4   0bcf     andlw   0xcf             	ANDLW	0xcf
0004a6   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0004a8   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
0004aa   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	531; stepperCon.c	break ;
0004ac   ef4c     goto    0x000098         	GOTO	_00349_DS_
0004ae   f000
                                           _00336_DS_:
0004b0   010f     movlb   0xf              	BANKSEL	_adc_wdt
                                           ;	.line	534; stepperCon.c	if(++adc_wdt > 600 && !ADCON0bits.GO) {
0004b2   3f32     incfsz  0x32, 0x1, 0x1   	INCFSZ	_adc_wdt, F, B
0004b4   d002     bra     0x0004ba         	BRA	_10313_DS_
0004b6   010f     movlb   0xf              	BANKSEL	(_adc_wdt + 1)
0004b8   2b33     incf    0x33, 0x1, 0x1   	INCF	(_adc_wdt + 1), F, B
                                           _10313_DS_:
0004ba   0e02     movlw   0x02             	MOVLW	0x02
0004bc   010f     movlb   0xf              	BANKSEL	(_adc_wdt + 1)
0004be   5d33     subwf   0x33, 0x0, 0x1   	SUBWF	(_adc_wdt + 1), W, B
0004c0   e103     bnz     0x0004c8         	BNZ	_00439_DS_
0004c2   0e59     movlw   0x59             	MOVLW	0x59
0004c4   010f     movlb   0xf              	BANKSEL	_adc_wdt
0004c6   5d32     subwf   0x32, 0x0, 0x1   	SUBWF	_adc_wdt, W, B
                                           _00439_DS_:
0004c8   e30b     bnc     0x0004e0         	BNC	_00338_DS_
0004ca   b2c2     btfsc   0xc2, 0x1, 0x0   	BTFSC	_ADCON0bits, 1
0004cc   d009     bra     0x0004e0         	BRA	_00338_DS_
0004ce   010f     movlb   0xf              	BANKSEL	_adc_wdt
                                           ;	.line	535; stepperCon.c	adc_wdt = 0 ;
0004d0   6b32     clrf    0x32, 0x1        	CLRF	_adc_wdt, B
0004d2   010f     movlb   0xf              	BANKSEL	(_adc_wdt + 1)
0004d4   6b33     clrf    0x33, 0x1        	CLRF	(_adc_wdt + 1), B
                                           ;	.line	536; stepperCon.c	ADCON0bits.CHS = 0b0001 ;  // Set capture to RA0
0004d6   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
0004d8   0b83     andlw   0x83             	ANDLW	0x83
0004da   0904     iorlw   0x04             	IORLW	0x04
0004dc   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
                                           ;	.line	537; stepperCon.c	ADCON0bits.GO = 1 ;
0004de   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           _00338_DS_:
                                           ;	.line	541; stepperCon.c	if (!PORTBbits.RB3) {
0004e0   b681     btfsc   0x81, 0x3, 0x0   	BTFSC	_PORTBbits, 3
0004e2   ef4c     goto    0x000098         	GOTO	_00349_DS_
0004e4   f000
                                           ;	.line	542; stepperCon.c	INTCONbits.GIE = 0 ;
0004e6   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	543; stepperCon.c	idleInts() ;
0004e8   ec49     call    0x002c92, 0x0    	CALL	_idleInts
0004ea   f016
                                           ;	.line	545; stepperCon.c	LATAbits.LATA4 = 0 ;            // Shut phases down
0004ec   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	546; stepperCon.c	LATAbits.LATA5 = 0 ; 
0004ee   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
                                           ;	.line	548; stepperCon.c	ECCP2ASbits.CCP2ASE = 1    ;    // Shutdown PWM 
0004f0   8e64     bsf     0x64, 0x7, 0x0   	BSF	_ECCP2ASbits, 7
                                           ;	.line	549; stepperCon.c	ECCP1ASbits.CCP1ASE = 1    ;    
0004f2   8eb6     bsf     0xb6, 0x7, 0x0   	BSF	_ECCP1ASbits, 7
                                           ;	.line	551; stepperCon.c	ADCON0bits.GO = 0 ;
0004f4   92c2     bcf     0xc2, 0x1, 0x0   	BCF	_ADCON0bits, 1
                                           ;	.line	553; stepperCon.c	PORTDbits.RD2 = 0 ;             // Turn blue LED off
0004f6   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
0004f8   0102     movlb   0x2              	BANKSEL	_state
                                           ;	.line	554; stepperCon.c	state = IDLE ;
0004fa   6b90     clrf    0x90, 0x1        	CLRF	_state, B
                                           ;	.line	555; stepperCon.c	INTCONbits.GIE = 1 ;
0004fc   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	557; stepperCon.c	break ;
0004fe   ef4c     goto    0x000098         	GOTO	_00349_DS_
000500   f000
                                           _00342_DS_:
                                           ;	.line	561; stepperCon.c	if (PORTBbits.RB3) state = START ;
000502   a681     btfss   0x81, 0x3, 0x0   	BTFSS	_PORTBbits, 3
000504   d003     bra     0x00050c         	BRA	_00344_DS_
000506   0e01     movlw   0x01             	MOVLW	0x01
000508   0102     movlb   0x2              	BANKSEL	_state
00050a   6f90     movwf   0x90, 0x1        	MOVWF	_state, B
                                           _00344_DS_:
00050c   0102     movlb   0x2              	BANKSEL	_i2c_dirty
                                           ;	.line	564; stepperCon.c	if (i2c_dirty) {
00050e   5197     movf    0x97, 0x0, 0x1   	MOVF	_i2c_dirty, W, B
000510   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
000512   ef4c     goto    0x000098         	GOTO	_00349_DS_
000514   f000
                                           ;	.line	565; stepperCon.c	store_regs(i2c_regs, sizeof(i2c_regs)) ;
000516   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
000518   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00051a   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
00051c   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00051e   0e80     movlw   0x80             	MOVLW	0x80
000520   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000522   0e0b     movlw   0x0b             	MOVLW	0x0b
000524   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000526   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000528   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00052a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00052c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00052e   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000530   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000532   ec6d     call    0x0020da, 0x0    	CALL	_store_regs
000534   f010
000536   0e04     movlw   0x04             	MOVLW	0x04
000538   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00053a   0102     movlb   0x2              	BANKSEL	_i2c_dirty
                                           ;	.line	566; stepperCon.c	i2c_dirty = 0 ;
00053c   6b97     clrf    0x97, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	567; stepperCon.c	set_op_vars() ; 
00053e   ecd3     call    0x0021a6, 0x0    	CALL	_set_op_vars
000540   f010
                                           ;	.line	571; stepperCon.c	}
000542   ef4c     goto    0x000098         	GOTO	_00349_DS_
000544   f000
                                           ;	.line	573; stepperCon.c	}
000546   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__delay_ms	code
                                           _delay_ms:
                                           ;	.line	364; stepperCon.c	void delay_ms(uint16_t time) {
0028be   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0028c0   ffe5
0028c2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0028c4   ffd9
0028c6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0028c8   ffe5
0028ca   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0028cc   ffe5
0028ce   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0028d0   ffe5
0028d2   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0028d4   ffe5
0028d6   0e02     movlw   0x02             	MOVLW	0x02
0028d8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0028da   f000
0028dc   0e03     movlw   0x03             	MOVLW	0x03
0028de   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0028e0   f001
                                           ;	.line	367; stepperCon.c	T0CON = 0x02 ;
0028e2   0e02     movlw   0x02             	MOVLW	0x02
0028e4   6ed5     movwf   0xd5, 0x0        	MOVWF	_T0CON
                                           _00305_DS_:
                                           ;	.line	369; stepperCon.c	while(--i) {
0028e6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0028e8   0fff     addlw   0xff             	ADDLW	0xff
0028ea   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0028ec   0eff     movlw   0xff             	MOVLW	0xff
0028ee   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0028f0   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0028f2   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
0028f4   f000
0028f6   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
0028f8   f001
0028fa   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0028fc   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
0028fe   e00a     bz      0x002914         	BZ	_00307_DS_
                                           ;	.line	370; stepperCon.c	T0CONbits.TMR0ON = 0 ;
002900   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	371; stepperCon.c	INTCONbits.TMR0IF = 0 ;
002902   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	372; stepperCon.c	TMR0H = TMR_1MS >> 8 ;
002904   0ef8     movlw   0xf8             	MOVLW	0xf8
002906   6ed7     movwf   0xd7, 0x0        	MOVWF	_TMR0H
                                           ;	.line	373; stepperCon.c	TMR0L = TMR_1MS ;
002908   0e30     movlw   0x30             	MOVLW	0x30
00290a   6ed6     movwf   0xd6, 0x0        	MOVWF	_TMR0L
                                           ;	.line	374; stepperCon.c	T0CONbits.TMR0ON = 1 ;
00290c   8ed5     bsf     0xd5, 0x7, 0x0   	BSF	_T0CONbits, 7
                                           _00302_DS_:
                                           ;	.line	376; stepperCon.c	while(!INTCONbits.TMR0IF) ;
00290e   b4f2     btfsc   0xf2, 0x2, 0x0   	BTFSC	_INTCONbits, 2
002910   d7ea     bra     0x0028e6         	BRA	_00305_DS_
002912   d7fd     bra     0x00290e         	BRA	_00302_DS_
                                           _00307_DS_:
                                           ;	.line	379; stepperCon.c	T0CONbits.TMR0ON = 0 ;
002914   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	380; stepperCon.c	INTCONbits.TMR0IF = 0 ;
002916   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	381; stepperCon.c	}
002918   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00291a   f003
00291c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00291e   f002
002920   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002922   f001
002924   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002926   f000
002928   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00292a   ffd9
00292c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__set_op_vars	code
                                           _set_op_vars:
                                           ;	.line	349; stepperCon.c	void set_op_vars(void) {
0021a6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021a8   ffe5
0021aa   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021ac   ffd9
0021ae   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0021b0   ffe5
0021b2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0021b4   ffe5
0021b6   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0021b8   ffe5
0021ba   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0021bc   ffe5
                                           ;	.line	350; stepperCon.c	i2c_address  = i2c_regs[0x00] ;
0021be   c0e1     movff   0x0e1, 0x298     	MOVFF	_i2c_regs, _i2c_address
0021c0   f298
                                           ;	.line	351; stepperCon.c	micro_steps  = i2c_regs[0x01] ;
0021c2   c0e2     movff   0x0e2, 0x293     	MOVFF	(_i2c_regs + 1), _micro_steps
0021c4   f293
                                           ;	.line	352; stepperCon.c	set_amp      = i2c_regs[0x02] ;
0021c6   c0e3     movff   0x0e3, 0xf34     	MOVFF	(_i2c_regs + 2), _set_amp
0021c8   ff34
0021ca   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
0021cc   6b35     clrf    0x35, 0x1        	CLRF	(_set_amp + 1), B
                                           ;	.line	353; stepperCon.c	set_amp     += i2c_regs[0x03] << 8 ;
0021ce   c0e4     movff   0x0e4, 0x000     	MOVFF	(_i2c_regs + 3), r0x00
0021d0   f000
0021d2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0021d4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0021d6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0021d8   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0021da   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021dc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0021de   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0021e0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021e2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0021e4   010f     movlb   0xf              	BANKSEL	_set_amp
0021e6   2734     addwf   0x34, 0x1, 0x1   	ADDWF	_set_amp, F, B
0021e8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0021ea   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
0021ec   2335     addwfc  0x35, 0x1, 0x1   	ADDWFC	(_set_amp + 1), F, B
                                           ;	.line	354; stepperCon.c	max_amp      = i2c_regs[0x04] ;
0021ee   c0e5     movff   0x0e5, 0xf36     	MOVFF	(_i2c_regs + 4), _max_amp
0021f0   ff36
0021f2   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
0021f4   6b37     clrf    0x37, 0x1        	CLRF	(_max_amp + 1), B
                                           ;	.line	355; stepperCon.c	max_amp     += i2c_regs[0x05] << 8 ;
0021f6   c0e6     movff   0x0e6, 0x000     	MOVFF	(_i2c_regs + 5), r0x00
0021f8   f000
0021fa   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0021fc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0021fe   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002200   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002202   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002204   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002206   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002208   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00220a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00220c   010f     movlb   0xf              	BANKSEL	_max_amp
00220e   2736     addwf   0x36, 0x1, 0x1   	ADDWF	_max_amp, F, B
002210   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002212   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
002214   2337     addwfc  0x37, 0x1, 0x1   	ADDWFC	(_max_amp + 1), F, B
                                           ;	.line	356; stepperCon.c	t_blank      = i2c_regs[0x06] ;
002216   c0e7     movff   0x0e7, 0x299     	MOVFF	(_i2c_regs + 6), _t_blank
002218   f299
                                           ;	.line	357; stepperCon.c	pid_kp       = i2c_regs[0x07] ;
00221a   c0e8     movff   0x0e8, 0x280     	MOVFF	(_i2c_regs + 7), _pid_kp
00221c   f280
00221e   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
002220   6b81     clrf    0x81, 0x1        	CLRF	(_pid_kp + 1), B
                                           ;	.line	358; stepperCon.c	pid_kp      += i2c_regs[0x08] << 8 ;
002222   c0e9     movff   0x0e9, 0x000     	MOVFF	(_i2c_regs + 8), r0x00
002224   f000
002226   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002228   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00222a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00222c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00222e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002230   0102     movlb   0x2              	BANKSEL	_pid_kp
002232   2780     addwf   0x80, 0x1, 0x1   	ADDWF	_pid_kp, F, B
002234   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002236   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
002238   2381     addwfc  0x81, 0x1, 0x1   	ADDWFC	(_pid_kp + 1), F, B
                                           ;	.line	359; stepperCon.c	pid_ki       = i2c_regs[0x09] ;
00223a   c0ea     movff   0x0ea, 0x282     	MOVFF	(_i2c_regs + 9), _pid_ki
00223c   f282
00223e   0102     movlb   0x2              	BANKSEL	(_pid_ki + 1)
002240   6b83     clrf    0x83, 0x1        	CLRF	(_pid_ki + 1), B
                                           ;	.line	360; stepperCon.c	pid_ki      += i2c_regs[0x0a] << 8 ;
002242   c0eb     movff   0x0eb, 0x000     	MOVFF	(_i2c_regs + 10), r0x00
002244   f000
002246   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002248   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00224a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00224c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00224e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002250   0102     movlb   0x2              	BANKSEL	_pid_ki
002252   2782     addwf   0x82, 0x1, 0x1   	ADDWF	_pid_ki, F, B
002254   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002256   0102     movlb   0x2              	BANKSEL	(_pid_ki + 1)
002258   2383     addwfc  0x83, 0x1, 0x1   	ADDWFC	(_pid_ki + 1), F, B
                                           ;	.line	361; stepperCon.c	}
00225a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00225c   f003
00225e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002260   f002
002262   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002264   f001
002266   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002268   f000
00226a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00226c   ffd9
00226e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__prep_pwm_lu	code
                                           _prep_pwm_lu:
                                           ;	.line	322; stepperCon.c	void prep_pwm_lu(void) {
0013cc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0013ce   ffe5
0013d0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0013d2   ffd9
0013d4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0013d6   ffe5
0013d8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0013da   ffe5
0013dc   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0013de   ffe5
0013e0   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0013e2   ffe5
0013e4   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0013e6   ffe5
0013e8   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0013ea   ffe5
0013ec   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0013ee   ffe5
0013f0   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0013f2   ffe5
0013f4   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0013f6   ffe5
0013f8   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
0013fa   ffe5
0013fc   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0013fe   ffe5
001400   c00b     movff   0x00b, 0xfe5     	MOVFF	r0x0b, POSTDEC1
001402   ffe5
001404   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
001406   ffe5
001408   c00d     movff   0x00d, 0xfe5     	MOVFF	r0x0d, POSTDEC1
00140a   ffe5
00140c   c00e     movff   0x00e, 0xfe5     	MOVFF	r0x0e, POSTDEC1
00140e   ffe5
001410   c00f     movff   0x00f, 0xfe5     	MOVFF	r0x0f, POSTDEC1
001412   ffe5
001414   c010     movff   0x010, 0xfe5     	MOVFF	r0x10, POSTDEC1
001416   ffe5
001418   c011     movff   0x011, 0xfe5     	MOVFF	r0x11, POSTDEC1
00141a   ffe5
00141c   c012     movff   0x012, 0xfe5     	MOVFF	r0x12, POSTDEC1
00141e   ffe5
001420   c013     movff   0x013, 0xfe5     	MOVFF	r0x13, POSTDEC1
001422   ffe5
                                           ;	.line	325; stepperCon.c	int16_t max = -32000 ;
001424   6a00     clrf    0x00, 0x0        	CLRF	r0x00
001426   0e83     movlw   0x83             	MOVLW	0x83
001428   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	326; stepperCon.c	int16_t min = 32000 ;
00142a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00142c   0e7d     movlw   0x7d             	MOVLW	0x7d
00142e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001430   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
                                           ;	.line	328; stepperCon.c	ratio = (float)set_amp / (float)max_amp ;
001432   5135     movf    0x35, 0x0, 0x1   	MOVF	(_set_amp + 1), W, B
001434   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001436   010f     movlb   0xf              	BANKSEL	_set_amp
001438   5134     movf    0x34, 0x0, 0x1   	MOVF	_set_amp, W, B
00143a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00143c   ecce     call    0x00299c, 0x0    	CALL	___uint2fs
00143e   f014
001440   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001442   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001444   f005
001446   cff4     movff   0xff4, 0x006     	MOVFF	PRODH, r0x06
001448   f006
00144a   cfe9     movff   0xfe9, 0x007     	MOVFF	FSR0L, r0x07
00144c   f007
00144e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001450   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001452   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001454   5137     movf    0x37, 0x0, 0x1   	MOVF	(_max_amp + 1), W, B
001456   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001458   010f     movlb   0xf              	BANKSEL	_max_amp
00145a   5136     movf    0x36, 0x0, 0x1   	MOVF	_max_amp, W, B
00145c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00145e   ecce     call    0x00299c, 0x0    	CALL	___uint2fs
001460   f014
001462   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001464   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
001466   f009
001468   cff4     movff   0xff4, 0x00a     	MOVFF	PRODH, r0x0a
00146a   f00a
00146c   cfe9     movff   0xfe9, 0x00b     	MOVFF	FSR0L, r0x0b
00146e   f00b
001470   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001472   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001474   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
001476   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001478   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00147a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00147c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00147e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001480   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001482   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001484   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001486   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001488   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00148a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00148c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00148e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001490   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001492   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001494   ec78     call    0x000cf0, 0x0    	CALL	___fsdiv
001496   f006
001498   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00149a   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00149c   f005
00149e   cff4     movff   0xff4, 0x006     	MOVFF	PRODH, r0x06
0014a0   f006
0014a2   cfe9     movff   0xfe9, 0x007     	MOVFF	FSR0L, r0x07
0014a4   f007
0014a6   0e08     movlw   0x08             	MOVLW	0x08
0014a8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0014aa   010f     movlb   0xf              	BANKSEL	_zero_cross
                                           ;	.line	331; stepperCon.c	zero_cross = bias ;
0014ac   6b30     clrf    0x30, 0x1        	CLRF	_zero_cross, B
0014ae   0e02     movlw   0x02             	MOVLW	0x02
0014b0   010f     movlb   0xf              	BANKSEL	(_zero_cross + 1)
0014b2   6f31     movwf   0x31, 0x1        	MOVWF	(_zero_cross + 1), B
                                           ;	.line	333; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0014b4   6a08     clrf    0x08, 0x0        	CLRF	r0x08
0014b6   6a09     clrf    0x09, 0x0        	CLRF	r0x09
0014b8   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
0014ba   6a0b     clrf    0x0b, 0x0        	CLRF	r0x0b
0014bc   6a0c     clrf    0x0c, 0x0        	CLRF	r0x0c
0014be   6a0d     clrf    0x0d, 0x0        	CLRF	r0x0d
                                           _00265_DS_:
                                           ;	.line	334; stepperCon.c	set = (float)pwm_base[i] * ratio + bias ;
0014c0   0e60     movlw   0x60             	MOVLW	LOW(_pwm_base)
0014c2   240c     addwf   0x0c, 0x0, 0x0   	ADDWF	r0x0c, W
0014c4   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0014c6   0e00     movlw   0x00             	MOVLW	HIGH(_pwm_base)
0014c8   200d     addwfc  0x0d, 0x0, 0x0   	ADDWFC	r0x0d, W
0014ca   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
0014cc   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
0014ce   ffe9
0014d0   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
0014d2   ffea
0014d4   cfee     movff   0xfee, 0x00e     	MOVFF	POSTINC0, r0x0e
0014d6   f00e
0014d8   cfef     movff   0xfef, 0x00f     	MOVFF	INDF0, r0x0f
0014da   f00f
0014dc   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
0014de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014e0   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
0014e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014e4   ecec     call    0x0027d8, 0x0    	CALL	___sint2fs
0014e6   f013
0014e8   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0014ea   cff3     movff   0xff3, 0x00f     	MOVFF	PRODL, r0x0f
0014ec   f00f
0014ee   cff4     movff   0xff4, 0x010     	MOVFF	PRODH, r0x10
0014f0   f010
0014f2   cfe9     movff   0xfe9, 0x011     	MOVFF	FSR0L, r0x11
0014f4   f011
0014f6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0014f8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0014fa   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0014fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014fe   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001500   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001502   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001504   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001506   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001508   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00150a   5011     movf    0x11, 0x0, 0x0   	MOVF	r0x11, W
00150c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00150e   5010     movf    0x10, 0x0, 0x0   	MOVF	r0x10, W
001510   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001512   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
001514   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001516   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
001518   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00151a   ecaf     call    0x00095e, 0x0    	CALL	___fsmul
00151c   f004
00151e   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001520   cff3     movff   0xff3, 0x00f     	MOVFF	PRODL, r0x0f
001522   f00f
001524   cff4     movff   0xff4, 0x010     	MOVFF	PRODH, r0x10
001526   f010
001528   cfe9     movff   0xfe9, 0x011     	MOVFF	FSR0L, r0x11
00152a   f011
00152c   0e08     movlw   0x08             	MOVLW	0x08
00152e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001530   0e44     movlw   0x44             	MOVLW	0x44
001532   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001534   0e00     movlw   0x00             	MOVLW	0x00
001536   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001538   0e20     movlw   0x20             	MOVLW	0x20
00153a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00153c   0e00     movlw   0x00             	MOVLW	0x00
00153e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001540   5011     movf    0x11, 0x0, 0x0   	MOVF	r0x11, W
001542   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001544   5010     movf    0x10, 0x0, 0x0   	MOVF	r0x10, W
001546   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001548   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
00154a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00154c   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
00154e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001550   ec30     call    0x001060, 0x0    	CALL	___fsadd
001552   f008
001554   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001556   cff3     movff   0xff3, 0x00f     	MOVFF	PRODL, r0x0f
001558   f00f
00155a   cff4     movff   0xff4, 0x010     	MOVFF	PRODH, r0x10
00155c   f010
00155e   cfe9     movff   0xfe9, 0x011     	MOVFF	FSR0L, r0x11
001560   f011
001562   0e08     movlw   0x08             	MOVLW	0x08
001564   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	335; stepperCon.c	pwm_lu[i] = set ;
001566   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
001568   240c     addwf   0x0c, 0x0, 0x0   	ADDWF	r0x0c, W
00156a   6e12     movwf   0x12, 0x0        	MOVWF	r0x12
00156c   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
00156e   200d     addwfc  0x0d, 0x0, 0x0   	ADDWFC	r0x0d, W
001570   6e13     movwf   0x13, 0x0        	MOVWF	r0x13
001572   5011     movf    0x11, 0x0, 0x0   	MOVF	r0x11, W
001574   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001576   5010     movf    0x10, 0x0, 0x0   	MOVF	r0x10, W
001578   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00157a   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
00157c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00157e   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
001580   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001582   ece0     call    0x0025c0, 0x0    	CALL	___fs2uint
001584   f012
001586   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001588   cff3     movff   0xff3, 0x00f     	MOVFF	PRODL, r0x0f
00158a   f00f
00158c   0e04     movlw   0x04             	MOVLW	0x04
00158e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001590   c012     movff   0x012, 0xfe9     	MOVFF	r0x12, FSR0L
001592   ffe9
001594   c013     movff   0x013, 0xfea     	MOVFF	r0x13, FSR0H
001596   ffea
001598   c00e     movff   0x00e, 0xfee     	MOVFF	r0x0e, POSTINC0
00159a   ffee
00159c   c00f     movff   0x00f, 0xfef     	MOVFF	r0x0f, INDF0
00159e   ffef
                                           ;	.line	337; stepperCon.c	if ((int16_t)pwm_lu[i] > max) max = pwm_lu[i] ;
0015a0   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0015a2   240c     addwf   0x0c, 0x0, 0x0   	ADDWF	r0x0c, W
0015a4   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0015a6   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0015a8   200d     addwfc  0x0d, 0x0, 0x0   	ADDWFC	r0x0d, W
0015aa   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
0015ac   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
0015ae   ffe9
0015b0   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
0015b2   ffea
0015b4   cfee     movff   0xfee, 0x00e     	MOVFF	POSTINC0, r0x0e
0015b6   f00e
0015b8   cfef     movff   0xfef, 0x00f     	MOVFF	INDF0, r0x0f
0015ba   f00f
0015bc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0015be   0f80     addlw   0x80             	ADDLW	0x80
0015c0   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
0015c2   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
0015c4   0f80     addlw   0x80             	ADDLW	0x80
0015c6   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
0015c8   e102     bnz     0x0015ce         	BNZ	_00290_DS_
0015ca   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
0015cc   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00290_DS_:
0015ce   e20e     bc      0x0015ec         	BC	_00261_DS_
0015d0   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0015d2   240c     addwf   0x0c, 0x0, 0x0   	ADDWF	r0x0c, W
0015d4   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0015d6   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0015d8   200d     addwfc  0x0d, 0x0, 0x0   	ADDWFC	r0x0d, W
0015da   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
0015dc   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
0015de   ffe9
0015e0   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
0015e2   ffea
0015e4   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
0015e6   f000
0015e8   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0015ea   f001
                                           _00261_DS_:
                                           ;	.line	338; stepperCon.c	if ((int16_t)pwm_lu[i] < min) min = pwm_lu[i] ;
0015ec   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0015ee   240a     addwf   0x0a, 0x0, 0x0   	ADDWF	r0x0a, W
0015f0   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0015f2   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0015f4   200b     addwfc  0x0b, 0x0, 0x0   	ADDWFC	r0x0b, W
0015f6   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
0015f8   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
0015fa   ffe9
0015fc   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
0015fe   ffea
001600   cfee     movff   0xfee, 0x00e     	MOVFF	POSTINC0, r0x0e
001602   f00e
001604   cfef     movff   0xfef, 0x00f     	MOVFF	INDF0, r0x0f
001606   f00f
001608   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
00160a   0f80     addlw   0x80             	ADDLW	0x80
00160c   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
00160e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001610   0f80     addlw   0x80             	ADDLW	0x80
001612   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
001614   e102     bnz     0x00161a         	BNZ	_00291_DS_
001616   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001618   5c0e     subwf   0x0e, 0x0, 0x0   	SUBWF	r0x0e, W
                                           _00291_DS_:
00161a   e20e     bc      0x001638         	BC	_00266_DS_
00161c   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00161e   240a     addwf   0x0a, 0x0, 0x0   	ADDWF	r0x0a, W
001620   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001622   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
001624   200b     addwfc  0x0b, 0x0, 0x0   	ADDWFC	r0x0b, W
001626   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
001628   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
00162a   ffe9
00162c   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
00162e   ffea
001630   cfee     movff   0xfee, 0x002     	MOVFF	POSTINC0, r0x02
001632   f002
001634   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
001636   f003
                                           _00266_DS_:
                                           ;	.line	333; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
001638   0e02     movlw   0x02             	MOVLW	0x02
00163a   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
00163c   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00163e   2a0b     incf    0x0b, 0x1, 0x0   	INCF	r0x0b, F
001640   0e02     movlw   0x02             	MOVLW	0x02
001642   260c     addwf   0x0c, 0x1, 0x0   	ADDWF	r0x0c, F
001644   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001646   2a0d     incf    0x0d, 0x1, 0x0   	INCF	r0x0d, F
001648   4a08     infsnz  0x08, 0x1, 0x0   	INFSNZ	r0x08, F
00164a   2a09     incf    0x09, 0x1, 0x0   	INCF	r0x09, F
00164c   0e00     movlw   0x00             	MOVLW	0x00
00164e   5c09     subwf   0x09, 0x0, 0x0   	SUBWF	r0x09, W
001650   e102     bnz     0x001656         	BNZ	_00292_DS_
001652   0e40     movlw   0x40             	MOVLW	0x40
001654   5c08     subwf   0x08, 0x0, 0x0   	SUBWF	r0x08, W
                                           _00292_DS_:
001656   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001658   d733     bra     0x0014c0         	BRA	_00265_DS_
                                           ;	.line	341; stepperCon.c	max += 15 ;
00165a   0e0f     movlw   0x0f             	MOVLW	0x0f
00165c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00165e   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001660   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ;	.line	342; stepperCon.c	min -= 15 ;
001662   0ef1     movlw   0xf1             	MOVLW	0xf1
001664   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
001666   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
001668   0603     decf    0x03, 0x1, 0x0   	DECF	r0x03, F
                                           ;	.line	344; stepperCon.c	set_max_out(max) ;
00166a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00166c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00166e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001670   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001672   ec38     call    0x002270, 0x0    	CALL	_set_max_out
001674   f011
001676   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001678   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	345; stepperCon.c	set_min_out(min) ;
00167a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00167c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00167e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001680   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001682   ec8c     call    0x002d18, 0x0    	CALL	_set_min_out
001684   f016
001686   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001688   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	346; stepperCon.c	}
00168a   cfe4     movff   0xfe4, 0x013     	MOVFF	PREINC1, r0x13
00168c   f013
00168e   cfe4     movff   0xfe4, 0x012     	MOVFF	PREINC1, r0x12
001690   f012
001692   cfe4     movff   0xfe4, 0x011     	MOVFF	PREINC1, r0x11
001694   f011
001696   cfe4     movff   0xfe4, 0x010     	MOVFF	PREINC1, r0x10
001698   f010
00169a   cfe4     movff   0xfe4, 0x00f     	MOVFF	PREINC1, r0x0f
00169c   f00f
00169e   cfe4     movff   0xfe4, 0x00e     	MOVFF	PREINC1, r0x0e
0016a0   f00e
0016a2   cfe4     movff   0xfe4, 0x00d     	MOVFF	PREINC1, r0x0d
0016a4   f00d
0016a6   cfe4     movff   0xfe4, 0x00c     	MOVFF	PREINC1, r0x0c
0016a8   f00c
0016aa   cfe4     movff   0xfe4, 0x00b     	MOVFF	PREINC1, r0x0b
0016ac   f00b
0016ae   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
0016b0   f00a
0016b2   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
0016b4   f009
0016b6   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
0016b8   f008
0016ba   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0016bc   f007
0016be   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0016c0   f006
0016c2   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0016c4   f005
0016c6   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0016c8   f004
0016ca   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0016cc   f003
0016ce   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0016d0   f002
0016d2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0016d4   f001
0016d6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0016d8   f000
0016da   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0016dc   ffd9
0016de   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__idleInts	code
                                           _idleInts:
                                           ;	.line	303; stepperCon.c	void idleInts(void) {
002c92   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c94   ffe5
002c96   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c98   ffd9
                                           ;	.line	304; stepperCon.c	INTCONbits.INT0IE = 0 ;     // Disable 'step' interrupt
002c9a   98f2     bcf     0xf2, 0x4, 0x0   	BCF	_INTCONbits, 4
                                           ;	.line	305; stepperCon.c	INTCON3bits.INT2IE = 0 ;    // Disable 'dir' interrupt
002c9c   98f0     bcf     0xf0, 0x4, 0x0   	BCF	_INTCON3bits, 4
                                           ;	.line	307; stepperCon.c	PIE1bits.ADIE = 0 ;         // Disable ADC interrupt
002c9e   9c9d     bcf     0x9d, 0x6, 0x0   	BCF	_PIE1bits, 6
                                           ;	.line	309; stepperCon.c	PIE2bits.C1IE = 0 ;         // Disable comparators int. 
002ca0   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           ;	.line	310; stepperCon.c	PIE2bits.C2IE = 0 ;
002ca2   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           ;	.line	312; stepperCon.c	PIE1bits.SSP1IE = 1 ;       // Enable I2C interrupt
002ca4   869d     bsf     0x9d, 0x3, 0x0   	BSF	_PIE1bits, 3
                                           ;	.line	313; stepperCon.c	PIE2bits.BCL1IE = 1 ;       // Enable I2C collision detection interrupt
002ca6   86a0     bsf     0xa0, 0x3, 0x0   	BSF	_PIE2bits, 3
                                           ;	.line	315; stepperCon.c	SSP1CON1bits.SSPOV = 0 ;
002ca8   9cc6     bcf     0xc6, 0x6, 0x0   	BCF	_SSP1CON1bits, 6
                                           ;	.line	316; stepperCon.c	PIR1bits.SSP1IF = 0 ;
002caa   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	317; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
002cac   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
                                           ;	.line	318; stepperCon.c	SSP1CON1bits.SSPEN = 1 ;    // Enable I2C port
002cae   8ac6     bsf     0xc6, 0x5, 0x0   	BSF	_SSP1CON1bits, 5
                                           ;	.line	319; stepperCon.c	}
002cb0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002cb2   ffd9
002cb4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__activeInts	code
                                           _activeInts:
                                           ;	.line	283; stepperCon.c	void activeInts(void) {
002b96   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b98   ffe5
002b9a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b9c   ffd9
                                           ;	.line	284; stepperCon.c	PIE1bits.SSP1IE = 0 ;       // Disable I2C interrupt
002b9e   969d     bcf     0x9d, 0x3, 0x0   	BCF	_PIE1bits, 3
                                           ;	.line	285; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;    // Disable I2C port
002ba0   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	286; stepperCon.c	PIE2bits.BCL1IE = 0 ;       // Disable I2C collision detection interrupt
002ba2   96a0     bcf     0xa0, 0x3, 0x0   	BCF	_PIE2bits, 3
                                           ;	.line	289; stepperCon.c	if(PORTBbits.RB2) { 
002ba4   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
002ba6   d005     bra     0x002bb2         	BRA	_00248_DS_
                                           ;	.line	290; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;
002ba8   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	291; stepperCon.c	dir = 1 ;
002baa   0e01     movlw   0x01             	MOVLW	0x01
002bac   0102     movlb   0x2              	BANKSEL	_dir
002bae   6f91     movwf   0x91, 0x1        	MOVWF	_dir, B
002bb0   d004     bra     0x002bba         	BRA	_00249_DS_
                                           _00248_DS_:
                                           ;	.line	294; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
002bb2   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	295; stepperCon.c	dir = -1 ;
002bb4   0eff     movlw   0xff             	MOVLW	0xff
002bb6   0102     movlb   0x2              	BANKSEL	_dir
002bb8   6f91     movwf   0x91, 0x1        	MOVWF	_dir, B
                                           _00249_DS_:
                                           ;	.line	298; stepperCon.c	INTCONbits.INT0IE = 1 ;     // Enable 'step' interrupt
002bba   88f2     bsf     0xf2, 0x4, 0x0   	BSF	_INTCONbits, 4
                                           ;	.line	299; stepperCon.c	INTCON3bits.INT2IE = 1 ;    // Enable 'dir' interrupt
002bbc   88f0     bsf     0xf0, 0x4, 0x0   	BSF	_INTCON3bits, 4
                                           ;	.line	300; stepperCon.c	PIE1bits.ADIE = 1 ;         // Enable ADC interrupt
002bbe   8c9d     bsf     0x9d, 0x6, 0x0   	BSF	_PIE1bits, 6
                                           ;	.line	301; stepperCon.c	}
002bc0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002bc2   ffd9
002bc4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__i2cSetup	code
                                           _i2cSetup:
                                           ;	.line	268; stepperCon.c	void i2cSetup(void) {
002c1e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c20   ffe5
002c22   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c24   ffd9
                                           ;	.line	269; stepperCon.c	TRISCbits.TRISC3 = 1 ;      // Set I2C pins as input
002c26   8694     bsf     0x94, 0x3, 0x0   	BSF	_TRISCbits, 3
                                           ;	.line	270; stepperCon.c	TRISCbits.TRISC4 = 1 ;
002c28   8894     bsf     0x94, 0x4, 0x0   	BSF	_TRISCbits, 4
                                           ;	.line	272; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;
002c2a   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	273; stepperCon.c	SSP1CON2bits.GCEN = 1 ;     // Enable general call on address 0x00
002c2c   8ec5     bsf     0xc5, 0x7, 0x0   	BSF	_SSP1CON2bits, 7
                                           ;	.line	274; stepperCon.c	SSP1CON2bits.SEN = 1 ;      // Enable clock stretching
002c2e   80c5     bsf     0xc5, 0x0, 0x0   	BSF	_SSP1CON2bits, 0
                                           ;	.line	275; stepperCon.c	SSP1ADD = i2c_address ;     // Set device I2C address
002c30   c298     movff   0x298, 0xfc8     	MOVFF	_i2c_address, _SSP1ADD
002c32   ffc8
002c34   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
                                           ;	.line	277; stepperCon.c	i2c_reg_addr = 0 ;
002c36   6b96     clrf    0x96, 0x1        	CLRF	_i2c_reg_addr, B
                                           ;	.line	279; stepperCon.c	SSP1CON1bits.SSPM = 0x6 ;   // I2C Slave mode, 7-bit address
002c38   50c6     movf    0xc6, 0x0, 0x0   	MOVF	_SSP1CON1bits, W
002c3a   0bf0     andlw   0xf0             	ANDLW	0xf0
002c3c   0906     iorlw   0x06             	IORLW	0x06
002c3e   6ec6     movwf   0xc6, 0x0        	MOVWF	_SSP1CON1bits
                                           ;	.line	280; stepperCon.c	}
002c40   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c42   ffd9
002c44   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__lowInt	code
                                           _lowInt:
                                           ;	.line	207; stepperCon.c	static void lowInt(void) __interrupt(2) {
001bb4   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
001bb6   ffe5
001bb8   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
001bba   ffe5
001bbc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bbe   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
001bc0   ffe5
001bc2   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
001bc4   ffe5
001bc6   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
001bc8   ffe5
001bca   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
001bcc   ffe5
001bce   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
001bd0   ffe5
001bd2   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
001bd4   ffe5
001bd6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001bd8   ffe5
001bda   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001bdc   ffd9
001bde   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001be0   ffe5
001be2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001be4   ffe5
                                           ;	.line	210; stepperCon.c	if (INTCON3bits.INT2IF) {
001be6   a2f0     btfss   0xf0, 0x1, 0x0   	BTFSS	_INTCON3bits, 1
001be8   d014     bra     0x001c12         	BRA	_00178_DS_
                                           ;	.line	212; stepperCon.c	if(PORTBbits.RB2) {
001bea   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
001bec   d007     bra     0x001bfc         	BRA	_00175_DS_
                                           ;	.line	214; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;   
001bee   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	215; stepperCon.c	dir = 1 ;
001bf0   0e01     movlw   0x01             	MOVLW	0x01
001bf2   0102     movlb   0x2              	BANKSEL	_dir
001bf4   6f91     movwf   0x91, 0x1        	MOVWF	_dir, B
                                           ;	.line	216; stepperCon.c	skip = micro_steps ;
001bf6   c293     movff   0x293, 0x292     	MOVFF	_micro_steps, _skip
001bf8   f292
001bfa   d00a     bra     0x001c10         	BRA	_00176_DS_
                                           _00175_DS_:
                                           ;	.line	220; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
001bfc   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	221; stepperCon.c	dir = -1 ;
001bfe   0eff     movlw   0xff             	MOVLW	0xff
001c00   0102     movlb   0x2              	BANKSEL	_dir
001c02   6f91     movwf   0x91, 0x1        	MOVWF	_dir, B
001c04   0102     movlb   0x2              	BANKSEL	_micro_steps
                                           ;	.line	222; stepperCon.c	skip = -micro_steps ;
001c06   1d93     comf    0x93, 0x0, 0x1   	COMF	_micro_steps, W, B
001c08   0102     movlb   0x2              	BANKSEL	_skip
001c0a   6f92     movwf   0x92, 0x1        	MOVWF	_skip, B
001c0c   0102     movlb   0x2              	BANKSEL	_skip
001c0e   2b92     incf    0x92, 0x1, 0x1   	INCF	_skip, F, B
                                           _00176_DS_:
                                           ;	.line	225; stepperCon.c	INTCON3bits.INT2IF = 0 ;    // clear 'dir' interrupt
001c10   92f0     bcf     0xf0, 0x1, 0x0   	BCF	_INTCON3bits, 1
                                           _00178_DS_:
                                           ;	.line	229; stepperCon.c	if (PIR1bits.SSP1IF) {
001c12   a69e     btfss   0x9e, 0x3, 0x0   	BTFSS	_PIR1bits, 3
001c14   d054     bra     0x001cbe         	BRA	_00195_DS_
                                           ;	.line	230; stepperCon.c	if (SSP1STATbits.BF) i2c_buf = SSP1BUF ;    // Read data, clear BF
001c16   a0c7     btfss   0xc7, 0x0, 0x0   	BTFSS	_SSP1STATbits, 0
001c18   d002     bra     0x001c1e         	BRA	_00180_DS_
001c1a   cfc9     movff   0xfc9, 0x294     	MOVFF	_SSP1BUF, _i2c_buf
001c1c   f294
                                           _00180_DS_:
                                           ;	.line	233; stepperCon.c	if (!SSP1STATbits.D) {
001c1e   bac7     btfsc   0xc7, 0x5, 0x0   	BTFSC	_SSP1STATbits, 5
001c20   d014     bra     0x001c4a         	BRA	_00190_DS_
001c22   0102     movlb   0x2              	BANKSEL	_i2c_counter
                                           ;	.line	234; stepperCon.c	i2c_counter = 0 ;                       // Reset counter
001c24   6b95     clrf    0x95, 0x1        	CLRF	_i2c_counter, B
                                           ;	.line	235; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
001c26   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
001c28   d03d     bra     0x001ca4         	BRA	_00191_DS_
                                           ;	.line	236; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
001c2a   c296     movff   0x296, 0x000     	MOVFF	_i2c_reg_addr, r0x00
001c2c   f000
001c2e   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
001c30   2b96     incf    0x96, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001c32   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c34   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001c36   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001c38   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001c3a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001c3c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001c3e   ffe9
001c40   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001c42   ffea
001c44   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001c46   ffc9
001c48   d02d     bra     0x001ca4         	BRA	_00191_DS_
                                           _00190_DS_:
001c4a   0102     movlb   0x2              	BANKSEL	_i2c_counter
                                           ;	.line	241; stepperCon.c	i2c_counter++ ;                         // Increment counter
001c4c   2b95     incf    0x95, 0x1, 0x1   	INCF	_i2c_counter, F, B
                                           ;	.line	242; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
001c4e   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
001c50   d010     bra     0x001c72         	BRA	_00187_DS_
                                           ;	.line	243; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
001c52   c296     movff   0x296, 0x000     	MOVFF	_i2c_reg_addr, r0x00
001c54   f000
001c56   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
001c58   2b96     incf    0x96, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001c5a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c5c   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001c5e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001c60   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001c62   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001c64   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001c66   ffe9
001c68   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001c6a   ffea
001c6c   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001c6e   ffc9
001c70   d019     bra     0x001ca4         	BRA	_00191_DS_
                                           _00187_DS_:
001c72   0102     movlb   0x2              	BANKSEL	_i2c_counter
                                           ;	.line	246; stepperCon.c	if (i2c_counter == 1) {             // First byte is register
001c74   5195     movf    0x95, 0x0, 0x1   	MOVF	_i2c_counter, W, B
001c76   0a01     xorlw   0x01             	XORLW	0x01
001c78   e103     bnz     0x001c80         	BNZ	_00184_DS_
                                           ;	.line	247; stepperCon.c	i2c_reg_addr = i2c_buf ;        // value
001c7a   c294     movff   0x294, 0x296     	MOVFF	_i2c_buf, _i2c_reg_addr
001c7c   f296
001c7e   d012     bra     0x001ca4         	BRA	_00191_DS_
                                           _00184_DS_:
                                           ;	.line	250; stepperCon.c	i2c_regs[i2c_reg_addr++] = i2c_buf ; // write
001c80   c296     movff   0x296, 0x000     	MOVFF	_i2c_reg_addr, r0x00
001c82   f000
001c84   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
001c86   2b96     incf    0x96, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001c88   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c8a   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001c8c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001c8e   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001c90   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001c92   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001c94   ffe9
001c96   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001c98   ffea
001c9a   c294     movff   0x294, 0xfef     	MOVFF	_i2c_buf, INDF0
001c9c   ffef
                                           ;	.line	251; stepperCon.c	i2c_dirty = 1 ;                 // set I2C dirty flag
001c9e   0e01     movlw   0x01             	MOVLW	0x01
001ca0   0102     movlb   0x2              	BANKSEL	_i2c_dirty
001ca2   6f97     movwf   0x97, 0x1        	MOVWF	_i2c_dirty, B
                                           _00191_DS_:
                                           ;	.line	256; stepperCon.c	i2c_reg_addr %= sizeof(i2c_regs) ;          // Prevent buffer overflow
001ca4   0e0b     movlw   0x0b             	MOVLW	0x0b
001ca6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ca8   c296     movff   0x296, 0xfe5     	MOVFF	_i2c_reg_addr, POSTDEC1
001caa   ffe5
001cac   ecac     call    0x002758, 0x0    	CALL	__moduchar
001cae   f013
001cb0   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
001cb2   6f96     movwf   0x96, 0x1        	MOVWF	_i2c_reg_addr, B
001cb4   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001cb6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	258; stepperCon.c	PIR1bits.SSP1IF = 0 ;       // Clear interrupt
001cb8   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	259; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
001cba   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
001cbc   d003     bra     0x001cc4         	BRA	_00197_DS_
                                           _00195_DS_:
                                           ;	.line	262; stepperCon.c	else if (PIR2bits.BCL1IF) {
001cbe   a6a1     btfss   0xa1, 0x3, 0x0   	BTFSS	_PIR2bits, 3
001cc0   d001     bra     0x001cc4         	BRA	_00197_DS_
                                           ;	.line	263; stepperCon.c	PIR2bits.BCL1IF = 0 ;       // Clear I2C collision interrupt
001cc2   96a1     bcf     0xa1, 0x3, 0x0   	BCF	_PIR2bits, 3
                                           _00197_DS_:
                                           ;	.line	265; stepperCon.c	}
001cc4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001cc6   f001
001cc8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001cca   f000
001ccc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001cce   ffd9
001cd0   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
001cd2   fffb
001cd4   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
001cd6   fffa
001cd8   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
001cda   ffea
001cdc   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
001cde   ffe9
001ce0   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
001ce2   fff4
001ce4   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
001ce6   fff3
001ce8   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001cea   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
001cec   ffe0
001cee   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
001cf0   ffd8
001cf2   0010     retfie  0x0              	RETFIE	

                                           ; ; Starting pCode block
                                           S_stepperCon__highInt	code
                                           _highInt:
                                           ;	.line	164; stepperCon.c	static void highInt(void) __interrupt(1) {
00200e   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
002010   ffe5
002012   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
002014   ffe5
002016   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002018   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
00201a   ffe5
00201c   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
00201e   ffe5
002020   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
002022   ffe5
002024   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
002026   ffe5
002028   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
00202a   ffe5
00202c   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
00202e   ffe5
002030   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002032   ffe5
002034   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002036   ffd9
002038   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00203a   ffe5
                                           ;	.line	166; stepperCon.c	if (PIR1bits.ADIF) {
00203c   ac9e     btfss   0x9e, 0x6, 0x0   	BTFSS	_PIR1bits, 6
00203e   d018     bra     0x002070         	BRA	_00111_DS_
002040   010f     movlb   0xf              	BANKSEL	_adc_wdt
                                           ;	.line	167; stepperCon.c	adc_wdt = 0 ;
002042   6b32     clrf    0x32, 0x1        	CLRF	_adc_wdt, B
002044   010f     movlb   0xf              	BANKSEL	(_adc_wdt + 1)
002046   6b33     clrf    0x33, 0x1        	CLRF	(_adc_wdt + 1), B
002048   0102     movlb   0x2              	BANKSEL	_state
                                           ;	.line	169; stepperCon.c	if (state != STEP) {
00204a   5190     movf    0x90, 0x0, 0x1   	MOVF	_state, W, B
00204c   0a06     xorlw   0x06             	XORLW	0x06
00204e   e00f     bz      0x00206e         	BZ	_00109_DS_
                                           ;	.line	170; stepperCon.c	if (ADCON0bits.CHS == 0b0001) state = CALC_PI_A ;
002050   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
002052   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
002054   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
002056   0b1f     andlw   0x1f             	ANDLW	0x1f
002058   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00205a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00205c   0a01     xorlw   0x01             	XORLW	0x01
00205e   e104     bnz     0x002068         	BNZ	_00106_DS_
002060   0e03     movlw   0x03             	MOVLW	0x03
002062   0102     movlb   0x2              	BANKSEL	_state
002064   6f90     movwf   0x90, 0x1        	MOVWF	_state, B
002066   d003     bra     0x00206e         	BRA	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	171; stepperCon.c	else state = CALC_PI_B ;
002068   0e04     movlw   0x04             	MOVLW	0x04
00206a   0102     movlb   0x2              	BANKSEL	_state
00206c   6f90     movwf   0x90, 0x1        	MOVWF	_state, B
                                           _00109_DS_:
                                           ;	.line	174; stepperCon.c	PIR1bits.ADIF = 0 ;                     // Clear ADC interrupt
00206e   9c9e     bcf     0x9e, 0x6, 0x0   	BCF	_PIR1bits, 6
                                           _00111_DS_:
                                           ;	.line	178; stepperCon.c	if (INTCONbits.INT0IF) {
002070   a2f2     btfss   0xf2, 0x1, 0x0   	BTFSS	_INTCONbits, 1
002072   d004     bra     0x00207c         	BRA	_00113_DS_
                                           ;	.line	179; stepperCon.c	state = STEP ;
002074   0e06     movlw   0x06             	MOVLW	0x06
002076   0102     movlb   0x2              	BANKSEL	_state
002078   6f90     movwf   0x90, 0x1        	MOVWF	_state, B
                                           ;	.line	180; stepperCon.c	INTCONbits.INT0IF = 0 ;     // clear 'step' interrupt
00207a   92f2     bcf     0xf2, 0x1, 0x0   	BCF	_INTCONbits, 1
                                           _00113_DS_:
                                           ;	.line	184; stepperCon.c	if (PIR2bits.C1IF && PIE2bits.C1IE) {
00207c   aca1     btfss   0xa1, 0x6, 0x0   	BTFSS	_PIR2bits, 6
00207e   d00b     bra     0x002096         	BRA	_00117_DS_
002080   aca0     btfss   0xa0, 0x6, 0x0   	BTFSS	_PIE2bits, 6
002082   d009     bra     0x002096         	BRA	_00117_DS_
                                           ;	.line	185; stepperCon.c	if (CM1CON0bits.C1OUT) {
002084   ac79     btfss   0x79, 0x6, 0x0   	BTFSS	_CM1CON0bits, 6
002086   d006     bra     0x002094         	BRA	_00115_DS_
                                           ;	.line	186; stepperCon.c	ADCON0bits.CHS = 0b0001 ; 
002088   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
00208a   0b83     andlw   0x83             	ANDLW	0x83
00208c   0904     iorlw   0x04             	IORLW	0x04
00208e   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
                                           ;	.line	187; stepperCon.c	ADCON0bits.GO = 1 ;
002090   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           ;	.line	188; stepperCon.c	PIE2bits.C1IE = 0 ;
002092   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           _00115_DS_:
                                           ;	.line	191; stepperCon.c	PIR2bits.C1IF = 0 ;        
002094   9ca1     bcf     0xa1, 0x6, 0x0   	BCF	_PIR2bits, 6
                                           _00117_DS_:
                                           ;	.line	195; stepperCon.c	if (PIR2bits.C2IF && PIE2bits.C2IE) {
002096   aaa1     btfss   0xa1, 0x5, 0x0   	BTFSS	_PIR2bits, 5
002098   d00a     bra     0x0020ae         	BRA	_00124_DS_
00209a   aaa0     btfss   0xa0, 0x5, 0x0   	BTFSS	_PIE2bits, 5
00209c   d008     bra     0x0020ae         	BRA	_00124_DS_
                                           ;	.line	196; stepperCon.c	if (CM2CON0bits.C2OUT) {
00209e   ac78     btfss   0x78, 0x6, 0x0   	BTFSS	_CM2CON0bits, 6
0020a0   d005     bra     0x0020ac         	BRA	_00120_DS_
                                           ;	.line	197; stepperCon.c	ADCON0bits.CHS = 0b0000 ; 
0020a2   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
0020a4   0b83     andlw   0x83             	ANDLW	0x83
0020a6   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
                                           ;	.line	198; stepperCon.c	ADCON0bits.GO = 1 ;
0020a8   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           ;	.line	199; stepperCon.c	PIE2bits.C2IE = 0 ;
0020aa   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           _00120_DS_:
                                           ;	.line	202; stepperCon.c	PIR2bits.C2IF = 0 ;        
0020ac   9aa1     bcf     0xa1, 0x5, 0x0   	BCF	_PIR2bits, 5
                                           _00124_DS_:
                                           ;	.line	204; stepperCon.c	}
0020ae   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0020b0   f000
0020b2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0020b4   ffd9
0020b6   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0020b8   fffb
0020ba   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0020bc   fffa
0020be   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0020c0   ffea
0020c2   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0020c4   ffe9
0020c6   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0020c8   fff4
0020ca   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0020cc   fff3
0020ce   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0020d0   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0020d2   ffe0
0020d4   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0020d6   ffd8
0020d8   0010     retfie  0x0              	RETFIE	



                                           ; Statistics:
                                           ; code size:	 3092 (0x0c14) bytes ( 2.36%)
                                           ;           	 1546 (0x060a) words
                                           ; udata size:	  177 (0x00b1) bytes ( 4.81%)
                                           ; access size:	   20 (0x0014) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.2 #10526 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_ioSetup
                                           	global	_pwmSetup
                                           	global	_pwmOut
                                           	global	_compsSetup
                                           	global	_intSetup
                                           	global	_adc_setup
                                           	global	_resetCheck

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_sc_setup__resetCheck	code
                                           _resetCheck:
                                           ;	.line	232; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void resetCheck(void) {
0023dc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0023de   ffe5
0023e0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0023e2   ffd9
0023e4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0023e6   ffe5
0023e8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0023ea   ffe5
                                           ;	.line	236; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(!RCONbits.TO || !RCONbits.PD || !RCONbits.BOR) {
0023ec   a6d0     btfss   0xd0, 0x3, 0x0   	BTFSS	_RCONbits, 3
0023ee   d004     bra     0x0023f8         	BRA	_00141_DS_
0023f0   a4d0     btfss   0xd0, 0x2, 0x0   	BTFSS	_RCONbits, 2
0023f2   d002     bra     0x0023f8         	BRA	_00141_DS_
0023f4   b0d0     btfsc   0xd0, 0x0, 0x0   	BTFSC	_RCONbits, 0
0023f6   d007     bra     0x002406         	BRA	_00142_DS_
                                           _00141_DS_:
                                           ;	.line	238; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.TO = 1 ;
0023f8   86d0     bsf     0xd0, 0x3, 0x0   	BSF	_RCONbits, 3
                                           ;	.line	239; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.PD = 1 ;
0023fa   84d0     bsf     0xd0, 0x2, 0x0   	BSF	_RCONbits, 2
                                           ;	.line	240; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.BOR = 0 ;
0023fc   90d0     bcf     0xd0, 0x0, 0x0   	BCF	_RCONbits, 0
                                           ;	.line	241; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.POR = 0 ;
0023fe   92d0     bcf     0xd0, 0x1, 0x0   	BCF	_RCONbits, 1
                                           ;	.line	243; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
002400   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	244; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
002402   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           _00139_DS_:
                                           ;	.line	246; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(1) ; 
002404   d7ff     bra     0x002404         	BRA	_00139_DS_
                                           _00142_DS_:
                                           ;	.line	250; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(STKPTRbits.STKFUL || STKPTRbits.STKUNF) {
002406   befc     btfsc   0xfc, 0x7, 0x0   	BTFSC	_STKPTRbits, 7
002408   d002     bra     0x00240e         	BRA	_00153_DS_
00240a   acfc     btfss   0xfc, 0x6, 0x0   	BTFSS	_STKPTRbits, 6
00240c   d031     bra     0x002470         	BRA	_00156_DS_
                                           _00153_DS_:
                                           ;	.line	252; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKFUL = 0 ;
00240e   9efc     bcf     0xfc, 0x7, 0x0   	BCF	_STKPTRbits, 7
                                           ;	.line	253; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKUNF = 0 ;
002410   9cfc     bcf     0xfc, 0x6, 0x0   	BCF	_STKPTRbits, 6
                                           ;	.line	255; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
002412   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	256; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
002414   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           ;	.line	259; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1CS = 0 ;      // Timer1 to Fosc/4
002416   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
002418   0b3f     andlw   0x3f             	ANDLW	0x3f
00241a   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	260; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
00241c   0e78     movlw   0x78             	MOVLW	0x78
00241e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00151_DS_:
                                           ;	.line	263; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 0 ;
002420   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	264; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR1bits.TMR1IF = 0 ;
002422   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	265; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.T1CKPS = 3 ;      // Timer1 1:8 prescale
002424   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
002426   0bcf     andlw   0xcf             	ANDLW	0xcf
002428   0930     iorlw   0x30             	IORLW	0x30
00242a   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	266; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1H = TMR_10MS >> 8 ;
00242c   0eb1     movlw   0xb1             	MOVLW	0xb1
00242e   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	267; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1L = TMR_10MS ;
002430   0edf     movlw   0xdf             	MOVLW	0xdf
002432   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	268; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 1 ;
002434   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00145_DS_:
                                           ;	.line	270; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(!PIR1bits.TMR1IF) ;
002436   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
002438   d7fe     bra     0x002436         	BRA	_00145_DS_
                                           ;	.line	272; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if (--i == 0) {
00243a   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
00243c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00243e   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
002440   f000
002442   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002444   e1ed     bnz     0x002420         	BNZ	_00151_DS_
                                           ;	.line	273; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC5 = !LATCbits.LATC5 ;
002446   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002448   ba8b     btfsc   0x8b, 0x5, 0x0   	BTFSC	_LATCbits, 5
00244a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00244c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00244e   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
002450   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
002452   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
002454   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002456   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
002458   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00245a   0b01     andlw   0x01             	ANDLW	0x01
00245c   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00245e   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
002460   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
002462   508b     movf    0x8b, 0x0, 0x0   	MOVF	_LATCbits, W
002464   0bdf     andlw   0xdf             	ANDLW	0xdf
002466   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
002468   6e8b     movwf   0x8b, 0x0        	MOVWF	_LATCbits
                                           ;	.line	274; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
00246a   0e78     movlw   0x78             	MOVLW	0x78
00246c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00246e   d7d8     bra     0x002420         	BRA	_00151_DS_
                                           _00156_DS_:
                                           ;	.line	278; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002470   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002472   f001
002474   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002476   f000
002478   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00247a   ffd9
00247c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__adc_setup	code
                                           _adc_setup:
                                           ;	.line	209; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void adc_setup(void) {
002b18   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b1a   ffe5
002b1c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b1e   ffd9
                                           ;	.line	210; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON0bits.ADON = 0 ;      // ADC Off
002b20   90c2     bcf     0xc2, 0x0, 0x0   	BCF	_ADCON0bits, 0
                                           ;	.line	212; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON2bits.ADCS = 0b110 ;  // ADC clock = Fosc/64 = 1us
002b22   50c0     movf    0xc0, 0x0, 0x0   	MOVF	_ADCON2bits, W
002b24   0bf8     andlw   0xf8             	ANDLW	0xf8
002b26   0906     iorlw   0x06             	IORLW	0x06
002b28   6ec0     movwf   0xc0, 0x0        	MOVWF	_ADCON2bits
                                           ;	.line	213; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON2bits.ACQT = 0b101 ;  // 12 Tad acquisition time
002b2a   50c0     movf    0xc0, 0x0, 0x0   	MOVF	_ADCON2bits, W
002b2c   0bc7     andlw   0xc7             	ANDLW	0xc7
002b2e   0928     iorlw   0x28             	IORLW	0x28
002b30   6ec0     movwf   0xc0, 0x0        	MOVWF	_ADCON2bits
                                           ;	.line	214; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON2bits.ADFM = 1 ; 
002b32   8ec0     bsf     0xc0, 0x7, 0x0   	BSF	_ADCON2bits, 7
                                           ;	.line	216; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON1bits.PVCFG = 0b00 ;  // Pos. Ref. voltage = AVdd
002b34   50c1     movf    0xc1, 0x0, 0x0   	MOVF	_ADCON1bits, W
002b36   0bf3     andlw   0xf3             	ANDLW	0xf3
002b38   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1bits
                                           ;	.line	217; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON1bits.NVCFG = 0b00 ;  // Nrg. Ref. voltage = AVss
002b3a   50c1     movf    0xc1, 0x0, 0x0   	MOVF	_ADCON1bits, W
002b3c   0bfc     andlw   0xfc             	ANDLW	0xfc
002b3e   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1bits
                                           ;	.line	218; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON1bits.TRIGSEL = 1  ;  // Set GO trigger to CCP5
002b40   8ec1     bsf     0xc1, 0x7, 0x0   	BSF	_ADCON1bits, 7
                                           ;	.line	220; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA0 = 1 ;
002b42   8092     bsf     0x92, 0x0, 0x0   	BSF	_TRISAbits, 0
002b44   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	221; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA0 = 1 ;     // Enable RA0 as analog input
002b46   8138     bsf     0x38, 0x0, 0x1   	BSF	_ANSELAbits, 0, B
                                           ;	.line	223; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA1 = 1 ;
002b48   8292     bsf     0x92, 0x1, 0x0   	BSF	_TRISAbits, 1
002b4a   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	224; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA1 = 1 ;     // Enable RA1 as analog input
002b4c   8338     bsf     0x38, 0x1, 0x1   	BSF	_ANSELAbits, 1, B
                                           ;	.line	226; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR1bits.ADIF = 0 ;        // Reset ADC interrupt 
002b4e   9c9e     bcf     0x9e, 0x6, 0x0   	BCF	_PIR1bits, 6
                                           ;	.line	227; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIE1bits.ADIE = 0 ;        // Disable ADC interrupt
002b50   9c9d     bcf     0x9d, 0x6, 0x0   	BCF	_PIE1bits, 6
                                           ;	.line	229; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON0bits.ADON = 1 ;      // ADC On
002b52   80c2     bsf     0xc2, 0x0, 0x0   	BSF	_ADCON0bits, 0
                                           ;	.line	230; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002b54   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b56   ffd9
002b58   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__intSetup	code
                                           _intSetup:
                                           ;	.line	188; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void intSetup(void) {
002c46   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c48   ffe5
002c4a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c4c   ffd9
                                           ;	.line	189; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 0 ;   // Disable interrupts
002c4e   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	190; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 0 ;
002c50   9cf2     bcf     0xf2, 0x6, 0x0   	BCF	_INTCONbits, 6
                                           ;	.line	192; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.IPEN = 1 ;         // Enable interrupts priority
002c52   8ed0     bsf     0xd0, 0x7, 0x0   	BSF	_RCONbits, 7
                                           ;	.line	194; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.RBPU = 1 ;      // Disable Port B pull-ups
002c54   8ef1     bsf     0xf1, 0x7, 0x0   	BSF	_INTCON2bits, 7
                                           ;	.line	195; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.INTEDG0 = 1 ;   // 'step' interrupt on rising edge
002c56   8cf1     bsf     0xf1, 0x6, 0x0   	BSF	_INTCON2bits, 6
                                           ;	.line	197; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON3bits.INT2IP = 0 ;    // Low priority to 'dir' interrupt
002c58   9ef0     bcf     0xf0, 0x7, 0x0   	BCF	_INTCON3bits, 7
                                           ;	.line	198; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.ADIP = 1 ;         // ADC High priority interrupt
002c5a   8c9f     bsf     0x9f, 0x6, 0x0   	BSF	_IPR1bits, 6
                                           ;	.line	199; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.SSP1IP = 0 ;       // Low priority to I2C interrupt
002c5c   969f     bcf     0x9f, 0x3, 0x0   	BCF	_IPR1bits, 3
                                           ;	.line	201; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C1IP = 1 ;         // Set comparators interrupts to high priority
002c5e   8ca2     bsf     0xa2, 0x6, 0x0   	BSF	_IPR2bits, 6
                                           ;	.line	202; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C2IP = 1 ;
002c60   8aa2     bsf     0xa2, 0x5, 0x0   	BSF	_IPR2bits, 5
                                           ;	.line	204; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 1 ;   // Enable interrupts
002c62   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	205; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 1 ;
002c64   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
                                           ;	.line	206; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002c66   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c68   ffd9
002c6a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__compsSetup	code
                                           _compsSetup:
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void compsSetup(void) {
00284c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00284e   ffe5
002850   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002852   ffd9
002854   010f     movlb   0xf              	BANKSEL	_VREFCON0bits
                                           ;	.line	154; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	VREFCON0bits.FVREN = 1 ;
002856   8f42     bsf     0x42, 0x7, 0x1   	BSF	_VREFCON0bits, 7, B
                                           _00120_DS_:
002858   010f     movlb   0xf              	BANKSEL	_VREFCON0bits
                                           ;	.line	155; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while (!VREFCON0bits.FVRST) ;   // Wait for FVR to stabilize
00285a   ad42     btfss   0x42, 0x6, 0x1   	BTFSS	_VREFCON0bits, 6, B
00285c   d7fd     bra     0x002858         	BRA	_00120_DS_
00285e   010f     movlb   0xf              	BANKSEL	_VREFCON0bits
                                           ;	.line	156; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	VREFCON0bits.FVRS = 0b01 ;      // set FVR to 1.024V
002860   5142     movf    0x42, 0x0, 0x1   	MOVF	_VREFCON0bits, W, B
002862   0bcf     andlw   0xcf             	ANDLW	0xcf
002864   0910     iorlw   0x10             	IORLW	0x10
002866   010f     movlb   0xf              	BANKSEL	_VREFCON0bits
002868   6f42     movwf   0x42, 0x1        	MOVWF	_VREFCON0bits, B
00286a   010f     movlb   0xf              	BANKSEL	_VREFCON1bits
                                           ;	.line	159; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	VREFCON1bits.DACNSS = 0 ;       // Set DAC neg. ref. to Vss
00286c   9141     bcf     0x41, 0x0, 0x1   	BCF	_VREFCON1bits, 0, B
00286e   010f     movlb   0xf              	BANKSEL	_VREFCON1bits
                                           ;	.line	160; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	VREFCON1bits.DACPSS = 0b10 ;    // Set DAC pos. ref. to FVR
002870   5141     movf    0x41, 0x0, 0x1   	MOVF	_VREFCON1bits, W, B
002872   0bf3     andlw   0xf3             	ANDLW	0xf3
002874   0908     iorlw   0x08             	IORLW	0x08
002876   010f     movlb   0xf              	BANKSEL	_VREFCON1bits
002878   6f41     movwf   0x41, 0x1        	MOVWF	_VREFCON1bits, B
00287a   010f     movlb   0xf              	BANKSEL	_VREFCON1bits
                                           ;	.line	161; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	VREFCON1bits.DACOE = 0 ;        // Disable DAC output pin
00287c   9b41     bcf     0x41, 0x5, 0x1   	BCF	_VREFCON1bits, 5, B
00287e   010f     movlb   0xf              	BANKSEL	_VREFCON1bits
                                           ;	.line	162; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	VREFCON1bits.DACEN = 1 ;        // Enable DAC
002880   8f41     bsf     0x41, 0x7, 0x1   	BSF	_VREFCON1bits, 7, B
002882   010f     movlb   0xf              	BANKSEL	_VREFCON2bits
                                           ;	.line	163; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	VREFCON2bits.DACR = 7 ;         // = 224mV
002884   5140     movf    0x40, 0x0, 0x1   	MOVF	_VREFCON2bits, W, B
002886   0be0     andlw   0xe0             	ANDLW	0xe0
002888   0907     iorlw   0x07             	IORLW	0x07
00288a   010f     movlb   0xf              	BANKSEL	_VREFCON2bits
00288c   6f40     movwf   0x40, 0x1        	MOVWF	_VREFCON2bits, B
                                           ;	.line	166; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1CH = 0b01 ;       // C12N1- input to C1-
00288e   5079     movf    0x79, 0x0, 0x0   	MOVF	_CM1CON0bits, W
002890   0bfc     andlw   0xfc             	ANDLW	0xfc
002892   0901     iorlw   0x01             	IORLW	0x01
002894   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0bits
                                           ;	.line	167; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1R = 0 ;           // C1+ to Vref input
002896   9479     bcf     0x79, 0x2, 0x0   	BCF	_CM1CON0bits, 2
                                           ;	.line	168; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C1RSEL = 0 ;        // Use DAC as Vref
002898   9a77     bcf     0x77, 0x5, 0x0   	BCF	_CM2CON1bits, 5
                                           ;	.line	169; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1POL = 1 ;         // Invert logic
00289a   8879     bsf     0x79, 0x4, 0x0   	BSF	_CM1CON0bits, 4
                                           ;	.line	170; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1SP = 1 ;          // Normal power, high speed mode
00289c   8679     bsf     0x79, 0x3, 0x0   	BSF	_CM1CON0bits, 3
                                           ;	.line	171; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C1HYS = 0 ;         // Enable hysteresis
00289e   9677     bcf     0x77, 0x3, 0x0   	BCF	_CM2CON1bits, 3
                                           ;	.line	174; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2CH = 0b00 ;       // C12N0- input to C2-
0028a0   5078     movf    0x78, 0x0, 0x0   	MOVF	_CM2CON0bits, W
0028a2   0bfc     andlw   0xfc             	ANDLW	0xfc
0028a4   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0bits
                                           ;	.line	175; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2R = 0 ;           // C2+ to Vref input
0028a6   9478     bcf     0x78, 0x2, 0x0   	BCF	_CM2CON0bits, 2
                                           ;	.line	176; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C2RSEL = 0 ;        // Use DAC as Vref
0028a8   9877     bcf     0x77, 0x4, 0x0   	BCF	_CM2CON1bits, 4
                                           ;	.line	177; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2POL = 1 ;         // Invert logic
0028aa   8878     bsf     0x78, 0x4, 0x0   	BSF	_CM2CON0bits, 4
                                           ;	.line	178; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2SP = 1 ;          // Normal power, high speed mode
0028ac   8678     bsf     0x78, 0x3, 0x0   	BSF	_CM2CON0bits, 3
                                           ;	.line	179; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C2HYS = 0 ;         // Enable hysteresis
0028ae   9477     bcf     0x77, 0x2, 0x0   	BCF	_CM2CON1bits, 2
                                           ;	.line	181; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR2bits.C1IF = 0 ;             // Clear any pending interrupts 
0028b0   9ca1     bcf     0xa1, 0x6, 0x0   	BCF	_PIR2bits, 6
                                           ;	.line	182; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR2bits.C2IF = 0 ; 
0028b2   9aa1     bcf     0xa1, 0x5, 0x0   	BCF	_PIR2bits, 5
                                           ;	.line	184; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1ON = 1 ;          // Enable comparator 1
0028b4   8e79     bsf     0x79, 0x7, 0x0   	BSF	_CM1CON0bits, 7
                                           ;	.line	185; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2ON = 1 ;          // Enable comparator 2
0028b6   8e78     bsf     0x78, 0x7, 0x0   	BSF	_CM2CON0bits, 7
                                           ;	.line	186; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
0028b8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0028ba   ffd9
0028bc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__pwmOut	code
                                           _pwmOut:
                                           ;	.line	132; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void pwmOut(void) {
002ac8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002aca   ffe5
002acc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002ace   ffd9
                                           ;	.line	133; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.TRISB5 = 1 ;
002ad0   8a93     bsf     0x93, 0x5, 0x0   	BSF	_TRISBbits, 5
002ad2   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	135; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C3TSEL = 0b00 ;    // Timer2 to CCP3
002ad4   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
002ad6   0b3f     andlw   0x3f             	ANDLW	0x3f
002ad8   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
002ada   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
                                           ;	.line	137; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.TMR2ON = 0 ;          // Turn Timer6 off
002adc   94ba     bcf     0xba, 0x2, 0x0   	BCF	_T2CONbits, 2
                                           ;	.line	138; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PR2 = 0xff ;                    // Set Timer6 for 15.625kHz @64MHz, 10-bit res
002ade   0eff     movlw   0xff             	MOVLW	0xff
002ae0   6ebb     movwf   0xbb, 0x0        	MOVWF	_PR2
                                           ;	.line	139; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.T2CKPS = 0b00 ;       // Set prescaler to 1:1
002ae2   50ba     movf    0xba, 0x0, 0x0   	MOVF	_T2CONbits, W
002ae4   0bfc     andlw   0xfc             	ANDLW	0xfc
002ae6   6eba     movwf   0xba, 0x0        	MOVWF	_T2CONbits
002ae8   010f     movlb   0xf              	BANKSEL	_CCP3CONbits
                                           ;	.line	141; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP3CONbits.P3M = 0b00 ;
002aea   515d     movf    0x5d, 0x0, 0x1   	MOVF	_CCP3CONbits, W, B
002aec   0b3f     andlw   0x3f             	ANDLW	0x3f
002aee   010f     movlb   0xf              	BANKSEL	_CCP3CONbits
002af0   6f5d     movwf   0x5d, 0x1        	MOVWF	_CCP3CONbits, B
002af2   010f     movlb   0xf              	BANKSEL	_CCP3CONbits
                                           ;	.line	142; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP3CONbits.CCP3M = 0b1100 ; 
002af4   515d     movf    0x5d, 0x0, 0x1   	MOVF	_CCP3CONbits, W, B
002af6   0bf0     andlw   0xf0             	ANDLW	0xf0
002af8   090c     iorlw   0x0c             	IORLW	0x0c
002afa   010f     movlb   0xf              	BANKSEL	_CCP3CONbits
002afc   6f5d     movwf   0x5d, 0x1        	MOVWF	_CCP3CONbits, B
                                           ;	.line	144; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.TRISB5 = 0 ;
002afe   9a93     bcf     0x93, 0x5, 0x0   	BCF	_TRISBbits, 5
                                           ;	.line	146; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPR3L = 128 ;
002b00   0e80     movlw   0x80             	MOVLW	0x80
002b02   010f     movlb   0xf              	BANKSEL	_CCPR3L
002b04   6f5e     movwf   0x5e, 0x1        	MOVWF	_CCPR3L, B
002b06   010f     movlb   0xf              	BANKSEL	_CCP3CONbits
                                           ;	.line	147; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP3CONbits.DC3B = 0 ;
002b08   515d     movf    0x5d, 0x0, 0x1   	MOVF	_CCP3CONbits, W, B
002b0a   0bcf     andlw   0xcf             	ANDLW	0xcf
002b0c   010f     movlb   0xf              	BANKSEL	_CCP3CONbits
002b0e   6f5d     movwf   0x5d, 0x1        	MOVWF	_CCP3CONbits, B
                                           ;	.line	149; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.TMR2ON = 1 ; 
002b10   84ba     bsf     0xba, 0x2, 0x0   	BSF	_T2CONbits, 2
                                           ;	.line	150; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002b12   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b14   ffd9
002b16   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__pwmSetup	code
                                           _pwmSetup:
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void pwmSetup(uint8_t db_time) {
001a6a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001a6c   ffe5
001a6e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001a70   ffd9
001a72   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a74   ffe5
001a76   0e02     movlw   0x02             	MOVLW	0x02
001a78   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001a7a   f000
                                           ;	.line	64; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC0 = 1 ;          // Disable port drivers for setup
001a7c   8094     bsf     0x94, 0x0, 0x0   	BSF	_TRISCbits, 0
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC1 = 1 ;
001a7e   8294     bsf     0x94, 0x1, 0x0   	BSF	_TRISCbits, 1
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC2 = 1 ;
001a80   8494     bsf     0x94, 0x2, 0x0   	BSF	_TRISCbits, 2
                                           ;	.line	67; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD5 = 1 ;
001a82   8a95     bsf     0x95, 0x5, 0x0   	BSF	_TRISDbits, 5
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 1 ;
001a84   8295     bsf     0x95, 0x1, 0x0   	BSF	_TRISDbits, 1
                                           ;	.line	69; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 1 ;
001a86   8496     bsf     0x96, 0x2, 0x0   	BSF	_TRISEbits, 2
001a88   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	71; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C2TSEL = 0b10 ;    // Timer6 to ECCP2
001a8a   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
001a8c   0be7     andlw   0xe7             	ANDLW	0xe7
001a8e   0910     iorlw   0x10             	IORLW	0x10
001a90   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
001a92   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
001a94   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C1TSEL = 0b10 ;    // Timer6 to ECCP1  
001a96   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
001a98   0bfc     andlw   0xfc             	ANDLW	0xfc
001a9a   0902     iorlw   0x02             	IORLW	0x02
001a9c   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
001a9e   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
001aa0   010f     movlb   0xf              	BANKSEL	_CCPTMRS1bits
                                           ;	.line	73; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS1bits.C5TSEL = 0b01 ;    // Timer4 to CCP5
001aa2   5148     movf    0x48, 0x0, 0x1   	MOVF	_CCPTMRS1bits, W, B
001aa4   0bf3     andlw   0xf3             	ANDLW	0xf3
001aa6   0904     iorlw   0x04             	IORLW	0x04
001aa8   010f     movlb   0xf              	BANKSEL	_CCPTMRS1bits
001aaa   6f48     movwf   0x48, 0x1        	MOVWF	_CCPTMRS1bits, B
001aac   010f     movlb   0xf              	BANKSEL	_CCPTMRS1bits
                                           ;	.line	74; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS1bits.C4TSEL = 0b01 ;    // Timer4 to CCP4
001aae   5148     movf    0x48, 0x0, 0x1   	MOVF	_CCPTMRS1bits, W, B
001ab0   0bfc     andlw   0xfc             	ANDLW	0xfc
001ab2   0901     iorlw   0x01             	IORLW	0x01
001ab4   010f     movlb   0xf              	BANKSEL	_CCPTMRS1bits
001ab6   6f48     movwf   0x48, 0x1        	MOVWF	_CCPTMRS1bits, B
001ab8   010f     movlb   0xf              	BANKSEL	_T6CONbits
                                           ;	.line	76; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T6CONbits.TMR6ON = 0 ;          // Turn Timer6 off
001aba   954a     bcf     0x4a, 0x2, 0x1   	BCF	_T6CONbits, 2, B
                                           ;	.line	77; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PR6 = 0xff ;                    // Set Timer6 for 15.625kHz @64MHz, 10-bit res
001abc   0eff     movlw   0xff             	MOVLW	0xff
001abe   010f     movlb   0xf              	BANKSEL	_PR6
001ac0   6f4b     movwf   0x4b, 0x1        	MOVWF	_PR6, B
001ac2   010f     movlb   0xf              	BANKSEL	_T6CONbits
                                           ;	.line	78; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T6CONbits.T6CKPS = 0b01 ;       // Set prescaler to 1:4
001ac4   514a     movf    0x4a, 0x0, 0x1   	MOVF	_T6CONbits, W, B
001ac6   0bfc     andlw   0xfc             	ANDLW	0xfc
001ac8   0901     iorlw   0x01             	IORLW	0x01
001aca   010f     movlb   0xf              	BANKSEL	_T6CONbits
001acc   6f4a     movwf   0x4a, 0x1        	MOVWF	_T6CONbits, B
001ace   010f     movlb   0xf              	BANKSEL	_T4CONbits
                                           ;	.line	80; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T4CONbits.TMR4ON = 0 ;          // Turn Timer4 off
001ad0   9551     bcf     0x51, 0x2, 0x1   	BCF	_T4CONbits, 2, B
                                           ;	.line	81; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PR4 = 0xff ;                    // Set Timer4 for 62.5kHz @64MHz, 10-bit res
001ad2   0eff     movlw   0xff             	MOVLW	0xff
001ad4   010f     movlb   0xf              	BANKSEL	_PR4
001ad6   6f52     movwf   0x52, 0x1        	MOVWF	_PR4, B
001ad8   010f     movlb   0xf              	BANKSEL	_T4CONbits
                                           ;	.line	82; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T4CONbits.T4CKPS = 0b00 ;       // Set prescaler to 1:1
001ada   5151     movf    0x51, 0x0, 0x1   	MOVF	_T4CONbits, W, B
001adc   0bfc     andlw   0xfc             	ANDLW	0xfc
001ade   010f     movlb   0xf              	BANKSEL	_T4CONbits
001ae0   6f51     movwf   0x51, 0x1        	MOVWF	_T4CONbits, B
                                           ;	.line	84; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.PSS2AC = 0b00  ;    // Pin A1 set to '0' at shutdown
001ae2   5064     movf    0x64, 0x0, 0x0   	MOVF	_ECCP2ASbits, W
001ae4   0bf3     andlw   0xf3             	ANDLW	0xf3
001ae6   6e64     movwf   0x64, 0x0        	MOVWF	_ECCP2ASbits
                                           ;	.line	85; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.PSS2BD = 0b00  ;    // Pin A2 set to '0' at shutdown
001ae8   5064     movf    0x64, 0x0, 0x0   	MOVF	_ECCP2ASbits, W
001aea   0bfc     andlw   0xfc             	ANDLW	0xfc
001aec   6e64     movwf   0x64, 0x0        	MOVWF	_ECCP2ASbits
                                           ;	.line	86; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.PSS1AC = 0b00  ;    // Pin B1 set to '0' at shutdown
001aee   50b6     movf    0xb6, 0x0, 0x0   	MOVF	_ECCP1ASbits, W
001af0   0bf3     andlw   0xf3             	ANDLW	0xf3
001af2   6eb6     movwf   0xb6, 0x0        	MOVWF	_ECCP1ASbits
                                           ;	.line	87; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.PSS1BD = 0b00  ;    // Pin B2 set to '0' at shutdown
001af4   50b6     movf    0xb6, 0x0, 0x0   	MOVF	_ECCP1ASbits, W
001af6   0bfc     andlw   0xfc             	ANDLW	0xfc
001af8   6eb6     movwf   0xb6, 0x0        	MOVWF	_ECCP1ASbits
                                           ;	.line	89; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.CCP2AS = 0x00  ;    // Disable auto-shutdown
001afa   5064     movf    0x64, 0x0, 0x0   	MOVF	_ECCP2ASbits, W
001afc   0b8f     andlw   0x8f             	ANDLW	0x8f
001afe   6e64     movwf   0x64, 0x0        	MOVWF	_ECCP2ASbits
                                           ;	.line	90; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.CCP1AS = 0x00  ;    
001b00   50b6     movf    0xb6, 0x0, 0x0   	MOVF	_ECCP1ASbits, W
001b02   0b8f     andlw   0x8f             	ANDLW	0x8f
001b04   6eb6     movwf   0xb6, 0x0        	MOVWF	_ECCP1ASbits
                                           ;	.line	92; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.CCP2ASE = 1    ;    // Force shutdown
001b06   8e64     bsf     0x64, 0x7, 0x0   	BSF	_ECCP2ASbits, 7
                                           ;	.line	93; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.CCP1ASE = 1    ;    
001b08   8eb6     bsf     0xb6, 0x7, 0x0   	BSF	_ECCP1ASbits, 7
                                           ;	.line	95; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.P2M = 0b10 ;
001b0a   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
001b0c   0b3f     andlw   0x3f             	ANDLW	0x3f
001b0e   0980     iorlw   0x80             	IORLW	0x80
001b10   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	96; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.CCP2M = 0b1111 ;    // Phase A Half-bridge mode
001b12   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
001b14   0bf0     andlw   0xf0             	ANDLW	0xf0
001b16   090f     iorlw   0x0f             	IORLW	0x0f
001b18   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	97; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.P1M = 0b10 ;
001b1a   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
001b1c   0b3f     andlw   0x3f             	ANDLW	0x3f
001b1e   0980     iorlw   0x80             	IORLW	0x80
001b20   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	98; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.CCP1M = 0b1111 ;    // Phase B Half-bridge mode
001b22   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
001b24   0bf0     andlw   0xf0             	ANDLW	0xf0
001b26   090f     iorlw   0x0f             	IORLW	0x0f
001b28   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
001b2a   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
                                           ;	.line	100; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP5CONbits.CCP5M = 0b1100 ;    // A Ref PWM
001b2c   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
001b2e   0bf0     andlw   0xf0             	ANDLW	0xf0
001b30   090c     iorlw   0x0c             	IORLW	0x0c
001b32   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
001b34   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
001b36   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
                                           ;	.line	101; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP4CONbits.CCP4M = 0b1100 ;    // B Ref PWM
001b38   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
001b3a   0bf0     andlw   0xf0             	ANDLW	0xf0
001b3c   090c     iorlw   0x0c             	IORLW	0x0c
001b3e   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
001b40   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	103; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PWM2CONbits.P2DC = db_time ;    // 16 * 4 * Tosc = 1us dead-band
001b42   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b44   0b7f     andlw   0x7f             	ANDLW	0x7f
001b46   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001b48   5065     movf    0x65, 0x0, 0x0   	MOVF	_PWM2CONbits, W
001b4a   0b80     andlw   0x80             	ANDLW	0x80
001b4c   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
001b4e   6e65     movwf   0x65, 0x0        	MOVWF	_PWM2CONbits
                                           ;	.line	104; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PWM1CONbits.P1DC = db_time ; 
001b50   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b52   0b7f     andlw   0x7f             	ANDLW	0x7f
001b54   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001b56   50b7     movf    0xb7, 0x0, 0x0   	MOVF	_PWM1CONbits, W
001b58   0b80     andlw   0x80             	ANDLW	0x80
001b5a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
001b5c   6eb7     movwf   0xb7, 0x0        	MOVWF	_PWM1CONbits
                                           ;	.line	106; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC0 = 0 ;          // Enable port drivers
001b5e   9094     bcf     0x94, 0x0, 0x0   	BCF	_TRISCbits, 0
                                           ;	.line	107; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC1 = 0 ;
001b60   9294     bcf     0x94, 0x1, 0x0   	BCF	_TRISCbits, 1
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC2 = 0 ;
001b62   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
                                           ;	.line	109; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD5 = 0 ;
001b64   9a95     bcf     0x95, 0x5, 0x0   	BCF	_TRISDbits, 5
                                           ;	.line	110; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 0 ;
001b66   9295     bcf     0x95, 0x1, 0x0   	BCF	_TRISDbits, 1
                                           ;	.line	111; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 0 ;
001b68   9496     bcf     0x96, 0x2, 0x0   	BCF	_TRISEbits, 2
                                           ;	.line	113; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPR2L = 128 ;
001b6a   0e80     movlw   0x80             	MOVLW	0x80
001b6c   6e67     movwf   0x67, 0x0        	MOVWF	_CCPR2L
                                           ;	.line	114; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.DC2B = 0 ;
001b6e   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
001b70   0bcf     andlw   0xcf             	ANDLW	0xcf
001b72   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	116; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPR1L = 128 ;
001b74   0e80     movlw   0x80             	MOVLW	0x80
001b76   6ebe     movwf   0xbe, 0x0        	MOVWF	_CCPR1L
                                           ;	.line	117; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.DC1B = 0 ;
001b78   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
001b7a   0bcf     andlw   0xcf             	ANDLW	0xcf
001b7c   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	119; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPR5L = 32 ;
001b7e   0e20     movlw   0x20             	MOVLW	0x20
001b80   010f     movlb   0xf              	BANKSEL	_CCPR5L
001b82   6f55     movwf   0x55, 0x1        	MOVWF	_CCPR5L, B
001b84   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
                                           ;	.line	120; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP5CONbits.DC5B = 0 ;
001b86   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
001b88   0bcf     andlw   0xcf             	ANDLW	0xcf
001b8a   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
001b8c   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ;	.line	122; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPR4L = 32 ;
001b8e   0e20     movlw   0x20             	MOVLW	0x20
001b90   010f     movlb   0xf              	BANKSEL	_CCPR4L
001b92   6f58     movwf   0x58, 0x1        	MOVWF	_CCPR4L, B
001b94   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
                                           ;	.line	123; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP4CONbits.DC4B = 0 ;
001b96   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
001b98   0bcf     andlw   0xcf             	ANDLW	0xcf
001b9a   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
001b9c   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
001b9e   010f     movlb   0xf              	BANKSEL	_T6CONbits
                                           ;	.line	125; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T6CONbits.TMR6ON = 1 ;          // Start PWM timer
001ba0   854a     bsf     0x4a, 0x2, 0x1   	BSF	_T6CONbits, 2, B
001ba2   010f     movlb   0xf              	BANKSEL	_T4CONbits
                                           ;	.line	126; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T4CONbits.TMR4ON = 1 ;          // Start PWM timer
001ba4   8551     bsf     0x51, 0x2, 0x1   	BSF	_T4CONbits, 2, B
                                           ;	.line	128; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.CCP2ASE = 0    ;    // Enable PWM
001ba6   9e64     bcf     0x64, 0x7, 0x0   	BCF	_ECCP2ASbits, 7
                                           ;	.line	129; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.CCP1ASE = 0    ;    
001ba8   9eb6     bcf     0xb6, 0x7, 0x0   	BCF	_ECCP1ASbits, 7
                                           ;	.line	130; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
001baa   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001bac   f000
001bae   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001bb0   ffd9
001bb2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__ioSetup	code
                                           _ioSetup:
                                           ;	.line	31; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void ioSetup(void) {
002b5a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b5c   ffe5
002b5e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b60   ffd9
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB4 = 0 ;     // Start with a cleared 'fault' signal
002b62   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	33; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 0 ;
002b64   9881     bcf     0x81, 0x4, 0x0   	BCF	_PORTBbits, 4
002b66   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD2 = 0 ;
002b68   953b     bcf     0x3b, 0x2, 0x1   	BCF	_ANSELDbits, 2, B
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.RD2 = 0 ;     // Start with blue LED off
002b6a   9495     bcf     0x95, 0x2, 0x0   	BCF	_TRISDbits, 2
                                           ;	.line	37; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTDbits.RD2 = 0 ;
002b6c   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
002b6e   010f     movlb   0xf              	BANKSEL	_ANSELC
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELC = 0x00 ;         // Disable Port-C as analog input
002b70   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC5 = 0 ;     // Start with red LED off
002b72   9a94     bcf     0x94, 0x5, 0x0   	BCF	_TRISCbits, 5
                                           ;	.line	42; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 0 ;
002b74   9a82     bcf     0x82, 0x5, 0x0   	BCF	_PORTCbits, 5
                                           ;	.line	44; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA4 = 0 ;
002b76   9892     bcf     0x92, 0x4, 0x0   	BCF	_TRISAbits, 4
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA4 = 0 ;
002b78   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
002b7a   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	47; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA5 = 0 ;
002b7c   9b38     bcf     0x38, 0x5, 0x1   	BCF	_ANSELAbits, 5, B
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA5 = 0 ;
002b7e   9a92     bcf     0x92, 0x5, 0x0   	BCF	_TRISAbits, 5
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA5 = 0 ;
002b80   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
002b82   010f     movlb   0xf              	BANKSEL	_ANSELB
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELB = 0x00 ;         // Disable port B analog input
002b84   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
002b86   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD5 = 0 ;  
002b88   9b3b     bcf     0x3b, 0x5, 0x1   	BCF	_ANSELDbits, 5, B
                                           ;	.line	55; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB0 = 1 ;     // 'step', 'dir' and 'enable' as inputs
002b8a   8093     bsf     0x93, 0x0, 0x0   	BSF	_TRISBbits, 0
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB2 = 1 ;
002b8c   8493     bsf     0x93, 0x2, 0x0   	BSF	_TRISBbits, 2
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB3 = 1 ;
002b8e   8693     bsf     0x93, 0x3, 0x0   	BSF	_TRISBbits, 3
                                           ;	.line	58; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002b90   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b92   ffd9
002b94   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  850 (0x0352) bytes ( 0.65%)
                                           ;           	  425 (0x01a9) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.2 #10526 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_read_regs
                                           	global	_store_regs

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_registers__store_regs	code
                                           _store_regs:
                                           ;	.line	43; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void store_regs(uint8_t * i2c_regs, uint8_t num_regs) {
0020da   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0020dc   ffe5
0020de   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0020e0   ffd9
0020e2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0020e4   ffe5
0020e6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0020e8   ffe5
0020ea   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0020ec   ffe5
0020ee   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0020f0   ffe5
0020f2   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0020f4   ffe5
0020f6   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0020f8   ffe5
0020fa   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0020fc   ffe5
0020fe   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002100   ffe5
002102   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
002104   ffe5
002106   0e02     movlw   0x02             	MOVLW	0x02
002108   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00210a   f000
00210c   0e03     movlw   0x03             	MOVLW	0x03
00210e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002110   f001
002112   0e04     movlw   0x04             	MOVLW	0x04
002114   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002116   f002
002118   0e05     movlw   0x05             	MOVLW	0x05
00211a   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
00211c   f003
                                           ;	.line	46; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
00211e   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
002120   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00129_DS_:
002122   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002124   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
002126   e22a     bc      0x00217c         	BC	_00131_DS_
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ; 
002128   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
00212a   ffa9
                                           ;	.line	50; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
00212c   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
00212e   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	52; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
002130   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	val = EEDATA ;
002132   cfa8     movff   0xfa8, 0x005     	MOVFF	_EEDATA, r0x05
002134   f005
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	if (val != i2c_regs[i]) {
002136   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002138   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00213a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00213c   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
00213e   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002140   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002142   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002144   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002146   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002148   c006     movff   0x006, 0xfe9     	MOVFF	r0x06, FSR0L
00214a   ffe9
00214c   c007     movff   0x007, 0xff3     	MOVFF	r0x07, PRODL
00214e   fff3
002150   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
002152   ec6d     call    0x002cda, 0x0    	CALL	__gptrget1
002154   f016
002156   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002158   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00215a   1806     xorwf   0x06, 0x0, 0x0   	XORWF	r0x06, W
00215c   e00d     bz      0x002178         	BZ	_00130_DS_
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEDATA = i2c_regs[i] ;      // Prepare data
00215e   c006     movff   0x006, 0xfa8     	MOVFF	r0x06, _EEDATA
002160   ffa8
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
002162   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
002164   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 1 ;       // Allow write cycle
002166   84a6     bsf     0xa6, 0x2, 0x0   	BSF	_EECON1bits, 2
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 0 ;        // Disable interrupts
002168   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0x55 ;             // "magic" sequence for write
00216a   0e55     movlw   0x55             	MOVLW	0x55
00216c   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0xaa ;
00216e   0eaa     movlw   0xaa             	MOVLW	0xaa
002170   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WR = 1 ;         // Initiate write
002172   82a6     bsf     0xa6, 0x1, 0x0   	BSF	_EECON1bits, 1
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 1 ;        // Enable interrupts
002174   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 0 ;       // Prevent write cycle
002176   94a6     bcf     0xa6, 0x2, 0x0   	BCF	_EECON1bits, 2
                                           _00130_DS_:
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
002178   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
00217a   d7d3     bra     0x002122         	BRA	_00129_DS_
                                           _00131_DS_:
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
00217c   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
00217e   f008
002180   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002182   f007
002184   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002186   f006
002188   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00218a   f005
00218c   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00218e   f004
002190   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002192   f003
002194   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002196   f002
002198   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00219a   f001
00219c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00219e   f000
0021a0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0021a2   ffd9
0021a4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_registers__read_regs	code
                                           _read_regs:
                                           ;	.line	29; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void read_regs(uint8_t * i2c_regs, uint8_t num_regs) {
00247e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002480   ffe5
002482   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002484   ffd9
002486   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002488   ffe5
00248a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00248c   ffe5
00248e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002490   ffe5
002492   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002494   ffe5
002496   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002498   ffe5
00249a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00249c   ffe5
00249e   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0024a0   ffe5
0024a2   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0024a4   ffe5
0024a6   0e02     movlw   0x02             	MOVLW	0x02
0024a8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0024aa   f000
0024ac   0e03     movlw   0x03             	MOVLW	0x03
0024ae   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0024b0   f001
0024b2   0e04     movlw   0x04             	MOVLW	0x04
0024b4   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0024b6   f002
0024b8   0e05     movlw   0x05             	MOVLW	0x05
0024ba   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0024bc   f003
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
0024be   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
0024c0   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00107_DS_:
0024c2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0024c4   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
0024c6   e219     bc      0x0024fa         	BC	_00109_DS_
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ;              // Read I2C address from 00 location
0024c8   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
0024ca   ffa9
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
0024cc   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	37; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
0024ce   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
0024d0   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	i2c_regs[i] = EEDATA ;
0024d2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0024d4   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0024d6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0024d8   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0024da   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0024dc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0024de   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0024e0   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0024e2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0024e4   cfa8     movff   0xfa8, 0xfe5     	MOVFF	_EEDATA, POSTDEC1
0024e6   ffe5
0024e8   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0024ea   ffe9
0024ec   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0024ee   fff3
0024f0   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0024f2   eca6     call    0x002d4c, 0x0    	CALL	__gptrput1
0024f4   f016
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
0024f6   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0024f8   d7e4     bra     0x0024c2         	BRA	_00107_DS_
                                           _00109_DS_:
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
0024fa   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0024fc   f007
0024fe   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002500   f006
002502   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002504   f005
002506   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002508   f004
00250a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00250c   f003
00250e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002510   f002
002512   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002514   f001
002516   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002518   f000
00251a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00251c   ffd9
00251e   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  366 (0x016e) bytes ( 0.28%)
                                           ;           	  183 (0x00b7) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    9 (0x0009) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.2 #10526 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_mult_uint8
                                           	global	_mult_int8
                                           	global	_mult_uint16
                                           	global	_mult_int16
                                           	global	_set_max_out
                                           	global	_set_min_out
                                           	global	_init_result
                                           	global	_calc_pi
                                           	global	_a16_
                                           	global	_res_
                                           	global	__max_out
                                           	global	__min_out
                                           	global	__integ_sat

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput2
                                           	extern	__gptrget2
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1


                                           bank0	udata
                                           _a_	res	1
                                           _b_	res	1
                                           _a16_	res	2
                                           _b16_	res	2
                                           _res_	res	4

                                           udata_pi_controller_0	udata
                                           __max_out	res	2

                                           udata_pi_controller_1	udata
                                           __integ_sat	res	2

                                           udata_pi_controller_2	udata
                                           __min_out	res	2

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pi_controller__calc_pi	code
                                           _calc_pi:
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	void calc_pi(pi_result_t * result, int16_t measured, int16_t setpoint) {
000548   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00054a   ffe5
00054c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00054e   ffd9
000550   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000552   ffe5
000554   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000556   ffe5
000558   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00055a   ffe5
00055c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00055e   ffe5
000560   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000562   ffe5
000564   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000566   ffe5
000568   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00056a   ffe5
00056c   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00056e   ffe5
000570   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
000572   ffe5
000574   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
000576   ffe5
000578   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00057a   ffe5
00057c   c00b     movff   0x00b, 0xfe5     	MOVFF	r0x0b, POSTDEC1
00057e   ffe5
000580   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
000582   ffe5
000584   c00d     movff   0x00d, 0xfe5     	MOVFF	r0x0d, POSTDEC1
000586   ffe5
000588   c00e     movff   0x00e, 0xfe5     	MOVFF	r0x0e, POSTDEC1
00058a   ffe5
00058c   c00f     movff   0x00f, 0xfe5     	MOVFF	r0x0f, POSTDEC1
00058e   ffe5
000590   c010     movff   0x010, 0xfe5     	MOVFF	r0x10, POSTDEC1
000592   ffe5
000594   0e02     movlw   0x02             	MOVLW	0x02
000596   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000598   f000
00059a   0e03     movlw   0x03             	MOVLW	0x03
00059c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00059e   f001
0005a0   0e04     movlw   0x04             	MOVLW	0x04
0005a2   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0005a4   f002
0005a6   0e05     movlw   0x05             	MOVLW	0x05
0005a8   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0005aa   f003
0005ac   0e06     movlw   0x06             	MOVLW	0x06
0005ae   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
0005b0   f004
0005b2   0e07     movlw   0x07             	MOVLW	0x07
0005b4   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
0005b6   f005
0005b8   0e08     movlw   0x08             	MOVLW	0x08
0005ba   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
0005bc   f006
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	if (result->kp == 0) {
0005be   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0005c0   0f04     addlw   0x04             	ADDLW	0x04
0005c2   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0005c4   0e00     movlw   0x00             	MOVLW	0x00
0005c6   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0005c8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0005ca   0e00     movlw   0x00             	MOVLW	0x00
0005cc   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0005ce   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0005d0   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0005d2   ffe9
0005d4   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0005d6   fff3
0005d8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0005da   ece3     call    0x002bc6, 0x0    	CALL	__gptrget2
0005dc   f015
0005de   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0005e0   cff3     movff   0xff3, 0x00b     	MOVFF	PRODL, r0x0b
0005e2   f00b
0005e4   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0005e6   100b     iorwf   0x0b, 0x0, 0x0   	IORWF	r0x0b, W
0005e8   e10a     bnz     0x0005fe         	BNZ	_00148_DS_
                                           ;	.line	58; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	output = setpoint ;
0005ea   c005     movff   0x005, 0x00c     	MOVFF	r0x05, r0x0c
0005ec   f00c
0005ee   c006     movff   0x006, 0x00d     	MOVFF	r0x06, r0x0d
0005f0   f00d
0005f2   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0005f4   be06     btfsc   0x06, 0x7, 0x0   	BTFSC	r0x06, 7
0005f6   0eff     movlw   0xff             	MOVLW	0xff
0005f8   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0005fa   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
0005fc   d137     bra     0x00086c         	BRA	_00149_DS_
                                           _00148_DS_:
                                           ;	.line	62; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	error = setpoint - measured ;
0005fe   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000600   5c05     subwf   0x05, 0x0, 0x0   	SUBWF	r0x05, W
000602   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000604   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000606   5806     subwfb  0x06, 0x0, 0x0   	SUBWFB	r0x06, W
000608   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	output = mult_int16(result->kp, error) >> 4 ;
00060a   c00a     movff   0x00a, 0x019     	MOVFF	r0x0a, _a16_
00060c   f019
00060e   c00b     movff   0x00b, 0x01a     	MOVFF	r0x0b, (_a16_ + 1)
000610   f01a
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	b16_ = b ;
000612   c003     movff   0x003, 0x01b     	MOVFF	r0x03, _b16_
000614   f01b
000616   c004     movff   0x004, 0x01c     	MOVFF	r0x04, (_b16_ + 1)
000618   f01c
00061a   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
00061c   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
00061e   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
000620   f01e
000622   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
000624   f01d
000626   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
000628   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
00062a   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
00062c   f020
00062e   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
000630   f01f
000632   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
000634   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
000636   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
000638   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
00063a   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
00063c   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
00063e   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
000640   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
000642   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
000644   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
000646   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
000648   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
00064a   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
00064c   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
00064e   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
000650   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
000652   ae1c     btfss   0x1c, 0x7, 0x0   	btfss	(_b16_ + 1), 7
000654   d004     bra     0x00065e         	bra	$+10
000656   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
000658   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
00065a   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
00065c   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
00065e   ae1a     btfss   0x1a, 0x7, 0x0   	btfss	(_a16_ + 1), 7
000660   d004     bra     0x00066a         	bra	$+10
000662   501b     movf    0x1b, 0x0, 0x0   	movf	_b16_, W
000664   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
000666   501c     movf    0x1c, 0x0, 0x0   	movf	(_b16_ + 1), W
000668   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
                                           	
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
00066a   c01d     movff   0x01d, 0x005     	MOVFF	_res_, r0x05
00066c   f005
00066e   c01e     movff   0x01e, 0x006     	MOVFF	(_res_ + 1), r0x06
000670   f006
000672   c01f     movff   0x01f, 0x00a     	MOVFF	(_res_ + 2), r0x0a
000674   f00a
000676   c020     movff   0x020, 0x00b     	MOVFF	(_res_ + 3), r0x0b
000678   f00b
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	output = mult_int16(result->kp, error) >> 4 ;
00067a   3805     swapf   0x05, 0x0, 0x0   	SWAPF	r0x05, W
00067c   0b0f     andlw   0x0f             	ANDLW	0x0f
00067e   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
000680   3806     swapf   0x06, 0x0, 0x0   	SWAPF	r0x06, W
000682   6e0d     movwf   0x0d, 0x0        	MOVWF	r0x0d
000684   0bf0     andlw   0xf0             	ANDLW	0xf0
000686   1a0d     xorwf   0x0d, 0x1, 0x0   	XORWF	r0x0d, F
000688   260c     addwf   0x0c, 0x1, 0x0   	ADDWF	r0x0c, F
00068a   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00068c   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00068e   0bf0     andlw   0xf0             	ANDLW	0xf0
000690   120d     iorwf   0x0d, 0x1, 0x0   	IORWF	r0x0d, F
000692   380a     swapf   0x0a, 0x0, 0x0   	SWAPF	r0x0a, W
000694   0b0f     andlw   0x0f             	ANDLW	0x0f
000696   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
000698   380b     swapf   0x0b, 0x0, 0x0   	SWAPF	r0x0b, W
00069a   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
00069c   0bf0     andlw   0xf0             	ANDLW	0xf0
00069e   1a0f     xorwf   0x0f, 0x1, 0x0   	XORWF	r0x0f, F
0006a0   260e     addwf   0x0e, 0x1, 0x0   	ADDWF	r0x0e, F
0006a2   0ef0     movlw   0xf0             	MOVLW	0xf0
0006a4   b60f     btfsc   0x0f, 0x3, 0x0   	BTFSC	r0x0f, 3
0006a6   260f     addwf   0x0f, 0x1, 0x0   	ADDWF	r0x0f, F
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	if(result->kp != 0) {
0006a8   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0006aa   ffe9
0006ac   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
0006ae   fff3
0006b0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0006b2   ece3     call    0x002bc6, 0x0    	CALL	__gptrget2
0006b4   f015
0006b6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0006b8   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
0006ba   f008
0006bc   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0006be   1008     iorwf   0x08, 0x0, 0x0   	IORWF	r0x08, W
0006c0   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
0006c2   d0d4     bra     0x00086c         	BRA	_00149_DS_
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->out_integ += mult_int16(result->ki, error) >> 9 ;
0006c4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0006c6   0f02     addlw   0x02             	ADDLW	0x02
0006c8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0006ca   0e00     movlw   0x00             	MOVLW	0x00
0006cc   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0006ce   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0006d0   0e00     movlw   0x00             	MOVLW	0x00
0006d2   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0006d4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0006d6   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0006d8   ffe9
0006da   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0006dc   fff3
0006de   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0006e0   ece3     call    0x002bc6, 0x0    	CALL	__gptrget2
0006e2   f015
0006e4   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0006e6   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
0006e8   f009
0006ea   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0006ec   0f06     addlw   0x06             	ADDLW	0x06
0006ee   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0006f0   0e00     movlw   0x00             	MOVLW	0x00
0006f2   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0006f4   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
0006f6   0e00     movlw   0x00             	MOVLW	0x00
0006f8   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0006fa   6e10     movwf   0x10, 0x0        	MOVWF	r0x10
0006fc   c00a     movff   0x00a, 0xfe9     	MOVFF	r0x0a, FSR0L
0006fe   ffe9
000700   c00b     movff   0x00b, 0xff3     	MOVFF	r0x0b, PRODL
000702   fff3
000704   5010     movf    0x10, 0x0, 0x0   	MOVF	r0x10, W
000706   ece3     call    0x002bc6, 0x0    	CALL	__gptrget2
000708   f015
00070a   0100     movlb   0x0              	BANKSEL	_a16_
00070c   6f19     movwf   0x19, 0x1        	MOVWF	_a16_, B
00070e   cff3     movff   0xff3, 0x01a     	MOVFF	PRODL, (_a16_ + 1)
000710   f01a
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	b16_ = b ;
000712   c003     movff   0x003, 0x01b     	MOVFF	r0x03, _b16_
000714   f01b
000716   c004     movff   0x004, 0x01c     	MOVFF	r0x04, (_b16_ + 1)
000718   f01c
00071a   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
00071c   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
00071e   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
000720   f01e
000722   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
000724   f01d
000726   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
000728   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
00072a   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
00072c   f020
00072e   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
000730   f01f
000732   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
000734   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
000736   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
000738   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
00073a   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
00073c   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
00073e   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
000740   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
000742   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
000744   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
000746   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
000748   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
00074a   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
00074c   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
00074e   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
000750   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
000752   ae1c     btfss   0x1c, 0x7, 0x0   	btfss	(_b16_ + 1), 7
000754   d004     bra     0x00075e         	bra	$+10
000756   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
000758   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
00075a   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
00075c   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
00075e   ae1a     btfss   0x1a, 0x7, 0x0   	btfss	(_a16_ + 1), 7
000760   d004     bra     0x00076a         	bra	$+10
000762   501b     movf    0x1b, 0x0, 0x0   	movf	_b16_, W
000764   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
000766   501c     movf    0x1c, 0x0, 0x0   	movf	(_b16_ + 1), W
000768   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
                                           	
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
00076a   c01d     movff   0x01d, 0x003     	MOVFF	_res_, r0x03
00076c   f003
00076e   c01e     movff   0x01e, 0x004     	MOVFF	(_res_ + 1), r0x04
000770   f004
000772   c01f     movff   0x01f, 0x00a     	MOVFF	(_res_ + 2), r0x0a
000774   f00a
000776   c020     movff   0x020, 0x00b     	MOVFF	(_res_ + 3), r0x0b
000778   f00b
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->out_integ += mult_int16(result->ki, error) >> 9 ;
00077a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00077c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00077e   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000780   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000782   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
000784   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000786   340b     rlcf    0x0b, 0x0, 0x0   	RLCF	r0x0b, W
000788   6a0b     clrf    0x0b, 0x0        	CLRF	r0x0b
00078a   be0a     btfsc   0x0a, 0x7, 0x0   	BTFSC	r0x0a, 7
00078c   680b     setf    0x0b, 0x0        	SETF	r0x0b
00078e   320a     rrcf    0x0a, 0x1, 0x0   	RRCF	r0x0a, F
000790   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000792   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
000794   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000796   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
000798   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00079a   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
00079c   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00079e   ffe5
0007a0   c009     movff   0x009, 0xff4     	MOVFF	r0x09, PRODH
0007a2   fff4
0007a4   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0007a6   ffe9
0007a8   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0007aa   fff3
0007ac   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0007ae   ec99     call    0x002d32, 0x0    	CALL	__gptrput2
0007b0   f016
0007b2   0102     movlb   0x2              	BANKSEL	(__integ_sat + 1)
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	if (result->out_integ > _integ_sat) result->out_integ = _integ_sat ;
0007b4   5187     movf    0x87, 0x0, 0x1   	MOVF	(__integ_sat + 1), W, B
0007b6   0f80     addlw   0x80             	ADDLW	0x80
0007b8   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
0007ba   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0007bc   0f80     addlw   0x80             	ADDLW	0x80
0007be   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
0007c0   e103     bnz     0x0007c8         	BNZ	_00183_DS_
0007c2   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0007c4   0102     movlb   0x2              	BANKSEL	__integ_sat
0007c6   5d86     subwf   0x86, 0x0, 0x1   	SUBWF	__integ_sat, W, B
                                           _00183_DS_:
0007c8   e20b     bc      0x0007e0         	BC	_00142_DS_
0007ca   c286     movff   0x286, 0xfe5     	MOVFF	__integ_sat, POSTDEC1
0007cc   ffe5
0007ce   c287     movff   0x287, 0xff4     	MOVFF	(__integ_sat + 1), PRODH
0007d0   fff4
0007d2   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0007d4   ffe9
0007d6   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0007d8   fff3
0007da   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0007dc   ec99     call    0x002d32, 0x0    	CALL	__gptrput2
0007de   f016
                                           _00142_DS_:
                                           ;	.line	69; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	if (result->out_integ < -_integ_sat) result->out_integ = -_integ_sat ;
0007e0   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0007e2   ffe9
0007e4   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0007e6   fff3
0007e8   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0007ea   ece3     call    0x002bc6, 0x0    	CALL	__gptrget2
0007ec   f015
0007ee   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0007f0   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0007f2   f004
0007f4   0102     movlb   0x2              	BANKSEL	(__integ_sat + 1)
0007f6   1d87     comf    0x87, 0x0, 0x1   	COMF	(__integ_sat + 1), W, B
0007f8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0007fa   0102     movlb   0x2              	BANKSEL	__integ_sat
0007fc   1d86     comf    0x86, 0x0, 0x1   	COMF	__integ_sat, W, B
0007fe   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000800   4a08     infsnz  0x08, 0x1, 0x0   	INFSNZ	r0x08, F
000802   2a09     incf    0x09, 0x1, 0x0   	INCF	r0x09, F
000804   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000806   0f80     addlw   0x80             	ADDLW	0x80
000808   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
00080a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00080c   0f80     addlw   0x80             	ADDLW	0x80
00080e   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
000810   e102     bnz     0x000816         	BNZ	_00185_DS_
000812   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000814   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
                                           _00185_DS_:
000816   e213     bc      0x00083e         	BC	_00144_DS_
000818   0102     movlb   0x2              	BANKSEL	(__integ_sat + 1)
00081a   1d87     comf    0x87, 0x0, 0x1   	COMF	(__integ_sat + 1), W, B
00081c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00081e   0102     movlb   0x2              	BANKSEL	__integ_sat
000820   1d86     comf    0x86, 0x0, 0x1   	COMF	__integ_sat, W, B
000822   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000824   4a03     infsnz  0x03, 0x1, 0x0   	INFSNZ	r0x03, F
000826   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
000828   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00082a   ffe5
00082c   c004     movff   0x004, 0xff4     	MOVFF	r0x04, PRODH
00082e   fff4
000830   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
000832   ffe9
000834   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
000836   fff3
000838   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00083a   ec99     call    0x002d32, 0x0    	CALL	__gptrput2
00083c   f016
                                           _00144_DS_:
                                           ;	.line	71; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	output += result->out_integ ;
00083e   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
000840   ffe9
000842   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
000844   fff3
000846   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000848   ece3     call    0x002bc6, 0x0    	CALL	__gptrget2
00084a   f015
00084c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00084e   cff3     movff   0xff3, 0x006     	MOVFF	PRODL, r0x06
000850   f006
000852   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
000854   be06     btfsc   0x06, 0x7, 0x0   	BTFSC	r0x06, 7
000856   0eff     movlw   0xff             	MOVLW	0xff
000858   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00085a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00085c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00085e   260c     addwf   0x0c, 0x1, 0x0   	ADDWF	r0x0c, F
000860   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000862   220d     addwfc  0x0d, 0x1, 0x0   	ADDWFC	r0x0d, F
000864   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000866   220e     addwfc  0x0e, 0x1, 0x0   	ADDWFC	r0x0e, F
000868   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00086a   220f     addwfc  0x0f, 0x1, 0x0   	ADDWFC	r0x0f, F
                                           _00149_DS_:
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	if (output > _max_out) output = _max_out ;
00086c   c284     movff   0x284, 0x003     	MOVFF	__max_out, r0x03
00086e   f003
000870   c285     movff   0x285, 0x004     	MOVFF	(__max_out + 1), r0x04
000872   f004
000874   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
000876   0102     movlb   0x2              	BANKSEL	(__max_out + 1)
000878   bf85     btfsc   0x85, 0x7, 0x1   	BTFSC	(__max_out + 1), 7
00087a   0eff     movlw   0xff             	MOVLW	0xff
00087c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00087e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000880   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000882   0f80     addlw   0x80             	ADDLW	0x80
000884   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
000886   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
000888   0f80     addlw   0x80             	ADDLW	0x80
00088a   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
00088c   e108     bnz     0x00089e         	BNZ	_00187_DS_
00088e   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
000890   5c05     subwf   0x05, 0x0, 0x0   	SUBWF	r0x05, W
000892   e105     bnz     0x00089e         	BNZ	_00187_DS_
000894   500d     movf    0x0d, 0x0, 0x0   	MOVF	r0x0d, W
000896   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
000898   e102     bnz     0x00089e         	BNZ	_00187_DS_
00089a   500c     movf    0x0c, 0x0, 0x0   	MOVF	r0x0c, W
00089c   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
                                           _00187_DS_:
00089e   e20b     bc      0x0008b6         	BC	_00153_DS_
0008a0   c284     movff   0x284, 0x00c     	MOVFF	__max_out, r0x0c
0008a2   f00c
0008a4   c285     movff   0x285, 0x00d     	MOVFF	(__max_out + 1), r0x0d
0008a6   f00d
0008a8   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0008aa   0102     movlb   0x2              	BANKSEL	(__max_out + 1)
0008ac   bf85     btfsc   0x85, 0x7, 0x1   	BTFSC	(__max_out + 1), 7
0008ae   0eff     movlw   0xff             	MOVLW	0xff
0008b0   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0008b2   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
0008b4   d024     bra     0x0008fe         	BRA	_00154_DS_
                                           _00153_DS_:
                                           ;	.line	76; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	else if (output < _min_out) output = _min_out ;
0008b6   c288     movff   0x288, 0x003     	MOVFF	__min_out, r0x03
0008b8   f003
0008ba   c289     movff   0x289, 0x004     	MOVFF	(__min_out + 1), r0x04
0008bc   f004
0008be   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0008c0   0102     movlb   0x2              	BANKSEL	(__min_out + 1)
0008c2   bf89     btfsc   0x89, 0x7, 0x1   	BTFSC	(__min_out + 1), 7
0008c4   0eff     movlw   0xff             	MOVLW	0xff
0008c6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0008c8   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0008ca   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
0008cc   0f80     addlw   0x80             	ADDLW	0x80
0008ce   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
0008d0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0008d2   0f80     addlw   0x80             	ADDLW	0x80
0008d4   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
0008d6   e108     bnz     0x0008e8         	BNZ	_00188_DS_
0008d8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0008da   5c0e     subwf   0x0e, 0x0, 0x0   	SUBWF	r0x0e, W
0008dc   e105     bnz     0x0008e8         	BNZ	_00188_DS_
0008de   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0008e0   5c0d     subwf   0x0d, 0x0, 0x0   	SUBWF	r0x0d, W
0008e2   e102     bnz     0x0008e8         	BNZ	_00188_DS_
0008e4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0008e6   5c0c     subwf   0x0c, 0x0, 0x0   	SUBWF	r0x0c, W
                                           _00188_DS_:
0008e8   e20a     bc      0x0008fe         	BC	_00154_DS_
0008ea   c288     movff   0x288, 0x00c     	MOVFF	__min_out, r0x0c
0008ec   f00c
0008ee   c289     movff   0x289, 0x00d     	MOVFF	(__min_out + 1), r0x0d
0008f0   f00d
0008f2   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0008f4   0102     movlb   0x2              	BANKSEL	(__min_out + 1)
0008f6   bf89     btfsc   0x89, 0x7, 0x1   	BTFSC	(__min_out + 1), 7
0008f8   0eff     movlw   0xff             	MOVLW	0xff
0008fa   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0008fc   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
                                           _00154_DS_:
                                           ;	.line	78; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->output = output ;  
0008fe   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
000900   ffe5
000902   c00d     movff   0x00d, 0xff4     	MOVFF	r0x0d, PRODH
000904   fff4
000906   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000908   ffe9
00090a   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00090c   fff3
00090e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000910   ec99     call    0x002d32, 0x0    	CALL	__gptrput2
000912   f016
                                           ;	.line	79; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	}
000914   cfe4     movff   0xfe4, 0x010     	MOVFF	PREINC1, r0x10
000916   f010
000918   cfe4     movff   0xfe4, 0x00f     	MOVFF	PREINC1, r0x0f
00091a   f00f
00091c   cfe4     movff   0xfe4, 0x00e     	MOVFF	PREINC1, r0x0e
00091e   f00e
000920   cfe4     movff   0xfe4, 0x00d     	MOVFF	PREINC1, r0x0d
000922   f00d
000924   cfe4     movff   0xfe4, 0x00c     	MOVFF	PREINC1, r0x0c
000926   f00c
000928   cfe4     movff   0xfe4, 0x00b     	MOVFF	PREINC1, r0x0b
00092a   f00b
00092c   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
00092e   f00a
000930   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
000932   f009
000934   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
000936   f008
000938   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
00093a   f007
00093c   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
00093e   f006
000940   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
000942   f005
000944   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
000946   f004
000948   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00094a   f003
00094c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00094e   f002
000950   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000952   f001
000954   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000956   f000
000958   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00095a   ffd9
00095c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__init_result	code
                                           _init_result:
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	void init_result(pi_result_t * result, int16_t kp, int16_t ki) {
001e0a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001e0c   ffe5
001e0e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001e10   ffd9
001e12   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001e14   ffe5
001e16   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001e18   ffe5
001e1a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001e1c   ffe5
001e1e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001e20   ffe5
001e22   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001e24   ffe5
001e26   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001e28   ffe5
001e2a   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001e2c   ffe5
001e2e   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001e30   ffe5
001e32   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001e34   ffe5
001e36   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
001e38   ffe5
001e3a   0e02     movlw   0x02             	MOVLW	0x02
001e3c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001e3e   f000
001e40   0e03     movlw   0x03             	MOVLW	0x03
001e42   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001e44   f001
001e46   0e04     movlw   0x04             	MOVLW	0x04
001e48   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001e4a   f002
001e4c   0e05     movlw   0x05             	MOVLW	0x05
001e4e   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
001e50   f003
001e52   0e06     movlw   0x06             	MOVLW	0x06
001e54   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
001e56   f004
001e58   0e07     movlw   0x07             	MOVLW	0x07
001e5a   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
001e5c   f005
001e5e   0e08     movlw   0x08             	MOVLW	0x08
001e60   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
001e62   f006
                                           ;	.line	46; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->out_integ = 0 ;
001e64   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001e66   0f02     addlw   0x02             	ADDLW	0x02
001e68   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001e6a   0e00     movlw   0x00             	MOVLW	0x00
001e6c   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001e6e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001e70   0e00     movlw   0x00             	MOVLW	0x00
001e72   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001e74   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001e76   0e00     movlw   0x00             	MOVLW	0x00
001e78   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e7a   0e00     movlw   0x00             	MOVLW	0x00
001e7c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001e7e   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001e80   ffe9
001e82   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001e84   fff3
001e86   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001e88   ec99     call    0x002d32, 0x0    	CALL	__gptrput2
001e8a   f016
                                           ;	.line	47; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->output = 0 ;
001e8c   0e00     movlw   0x00             	MOVLW	0x00
001e8e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e90   0e00     movlw   0x00             	MOVLW	0x00
001e92   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001e94   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001e96   ffe9
001e98   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001e9a   fff3
001e9c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001e9e   ec99     call    0x002d32, 0x0    	CALL	__gptrput2
001ea0   f016
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->kp = kp ;
001ea2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001ea4   0f04     addlw   0x04             	ADDLW	0x04
001ea6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001ea8   0e00     movlw   0x00             	MOVLW	0x00
001eaa   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001eac   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001eae   0e00     movlw   0x00             	MOVLW	0x00
001eb0   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001eb2   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001eb4   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001eb6   ffe5
001eb8   c004     movff   0x004, 0xff4     	MOVFF	r0x04, PRODH
001eba   fff4
001ebc   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001ebe   ffe9
001ec0   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001ec2   fff3
001ec4   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001ec6   ec99     call    0x002d32, 0x0    	CALL	__gptrput2
001ec8   f016
                                           ;	.line	50; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->ki = ki ;
001eca   0e06     movlw   0x06             	MOVLW	0x06
001ecc   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001ece   0e00     movlw   0x00             	MOVLW	0x00
001ed0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001ed2   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001ed4   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001ed6   ffe5
001ed8   c006     movff   0x006, 0xff4     	MOVFF	r0x06, PRODH
001eda   fff4
001edc   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001ede   ffe9
001ee0   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001ee2   fff3
001ee4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001ee6   ec99     call    0x002d32, 0x0    	CALL	__gptrput2
001ee8   f016
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	}
001eea   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
001eec   f009
001eee   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
001ef0   f008
001ef2   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001ef4   f007
001ef6   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001ef8   f006
001efa   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001efc   f005
001efe   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001f00   f004
001f02   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001f04   f003
001f06   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001f08   f002
001f0a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001f0c   f001
001f0e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001f10   f000
001f12   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001f14   ffd9
001f16   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__set_min_out	code
                                           _set_min_out:
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	void set_min_out(int16_t min_out_val) {
002d18   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d1a   ffe5
002d1c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d1e   ffd9
002d20   0e02     movlw   0x02             	MOVLW	0x02
002d22   cfdb     movff   0xfdb, 0x288     	MOVFF	PLUSW2, __min_out
002d24   f288
002d26   0e03     movlw   0x03             	MOVLW	0x03
002d28   cfdb     movff   0xfdb, 0x289     	MOVFF	PLUSW2, (__min_out + 1)
002d2a   f289
                                           ;	.line	43; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	}
002d2c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d2e   ffd9
002d30   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__set_max_out	code
                                           _set_max_out:
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	void set_max_out(int16_t max_out_val) {
002270   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002272   ffe5
002274   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002276   ffd9
002278   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00227a   ffe5
00227c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00227e   ffe5
002280   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002282   ffe5
002284   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002286   ffe5
002288   0e02     movlw   0x02             	MOVLW	0x02
00228a   cfdb     movff   0xfdb, 0x284     	MOVFF	PLUSW2, __max_out
00228c   f284
00228e   0e03     movlw   0x03             	MOVLW	0x03
002290   cfdb     movff   0xfdb, 0x285     	MOVFF	PLUSW2, (__max_out + 1)
002292   f285
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	_integ_sat = mult_int16(2, _max_out) ;
002294   c284     movff   0x284, 0x000     	MOVFF	__max_out, r0x00
002296   f000
002298   c285     movff   0x285, 0x001     	MOVFF	(__max_out + 1), r0x01
00229a   f001
                                           ;	.line	107; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ = a ;
00229c   0e02     movlw   0x02             	MOVLW	0x02
00229e   0100     movlb   0x0              	BANKSEL	_a16_
0022a0   6f19     movwf   0x19, 0x1        	MOVWF	_a16_, B
0022a2   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
0022a4   6b1a     clrf    0x1a, 0x1        	CLRF	(_a16_ + 1), B
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	b16_ = b ;
0022a6   c000     movff   0x000, 0x01b     	MOVFF	r0x00, _b16_
0022a8   f01b
0022aa   c001     movff   0x001, 0x01c     	MOVFF	r0x01, (_b16_ + 1)
0022ac   f01c
0022ae   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0022b0   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
0022b2   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
0022b4   f01e
0022b6   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
0022b8   f01d
0022ba   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0022bc   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
0022be   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
0022c0   f020
0022c2   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
0022c4   f01f
0022c6   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0022c8   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
0022ca   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
0022cc   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
0022ce   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
0022d0   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
0022d2   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
0022d4   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
0022d6   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0022d8   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
0022da   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
0022dc   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
0022de   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
0022e0   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
0022e2   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
0022e4   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
0022e6   ae1c     btfss   0x1c, 0x7, 0x0   	btfss	(_b16_ + 1), 7
0022e8   d004     bra     0x0022f2         	bra	$+10
0022ea   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0022ec   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0022ee   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0022f0   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
0022f2   ae1a     btfss   0x1a, 0x7, 0x0   	btfss	(_a16_ + 1), 7
0022f4   d004     bra     0x0022fe         	bra	$+10
0022f6   501b     movf    0x1b, 0x0, 0x0   	movf	_b16_, W
0022f8   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0022fa   501c     movf    0x1c, 0x0, 0x0   	movf	(_b16_ + 1), W
0022fc   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
                                           	
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
0022fe   c01d     movff   0x01d, 0x000     	MOVFF	_res_, r0x00
002300   f000
002302   c01e     movff   0x01e, 0x001     	MOVFF	(_res_ + 1), r0x01
002304   f001
002306   c01f     movff   0x01f, 0x002     	MOVFF	(_res_ + 2), r0x02
002308   f002
00230a   c020     movff   0x020, 0x003     	MOVFF	(_res_ + 3), r0x03
00230c   f003
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	_integ_sat = mult_int16(2, _max_out) ;
00230e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002310   0102     movlb   0x2              	BANKSEL	__integ_sat
002312   6f86     movwf   0x86, 0x1        	MOVWF	__integ_sat, B
002314   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002316   0102     movlb   0x2              	BANKSEL	(__integ_sat + 1)
002318   6f87     movwf   0x87, 0x1        	MOVWF	(__integ_sat + 1), B
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	}
00231a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00231c   f003
00231e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002320   f002
002322   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002324   f001
002326   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002328   f000
00232a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00232c   ffd9
00232e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__mult_int16	code
                                           _mult_int16:
                                           ;	.line	106; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	inline int32_t mult_int16(int16_t a, int16_t b) {
002650   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002652   ffe5
002654   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002656   ffd9
002658   0e02     movlw   0x02             	MOVLW	0x02
00265a   cfdb     movff   0xfdb, 0x019     	MOVFF	PLUSW2, _a16_
00265c   f019
00265e   0e03     movlw   0x03             	MOVLW	0x03
002660   cfdb     movff   0xfdb, 0x01a     	MOVFF	PLUSW2, (_a16_ + 1)
002662   f01a
002664   0e04     movlw   0x04             	MOVLW	0x04
002666   cfdb     movff   0xfdb, 0x01b     	MOVFF	PLUSW2, _b16_
002668   f01b
00266a   0e05     movlw   0x05             	MOVLW	0x05
00266c   cfdb     movff   0xfdb, 0x01c     	MOVFF	PLUSW2, (_b16_ + 1)
00266e   f01c
002670   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
002672   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
002674   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
002676   f01e
002678   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
00267a   f01d
00267c   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
00267e   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
002680   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
002682   f020
002684   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
002686   f01f
002688   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
00268a   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
00268c   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
00268e   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
002690   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
002692   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
002694   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
002696   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
002698   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
00269a   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
00269c   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
00269e   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
0026a0   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
0026a2   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
0026a4   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
0026a6   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
0026a8   ae1c     btfss   0x1c, 0x7, 0x0   	btfss	(_b16_ + 1), 7
0026aa   d004     bra     0x0026b4         	bra	$+10
0026ac   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0026ae   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0026b0   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0026b2   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
0026b4   ae1a     btfss   0x1a, 0x7, 0x0   	btfss	(_a16_ + 1), 7
0026b6   d004     bra     0x0026c0         	bra	$+10
0026b8   501b     movf    0x1b, 0x0, 0x0   	movf	_b16_, W
0026ba   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0026bc   501c     movf    0x1c, 0x0, 0x0   	movf	(_b16_ + 1), W
0026be   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
                                           	
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
0026c0   c020     movff   0x020, 0xfe9     	MOVFF	(_res_ + 3), FSR0L
0026c2   ffe9
0026c4   c01f     movff   0x01f, 0xff4     	MOVFF	(_res_ + 2), PRODH
0026c6   fff4
0026c8   c01e     movff   0x01e, 0xff3     	MOVFF	(_res_ + 1), PRODL
0026ca   fff3
0026cc   0100     movlb   0x0              	BANKSEL	_res_
0026ce   511d     movf    0x1d, 0x0, 0x1   	MOVF	_res_, W, B
                                           ;	.line	153; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	}
0026d0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0026d2   ffd9
0026d4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__mult_uint16	code
                                           _mult_uint16:
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	inline uint32_t mult_uint16(uint16_t a, uint16_t b) {
00292e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002930   ffe5
002932   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002934   ffd9
002936   0e02     movlw   0x02             	MOVLW	0x02
002938   cfdb     movff   0xfdb, 0x019     	MOVFF	PLUSW2, _a16_
00293a   f019
00293c   0e03     movlw   0x03             	MOVLW	0x03
00293e   cfdb     movff   0xfdb, 0x01a     	MOVFF	PLUSW2, (_a16_ + 1)
002940   f01a
002942   0e04     movlw   0x04             	MOVLW	0x04
002944   cfdb     movff   0xfdb, 0x01b     	MOVFF	PLUSW2, _b16_
002946   f01b
002948   0e05     movlw   0x05             	MOVLW	0x05
00294a   cfdb     movff   0xfdb, 0x01c     	MOVFF	PLUSW2, (_b16_ + 1)
00294c   f01c
00294e   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
002950   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
002952   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
002954   f01e
002956   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
002958   f01d
00295a   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
00295c   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
00295e   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
002960   f020
002962   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
002964   f01f
002966   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
002968   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
00296a   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
00296c   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
00296e   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
002970   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
002972   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
002974   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
002976   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
002978   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
00297a   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
00297c   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
00297e   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
002980   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
002982   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
002984   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
                                           	
                                           ;	.line	101; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
002986   c020     movff   0x020, 0xfe9     	MOVFF	(_res_ + 3), FSR0L
002988   ffe9
00298a   c01f     movff   0x01f, 0xff4     	MOVFF	(_res_ + 2), PRODH
00298c   fff4
00298e   c01e     movff   0x01e, 0xff3     	MOVFF	(_res_ + 1), PRODL
002990   fff3
002992   0100     movlb   0x0              	BANKSEL	_res_
002994   511d     movf    0x1d, 0x0, 0x1   	MOVF	_res_, W, B
                                           ;	.line	103; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	}
002996   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002998   ffd9
00299a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__mult_int8	code
                                           _mult_int8:
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	inline int16_t mult_int8(int8_t a, int8_t b) {
002a06   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a08   ffe5
002a0a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a0c   ffd9
002a0e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002a10   ffe5
002a12   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002a14   ffe5
002a16   0e02     movlw   0x02             	MOVLW	0x02
002a18   cfdb     movff   0xfdb, 0x017     	MOVFF	PLUSW2, _a_
002a1a   f017
002a1c   0e03     movlw   0x03             	MOVLW	0x03
002a1e   cfdb     movff   0xfdb, 0x018     	MOVFF	PLUSW2, _b_
002a20   f018
002a22   5017     movf    0x17, 0x0, 0x0   	movf	_a_, W
002a24   0218     mulwf   0x18, 0x0        	mulwf	_b_
002a26   be18     btfsc   0x18, 0x7, 0x0   	btfsc	_b_, 7
002a28   5ef4     subwf   0xf4, 0x1, 0x0   	subwf	PRODH, F
002a2a   5018     movf    0x18, 0x0, 0x0   	movf	_b_, W
002a2c   be17     btfsc   0x17, 0x7, 0x0   	btfsc	_a_, 7
002a2e   5ef4     subwf   0xf4, 0x1, 0x0   	subwf	PRODH, F
                                           	
                                           ;	.line	62; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ = PRODH ;
002a30   cff4     movff   0xff4, 0x019     	MOVFF	_PRODH, _a16_
002a32   f019
002a34   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002a36   6b1a     clrf    0x1a, 0x1        	CLRF	(_a16_ + 1), B
002a38   0100     movlb   0x0              	BANKSEL	_a16_
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ <<= 8 ;
002a3a   5119     movf    0x19, 0x0, 0x1   	MOVF	_a16_, W, B
002a3c   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002a3e   6f1a     movwf   0x1a, 0x1        	MOVWF	(_a16_ + 1), B
002a40   0100     movlb   0x0              	BANKSEL	_a16_
002a42   6b19     clrf    0x19, 0x1        	CLRF	_a16_, B
                                           ;	.line	64; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ += PRODL ;
002a44   cff3     movff   0xff3, 0x000     	MOVFF	_PRODL, r0x00
002a46   f000
002a48   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002a4a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002a4c   0100     movlb   0x0              	BANKSEL	_a16_
002a4e   2719     addwf   0x19, 0x1, 0x1   	ADDWF	_a16_, F, B
002a50   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002a52   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002a54   231a     addwfc  0x1a, 0x1, 0x1   	ADDWFC	(_a16_ + 1), F, B
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(a16_) ;
002a56   c01a     movff   0x01a, 0xff3     	MOVFF	(_a16_ + 1), PRODL
002a58   fff3
002a5a   0100     movlb   0x0              	BANKSEL	_a16_
002a5c   5119     movf    0x19, 0x0, 0x1   	MOVF	_a16_, W, B
                                           ;	.line	67; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	}
002a5e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002a60   f001
002a62   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002a64   f000
002a66   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a68   ffd9
002a6a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__mult_uint8	code
                                           _mult_uint8:
                                           ;	.line	31; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	inline uint16_t mult_uint8(uint8_t a, uint8_t b) {
002a6c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a6e   ffe5
002a70   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a72   ffd9
002a74   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002a76   ffe5
002a78   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002a7a   ffe5
002a7c   0e02     movlw   0x02             	MOVLW	0x02
002a7e   cfdb     movff   0xfdb, 0x017     	MOVFF	PLUSW2, _a_
002a80   f017
002a82   0e03     movlw   0x03             	MOVLW	0x03
002a84   cfdb     movff   0xfdb, 0x018     	MOVFF	PLUSW2, _b_
002a86   f018
002a88   5017     movf    0x17, 0x0, 0x0   	movf	_a_, W
002a8a   0218     mulwf   0x18, 0x0        	mulwf	_b_
                                           	
                                           ;	.line	40; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ = PRODH ;
002a8c   cff4     movff   0xff4, 0x019     	MOVFF	_PRODH, _a16_
002a8e   f019
002a90   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002a92   6b1a     clrf    0x1a, 0x1        	CLRF	(_a16_ + 1), B
002a94   0100     movlb   0x0              	BANKSEL	_a16_
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ <<= 8 ;
002a96   5119     movf    0x19, 0x0, 0x1   	MOVF	_a16_, W, B
002a98   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002a9a   6f1a     movwf   0x1a, 0x1        	MOVWF	(_a16_ + 1), B
002a9c   0100     movlb   0x0              	BANKSEL	_a16_
002a9e   6b19     clrf    0x19, 0x1        	CLRF	_a16_, B
                                           ;	.line	42; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ += PRODL ;
002aa0   cff3     movff   0xff3, 0x000     	MOVFF	_PRODL, r0x00
002aa2   f000
002aa4   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002aa6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002aa8   0100     movlb   0x0              	BANKSEL	_a16_
002aaa   2719     addwf   0x19, 0x1, 0x1   	ADDWF	_a16_, F, B
002aac   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002aae   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002ab0   231a     addwfc  0x1a, 0x1, 0x1   	ADDWFC	(_a16_ + 1), F, B
                                           ;	.line	44; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(a16_) ;
002ab2   c01a     movff   0x01a, 0xff3     	MOVFF	(_a16_ + 1), PRODL
002ab4   fff3
002ab6   0100     movlb   0x0              	BANKSEL	_a16_
002ab8   5119     movf    0x19, 0x0, 0x1   	MOVF	_a16_, W, B
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	}
002aba   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002abc   f001
002abe   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002ac0   f000
002ac2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ac4   ffd9
002ac6   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	 1946 (0x079a) bytes ( 1.48%)
                                           ;           	  973 (0x03cd) words
                                           ; udata size:	   16 (0x0010) bytes ( 0.43%)
                                           ; access size:	   17 (0x0011) bytes


                                           	end
