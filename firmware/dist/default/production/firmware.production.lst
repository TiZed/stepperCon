gplink-1.5.2 #1312 (Apr 13 2018)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 13/04/18  17:37:38


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.1 #10385 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec
                                           	CONFIG	FOSC=HSHP
                                           	CONFIG	PLLCFG=ON
                                           	CONFIG	WDTEN=SWON
                                           	CONFIG	XINST=OFF
                                           	CONFIG	CCP3MX=PORTE0
                                           	CONFIG	P2BMX=PORTC0
                                           	CONFIG	MCLRE=EXTMCLR


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_b_adc
                                           	global	_a_adc
                                           	global	_zero_cross
                                           	global	_t_blank_high
                                           	global	_t_blank_low
                                           	global	_t_off
                                           	global	_state
                                           	global	_skip
                                           	global	_set_amp
                                           	global	_max_amp
                                           	global	_a_decay
                                           	global	_b_decay
                                           	global	_step_a
                                           	global	_step_b
                                           	global	_pol_a
                                           	global	_pol_b
                                           	global	_dir
                                           	global	_pwm_lu
                                           	global	_adc_cap
                                           	global	_i2c_address
                                           	global	_i2c_counter
                                           	global	_i2c_reg_addr
                                           	global	_i2c_regs
                                           	global	_i2c_dirty
                                           	global	_a_state
                                           	global	_b_state
                                           	global	_i2cSetup
                                           	global	_activeInts
                                           	global	_idleInts
                                           	global	_prep_pwm_lu
                                           	global	_set_op_vars
                                           	global	_delay_ms
                                           	global	_main
                                           	global	___EEPROM

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__moduchar
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	___fs2uint
                                           	extern	_read_regs
                                           	extern	_store_regs
                                           	extern	_ioSetup
                                           	extern	_pwmSetup
                                           	extern	_intSetup
                                           	extern	_adc_setup
                                           	extern	_resetCheck
                                           	extern	___uint2fs
                                           	extern	___fsdiv
                                           	extern	___sint2fs
                                           	extern	___fsmul
                                           	extern	___fsadd

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           _pwm_base	db	0x00, 0x00, 0x32, 0x00, 0x64, 0x00, 0x95, 0x00, 0xc4, 0x00, 0xf1, 0x00
                                           	db	0x1c, 0x01, 0x45, 0x01, 0x6a, 0x01, 0x8c, 0x01, 0xaa, 0x01, 0xc4, 0x01
                                           	db	0xd9, 0x01, 0xea, 0x01, 0xf6, 0x01, 0xfe, 0x01, 0x00, 0x02, 0xfe, 0x01
                                           	db	0xf6, 0x01, 0xea, 0x01, 0xd9, 0x01, 0xc4, 0x01, 0xaa, 0x01, 0x8c, 0x01
                                           	db	0x6a, 0x01, 0x45, 0x01, 0x1c, 0x01, 0xf1, 0x00, 0xc4, 0x00, 0x95, 0x00
                                           	db	0x64, 0x00, 0x32, 0x00, 0x00, 0x00, 0xce, 0xff, 0x9c, 0xff, 0x6b, 0xff
                                           	db	0x3c, 0xff, 0x0f, 0xff, 0xe4, 0xfe, 0xbb, 0xfe, 0x96, 0xfe, 0x74, 0xfe
                                           	db	0x56, 0xfe, 0x3b, 0xfe, 0x27, 0xfe, 0x16, 0xfe, 0x0a, 0xfe, 0x02, 0xfe
                                           	db	0x00, 0xfe, 0x02, 0xfe, 0x0a, 0xfe, 0x16, 0xfe, 0x27, 0xfe, 0x3c, 0xfe
                                           	db	0x56, 0xfe, 0x74, 0xfe, 0x96, 0xfe, 0xbb, 0xfe, 0xe4, 0xfe, 0x0f, 0xff
                                           	db	0x3c, 0xff, 0x6b, 0xff, 0x9c, 0xff, 0xce, 0xff


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1

                                           udata_stepperCon_0	udata
                                           _t_off	res	1

                                           udata_stepperCon_1	udata
                                           _t_blank_low	res	1

                                           udata_stepperCon_2	udata
                                           _t_blank_high	res	1

                                           udata_stepperCon_3	udata
                                           _zero_cross	res	2

                                           udata_stepperCon_4	udata
                                           _a_adc	res	2

                                           udata_stepperCon_5	udata
                                           _b_adc	res	2

                                           udata_stepperCon_6	udata
                                           _state	res	1

                                           udata_stepperCon_7	udata
                                           _dir	res	1

                                           udata_stepperCon_8	udata
                                           _adc_cap	res	1

                                           udata_stepperCon_9	udata
                                           _i2c_counter	res	1

                                           udata_stepperCon_10	udata
                                           _i2c_reg_addr	res	1

                                           udata_stepperCon_11	udata
                                           _i2c_dirty	res	1

                                           udata_stepperCon_12	udata
                                           _i2c_regs	res	9

                                           udata_stepperCon_13	udata
                                           _i2c_address	res	1

                                           udata_stepperCon_14	udata
                                           _set_amp	res	2

                                           udata_stepperCon_15	udata
                                           _max_amp	res	2

                                           udata_stepperCon_16	udata
                                           _pwm_lu	res	128

                                           udata_stepperCon_17	udata
                                           _skip	res	1

                                           udata_stepperCon_18	udata
                                           _step_a	res	1

                                           udata_stepperCon_19	udata
                                           _step_b	res	1

                                           udata_stepperCon_20	udata
                                           _a_decay	res	1

                                           udata_stepperCon_21	udata
                                           _b_decay	res	1

                                           udata_stepperCon_22	udata
                                           _a_state	res	1

                                           udata_stepperCon_23	udata
                                           _b_state	res	1

                                           udata_stepperCon_24	udata
                                           _pol_a	res	1

                                           udata_stepperCon_25	udata
                                           _pol_b	res	1

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x1_highInt	code	0X000008
                                           ivec_0x1_highInt:
000008   ef50     goto    0x0016a0         	GOTO	_highInt
00000a   f00b

                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x2_lowInt	code	0X000018
                                           ivec_0x2_lowInt:
000018   efc1     goto    0x001582         	GOTO	_lowInt
00001a   f00a

                                           ; ; Starting pCode block for absolute Ival
                                           S_stepperCon____EEPROM	code	0XF00000
                                           ___EEPROM:
                                           	DB	0x40, 0x02, 0xdc, 0x05, 0x78, 0x0e, 0x14, 0x0a, 0x01





                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stepperCon__main	code
                                           _main:
                                           ;	.line	373; stepperCon.c	uint8_t pwm_a_l = 0, pwm_a_h = 0, pwm_b_l = 0, pwm_b_h = 0 ;
00001c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
00001e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000020   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000022   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           ;	.line	375; stepperCon.c	ioSetup() ;                 // Setup IO ports
000024   ec4d     call    0x00209a, 0x0    	CALL	_ioSetup
000026   f010
                                           ;	.line	378; stepperCon.c	if(RCONbits.POR) {
000028   a2d0     btfss   0xd0, 0x1, 0x0   	BTFSS	_RCONbits, 1
00002a   d002     bra     0x000030         	BRA	_00226_DS_
                                           ;	.line	379; stepperCon.c	resetCheck() ;
00002c   ecd8     call    0x001bb0, 0x0    	CALL	_resetCheck
00002e   f00d
                                           _00226_DS_:
                                           ;	.line	384; stepperCon.c	RCONbits.POR = 1 ;
000030   82d0     bsf     0xd0, 0x1, 0x0   	BSF	_RCONbits, 1
                                           ;	.line	385; stepperCon.c	RCONbits.BOR = 1 ;
000032   80d0     bsf     0xd0, 0x0, 0x0   	BSF	_RCONbits, 0
                                           ;	.line	387; stepperCon.c	read_regs(i2c_regs, sizeof(i2c_regs)) ;  // Populate I2C registers from EEPROM
000034   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
000036   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000038   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
00003a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00003c   0e80     movlw   0x80             	MOVLW	0x80
00003e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000040   0e09     movlw   0x09             	MOVLW	0x09
000042   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000044   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000046   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000048   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00004a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00004c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00004e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000050   ec29     call    0x001c52, 0x0    	CALL	_read_regs
000052   f00e
000054   0e04     movlw   0x04             	MOVLW	0x04
000056   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	388; stepperCon.c	set_op_vars() ;             // Set operation variables from I2C registers
000058   ec86     call    0x001b0c, 0x0    	CALL	_set_op_vars
00005a   f00d
00005c   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	389; stepperCon.c	i2c_dirty = 0 ;             // Clear I2C dirty flag
00005e   6b30     clrf    0x30, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	391; stepperCon.c	i2cSetup() ;                // Setup I2C I/F
000060   ec80     call    0x002100, 0x0    	CALL	_i2cSetup
000062   f010
                                           ;	.line	392; stepperCon.c	intSetup() ;                // Interrupts setup
000064   eca6     call    0x00214c, 0x0    	CALL	_intSetup
000066   f010
                                           ;	.line	393; stepperCon.c	adc_setup() ;
000068   ec31     call    0x002062, 0x0    	CALL	_adc_setup
00006a   f010
                                           ;	.line	394; stepperCon.c	idleInts() ;                // Set interrupts to 'idle' state
00006c   ecc8     call    0x002190, 0x0    	CALL	_idleInts
00006e   f010
000070   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	397; stepperCon.c	state = IDLE ;              // Start in 'idle' state
000072   6b2b     clrf    0x2b, 0x1        	CLRF	_state, B
                                           ;	.line	400; stepperCon.c	PORTDbits.RD2 = 1 ;     // Turn blue LED on
000074   8483     bsf     0x83, 0x2, 0x0   	BSF	_PORTDbits, 2
                                           ;	.line	401; stepperCon.c	delay_ms(300) ;    
000076   0e01     movlw   0x01             	MOVLW	0x01
000078   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00007a   0e2c     movlw   0x2c             	MOVLW	0x2c
00007c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00007e   ecc4     call    0x001f88, 0x0    	CALL	_delay_ms
000080   f00f
000082   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000084   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	402; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
000086   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
                                           ;	.line	404; stepperCon.c	WDTCON = 1 ;        // Enable watchdog timer
000088   0e01     movlw   0x01             	MOVLW	0x01
00008a   6ed1     movwf   0xd1, 0x0        	MOVWF	_WDTCON
                                           _00338_DS_:
00008c   0004     clrwdt                   	clrwdt	
00008e   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	410; stepperCon.c	switch(state) {
000090   512b     movf    0x2b, 0x0, 0x1   	MOVF	_state, W, B
000092   e102     bnz     0x000098         	BNZ	_00527_DS_
000094   efc5     goto    0x00058a         	GOTO	_00331_DS_
000096   f002
                                           _00527_DS_:
000098   010f     movlb   0xf              	BANKSEL	_state
00009a   512b     movf    0x2b, 0x0, 0x1   	MOVF	_state, W, B
00009c   0a01     xorlw   0x01             	XORLW	0x01
00009e   e011     bz      0x0000c2         	BZ	_00227_DS_
                                           _00529_DS_:
0000a0   010f     movlb   0xf              	BANKSEL	_state
0000a2   512b     movf    0x2b, 0x0, 0x1   	MOVF	_state, W, B
0000a4   0a02     xorlw   0x02             	XORLW	0x02
0000a6   e102     bnz     0x0000ac         	BNZ	_00531_DS_
0000a8   ef87     goto    0x00050e         	GOTO	_00310_DS_
0000aa   f002
                                           _00531_DS_:
0000ac   010f     movlb   0xf              	BANKSEL	_state
0000ae   512b     movf    0x2b, 0x0, 0x1   	MOVF	_state, W, B
0000b0   0a04     xorlw   0x04             	XORLW	0x04
0000b2   e101     bnz     0x0000b6         	BNZ	_00533_DS_
0000b4   d114     bra     0x0002de         	BRA	_00263_DS_
                                           _00533_DS_:
0000b6   010f     movlb   0xf              	BANKSEL	_state
0000b8   512b     movf    0x2b, 0x0, 0x1   	MOVF	_state, W, B
0000ba   0a06     xorlw   0x06             	XORLW	0x06
0000bc   e101     bnz     0x0000c0         	BNZ	_00535_DS_
0000be   d171     bra     0x0003a2         	BRA	_00284_DS_
                                           _00535_DS_:
0000c0   d7e5     bra     0x00008c         	BRA	_00338_DS_
                                           _00227_DS_:
                                           ;	.line	412; stepperCon.c	LATDbits.LATD2 = 1 ;
0000c2   848c     bsf     0x8c, 0x2, 0x0   	BSF	_LATDbits, 2
0000c4   010f     movlb   0xf              	BANKSEL	_skip
                                           ;	.line	415; stepperCon.c	if (skip == STEP_1) step_a = STEPS / 2 ;
0000c6   5132     movf    0x32, 0x0, 0x1   	MOVF	_skip, W, B
0000c8   0a10     xorlw   0x10             	XORLW	0x10
0000ca   e104     bnz     0x0000d4         	BNZ	_00229_DS_
0000cc   0e08     movlw   0x08             	MOVLW	0x08
0000ce   010f     movlb   0xf              	BANKSEL	_step_a
0000d0   6f33     movwf   0x33, 0x1        	MOVWF	_step_a, B
0000d2   d002     bra     0x0000d8         	BRA	_00230_DS_
                                           _00229_DS_:
0000d4   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	416; stepperCon.c	else step_a = 0 ;
0000d6   6b33     clrf    0x33, 0x1        	CLRF	_step_a, B
                                           _00230_DS_:
                                           ;	.line	419; stepperCon.c	step_b = step_a + STEPS ;
0000d8   0e10     movlw   0x10             	MOVLW	0x10
0000da   010f     movlb   0xf              	BANKSEL	_step_a
0000dc   2533     addwf   0x33, 0x0, 0x1   	ADDWF	_step_a, W, B
0000de   010f     movlb   0xf              	BANKSEL	_step_b
0000e0   6f34     movwf   0x34, 0x1        	MOVWF	_step_b, B
0000e2   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	421; stepperCon.c	if (step_a > THREE_QUARTERS) a_decay = FAST_DECAY ;
0000e4   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
0000e6   0f80     addlw   0x80             	ADDLW	0x80
0000e8   0f4f     addlw   0x4f             	ADDLW	0x4f
0000ea   e304     bnc     0x0000f4         	BNC	_00238_DS_
0000ec   0e01     movlw   0x01             	MOVLW	0x01
0000ee   010f     movlb   0xf              	BANKSEL	_a_decay
0000f0   6f35     movwf   0x35, 0x1        	MOVWF	_a_decay, B
0000f2   d013     bra     0x00011a         	BRA	_00239_DS_
                                           _00238_DS_:
0000f4   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	422; stepperCon.c	else if (step_a >= HALF_CYCLE) a_decay = SLOW_DECAY ;
0000f6   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
0000f8   0f80     addlw   0x80             	ADDLW	0x80
0000fa   0f60     addlw   0x60             	ADDLW	0x60
0000fc   e303     bnc     0x000104         	BNC	_00235_DS_
0000fe   010f     movlb   0xf              	BANKSEL	_a_decay
000100   6b35     clrf    0x35, 0x1        	CLRF	_a_decay, B
000102   d00b     bra     0x00011a         	BRA	_00239_DS_
                                           _00235_DS_:
000104   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	423; stepperCon.c	else if (step_a > STEPS) a_decay = FAST_DECAY ;
000106   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000108   0f80     addlw   0x80             	ADDLW	0x80
00010a   0f6f     addlw   0x6f             	ADDLW	0x6f
00010c   e304     bnc     0x000116         	BNC	_00232_DS_
00010e   0e01     movlw   0x01             	MOVLW	0x01
000110   010f     movlb   0xf              	BANKSEL	_a_decay
000112   6f35     movwf   0x35, 0x1        	MOVWF	_a_decay, B
000114   d002     bra     0x00011a         	BRA	_00239_DS_
                                           _00232_DS_:
000116   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	424; stepperCon.c	else a_decay = SLOW_DECAY ;
000118   6b35     clrf    0x35, 0x1        	CLRF	_a_decay, B
                                           _00239_DS_:
00011a   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	426; stepperCon.c	if (step_b > THREE_QUARTERS) b_decay = FAST_DECAY ;
00011c   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
00011e   0f80     addlw   0x80             	ADDLW	0x80
000120   0f4f     addlw   0x4f             	ADDLW	0x4f
000122   e304     bnc     0x00012c         	BNC	_00247_DS_
000124   0e01     movlw   0x01             	MOVLW	0x01
000126   010f     movlb   0xf              	BANKSEL	_b_decay
000128   6f36     movwf   0x36, 0x1        	MOVWF	_b_decay, B
00012a   d013     bra     0x000152         	BRA	_00248_DS_
                                           _00247_DS_:
00012c   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	427; stepperCon.c	else if (step_b >= HALF_CYCLE) b_decay = SLOW_DECAY ;
00012e   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
000130   0f80     addlw   0x80             	ADDLW	0x80
000132   0f60     addlw   0x60             	ADDLW	0x60
000134   e303     bnc     0x00013c         	BNC	_00244_DS_
000136   010f     movlb   0xf              	BANKSEL	_b_decay
000138   6b36     clrf    0x36, 0x1        	CLRF	_b_decay, B
00013a   d00b     bra     0x000152         	BRA	_00248_DS_
                                           _00244_DS_:
00013c   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	428; stepperCon.c	else if (step_b > STEPS) b_decay = FAST_DECAY ;
00013e   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
000140   0f80     addlw   0x80             	ADDLW	0x80
000142   0f6f     addlw   0x6f             	ADDLW	0x6f
000144   e304     bnc     0x00014e         	BNC	_00241_DS_
000146   0e01     movlw   0x01             	MOVLW	0x01
000148   010f     movlb   0xf              	BANKSEL	_b_decay
00014a   6f36     movwf   0x36, 0x1        	MOVWF	_b_decay, B
00014c   d002     bra     0x000152         	BRA	_00248_DS_
                                           _00241_DS_:
00014e   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	429; stepperCon.c	else b_decay = SLOW_DECAY ;
000150   6b36     clrf    0x36, 0x1        	CLRF	_b_decay, B
                                           _00248_DS_:
                                           ;	.line	431; stepperCon.c	prep_pwm_lu() ;         // prepare PWM lookup table
000152   ec0c     call    0x001218, 0x0    	CALL	_prep_pwm_lu
000154   f009
                                           ;	.line	433; stepperCon.c	pwmSetup() ;            // Activate PWM
000156   ec7a     call    0x001cf4, 0x0    	CALL	_pwmSetup
000158   f00e
                                           ;	.line	434; stepperCon.c	activeInts() ;          // Set active state interrupts
00015a   ec69     call    0x0020d2, 0x0    	CALL	_activeInts
00015c   f010
                                           ;	.line	436; stepperCon.c	a_state = T_DRIVE ;
00015e   0e02     movlw   0x02             	MOVLW	0x02
000160   0102     movlb   0x2              	BANKSEL	_a_state
000162   6f80     movwf   0x80, 0x1        	MOVWF	_a_state, B
                                           ;	.line	437; stepperCon.c	b_state = T_DRIVE ;
000164   0e02     movlw   0x02             	MOVLW	0x02
000166   0102     movlb   0x2              	BANKSEL	_b_state
000168   6f81     movwf   0x81, 0x1        	MOVWF	_b_state, B
00016a   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	440; stepperCon.c	if (step_a == HALF_CYCLE || step_a == 0) pol_a = 2 ;
00016c   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
00016e   0a20     xorlw   0x20             	XORLW	0x20
000170   e003     bz      0x000178         	BZ	_00252_DS_
                                           _00545_DS_:
000172   010f     movlb   0xf              	BANKSEL	_step_a
000174   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000176   e104     bnz     0x000180         	BNZ	_00253_DS_
                                           _00252_DS_:
000178   0e02     movlw   0x02             	MOVLW	0x02
00017a   0102     movlb   0x2              	BANKSEL	_pol_a
00017c   6f82     movwf   0x82, 0x1        	MOVWF	_pol_a, B
00017e   d00b     bra     0x000196         	BRA	_00254_DS_
                                           _00253_DS_:
000180   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	441; stepperCon.c	else if (step_a > HALF_CYCLE) pol_a = 0 ;
000182   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000184   0f80     addlw   0x80             	ADDLW	0x80
000186   0f5f     addlw   0x5f             	ADDLW	0x5f
000188   e303     bnc     0x000190         	BNC	_00250_DS_
00018a   0102     movlb   0x2              	BANKSEL	_pol_a
00018c   6b82     clrf    0x82, 0x1        	CLRF	_pol_a, B
00018e   d003     bra     0x000196         	BRA	_00254_DS_
                                           _00250_DS_:
                                           ;	.line	442; stepperCon.c	else pol_a = 1 ;
000190   0e01     movlw   0x01             	MOVLW	0x01
000192   0102     movlb   0x2              	BANKSEL	_pol_a
000194   6f82     movwf   0x82, 0x1        	MOVWF	_pol_a, B
                                           _00254_DS_:
000196   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	444; stepperCon.c	if (step_b == HALF_CYCLE || step_b == 0) pol_b = 2 ;
000198   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
00019a   0a20     xorlw   0x20             	XORLW	0x20
00019c   e003     bz      0x0001a4         	BZ	_00259_DS_
                                           _00548_DS_:
00019e   010f     movlb   0xf              	BANKSEL	_step_b
0001a0   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
0001a2   e104     bnz     0x0001ac         	BNZ	_00260_DS_
                                           _00259_DS_:
0001a4   0e02     movlw   0x02             	MOVLW	0x02
0001a6   0102     movlb   0x2              	BANKSEL	_pol_b
0001a8   6f83     movwf   0x83, 0x1        	MOVWF	_pol_b, B
0001aa   d00b     bra     0x0001c2         	BRA	_00261_DS_
                                           _00260_DS_:
0001ac   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	445; stepperCon.c	else if (step_b > HALF_CYCLE) pol_b = 0 ;
0001ae   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
0001b0   0f80     addlw   0x80             	ADDLW	0x80
0001b2   0f5f     addlw   0x5f             	ADDLW	0x5f
0001b4   e303     bnc     0x0001bc         	BNC	_00257_DS_
0001b6   0102     movlb   0x2              	BANKSEL	_pol_b
0001b8   6b83     clrf    0x83, 0x1        	CLRF	_pol_b, B
0001ba   d003     bra     0x0001c2         	BRA	_00261_DS_
                                           _00257_DS_:
                                           ;	.line	446; stepperCon.c	else pol_b = 1 ;
0001bc   0e01     movlw   0x01             	MOVLW	0x01
0001be   0102     movlb   0x2              	BANKSEL	_pol_b
0001c0   6f83     movwf   0x83, 0x1        	MOVWF	_pol_b, B
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
                                           _00261_DS_:
0001c2   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	450; stepperCon.c	CCP5CONbits.DC5B = 0x0c + (pwm_lu[step_a] & 0x3) << 4 ;
0001c4   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
0001c6   0d02     mullw   0x02             	MULLW	0x02
0001c8   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0001ca   010f     movlb   0xf              	BANKSEL	_step_a
0001cc   bf33     btfsc   0x33, 0x7, 0x1   	BTFSC	_step_a, 7, B
0001ce   0802     sublw   0x02             	SUBLW	0x02
0001d0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0001d2   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0001d4   f004
0001d6   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0001d8   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0001da   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0001dc   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0001de   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0001e0   ffe9
0001e2   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0001e4   ffea
0001e6   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0001e8   f004
0001ea   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0001ec   f005
0001ee   0e03     movlw   0x03             	MOVLW	0x03
0001f0   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
0001f2   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
0001f4   0bf0     andlw   0xf0             	ANDLW	0xf0
0001f6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0001f8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0001fa   0b03     andlw   0x03             	ANDLW	0x03
0001fc   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
0001fe   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000200   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
000202   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
000204   0bcf     andlw   0xcf             	ANDLW	0xcf
000206   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000208   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
00020a   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
00020c   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	451; stepperCon.c	CCPR5L = pwm_lu[step_a] >> 2 ;
00020e   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000210   0d02     mullw   0x02             	MULLW	0x02
000212   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000214   010f     movlb   0xf              	BANKSEL	_step_a
000216   bf33     btfsc   0x33, 0x7, 0x1   	BTFSC	_step_a, 7, B
000218   0802     sublw   0x02             	SUBLW	0x02
00021a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00021c   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
00021e   f004
000220   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
000222   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000224   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000226   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000228   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00022a   ffe9
00022c   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
00022e   ffea
000230   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000232   f004
000234   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
000236   f005
000238   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00023a   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
00023c   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
00023e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000240   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
000242   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000244   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000246   010f     movlb   0xf              	BANKSEL	_CCPR5L
000248   6f55     movwf   0x55, 0x1        	MOVWF	_CCPR5L, B
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
00024a   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	453; stepperCon.c	CCP4CONbits.DC4B = 0x0c + (pwm_lu[step_b] & 0x3) << 4 ;
00024c   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
00024e   0d02     mullw   0x02             	MULLW	0x02
000250   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000252   010f     movlb   0xf              	BANKSEL	_step_b
000254   bf34     btfsc   0x34, 0x7, 0x1   	BTFSC	_step_b, 7, B
000256   0802     sublw   0x02             	SUBLW	0x02
000258   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00025a   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
00025c   f004
00025e   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
000260   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000262   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000264   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000266   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000268   ffe9
00026a   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
00026c   ffea
00026e   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000270   f004
000272   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
000274   f005
000276   0e03     movlw   0x03             	MOVLW	0x03
000278   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
00027a   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
00027c   0bf0     andlw   0xf0             	ANDLW	0xf0
00027e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000280   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000282   0b03     andlw   0x03             	ANDLW	0x03
000284   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000286   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000288   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
00028a   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
00028c   0bcf     andlw   0xcf             	ANDLW	0xcf
00028e   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000290   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000292   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
000294   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	454; stepperCon.c	CCPR4L = pwm_lu[step_b] >> 2 ;
000296   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
000298   0d02     mullw   0x02             	MULLW	0x02
00029a   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00029c   010f     movlb   0xf              	BANKSEL	_step_b
00029e   bf34     btfsc   0x34, 0x7, 0x1   	BTFSC	_step_b, 7, B
0002a0   0802     sublw   0x02             	SUBLW	0x02
0002a2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0002a4   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0002a6   f004
0002a8   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0002aa   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002ac   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0002ae   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0002b0   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0002b2   ffe9
0002b4   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0002b6   ffea
0002b8   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0002ba   f004
0002bc   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0002be   f005
0002c0   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002c2   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0002c4   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0002c6   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002c8   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0002ca   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0002cc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0002ce   010f     movlb   0xf              	BANKSEL	_CCPR4L
0002d0   6f58     movwf   0x58, 0x1        	MOVWF	_CCPR4L, B
                                           ;	.line	456; stepperCon.c	PORTAbits.RA4 = 1 ;
0002d2   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
                                           ;	.line	457; stepperCon.c	PORTAbits.RA5 = 1 ; 
0002d4   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
                                           ;	.line	459; stepperCon.c	state = NEXT_STEP ;
0002d6   0e06     movlw   0x06             	MOVLW	0x06
0002d8   010f     movlb   0xf              	BANKSEL	_state
0002da   6f2b     movwf   0x2b, 0x1        	MOVWF	_state, B
                                           ;	.line	460; stepperCon.c	break ;
0002dc   d6d7     bra     0x00008c         	BRA	_00338_DS_
                                           _00263_DS_:
                                           ;	.line	463; stepperCon.c	CCP5CONbits.DC5B = pwm_a_l ;             // Set PWM duty cycle, Phase-A
0002de   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0002e0   0b03     andlw   0x03             	ANDLW	0x03
0002e2   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
0002e4   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0002e6   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
0002e8   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
0002ea   0bcf     andlw   0xcf             	ANDLW	0xcf
0002ec   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0002ee   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
0002f0   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ;	.line	464; stepperCon.c	CCPR5L = pwm_a_h ;
0002f2   c001     movff   0x001, 0xf55     	MOVFF	r0x01, _CCPR5L
0002f4   ff55
                                           ;	.line	466; stepperCon.c	CCP4CONbits.DC4B = pwm_b_l ;             // Set PWM duty cycle, Phase-B
0002f6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0002f8   0b03     andlw   0x03             	ANDLW	0x03
0002fa   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
0002fc   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0002fe   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000300   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
000302   0bcf     andlw   0xcf             	ANDLW	0xcf
000304   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000306   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000308   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	467; stepperCon.c	CCPR4L = pwm_b_h ;
00030a   c003     movff   0x003, 0xf58     	MOVFF	r0x03, _CCPR4L
00030c   ff58
00030e   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	469; stepperCon.c	if (step_a > THREE_QUARTERS && step_a < (FULL_CYCLE - 1)) {
000310   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000312   0f80     addlw   0x80             	ADDLW	0x80
000314   0f4f     addlw   0x4f             	ADDLW	0x4f
000316   e30a     bnc     0x00032c         	BNC	_00271_DS_
000318   010f     movlb   0xf              	BANKSEL	_step_a
00031a   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
00031c   0f80     addlw   0x80             	ADDLW	0x80
00031e   0f41     addlw   0x41             	ADDLW	0x41
000320   e205     bc      0x00032c         	BC	_00271_DS_
                                           ;	.line	470; stepperCon.c	a_decay = FAST_DECAY ;
000322   0e01     movlw   0x01             	MOVLW	0x01
000324   010f     movlb   0xf              	BANKSEL	_a_decay
000326   6f35     movwf   0x35, 0x1        	MOVWF	_a_decay, B
                                           ;	.line	471; stepperCon.c	PORTAbits.RA4 = 1 ;
000328   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
00032a   d014     bra     0x000354         	BRA	_00272_DS_
                                           _00271_DS_:
00032c   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	473; stepperCon.c	else if (step_a >= HALF_CYCLE) a_decay = SLOW_DECAY ;
00032e   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000330   0f80     addlw   0x80             	ADDLW	0x80
000332   0f60     addlw   0x60             	ADDLW	0x60
000334   e303     bnc     0x00033c         	BNC	_00268_DS_
000336   010f     movlb   0xf              	BANKSEL	_a_decay
000338   6b35     clrf    0x35, 0x1        	CLRF	_a_decay, B
00033a   d00c     bra     0x000354         	BRA	_00272_DS_
                                           _00268_DS_:
00033c   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	474; stepperCon.c	else if (step_a > STEPS) {
00033e   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000340   0f80     addlw   0x80             	ADDLW	0x80
000342   0f6f     addlw   0x6f             	ADDLW	0x6f
000344   e305     bnc     0x000350         	BNC	_00265_DS_
                                           ;	.line	475; stepperCon.c	a_decay = FAST_DECAY ;
000346   0e01     movlw   0x01             	MOVLW	0x01
000348   010f     movlb   0xf              	BANKSEL	_a_decay
00034a   6f35     movwf   0x35, 0x1        	MOVWF	_a_decay, B
                                           ;	.line	476; stepperCon.c	PORTAbits.RA4 = 1 ;
00034c   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
00034e   d002     bra     0x000354         	BRA	_00272_DS_
                                           _00265_DS_:
000350   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	478; stepperCon.c	else a_decay = SLOW_DECAY ;
000352   6b35     clrf    0x35, 0x1        	CLRF	_a_decay, B
                                           _00272_DS_:
000354   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	480; stepperCon.c	if (step_b > THREE_QUARTERS && step_b < (FULL_CYCLE - 1)) {
000356   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
000358   0f80     addlw   0x80             	ADDLW	0x80
00035a   0f4f     addlw   0x4f             	ADDLW	0x4f
00035c   e30a     bnc     0x000372         	BNC	_00281_DS_
00035e   010f     movlb   0xf              	BANKSEL	_step_b
000360   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
000362   0f80     addlw   0x80             	ADDLW	0x80
000364   0f41     addlw   0x41             	ADDLW	0x41
000366   e205     bc      0x000372         	BC	_00281_DS_
                                           ;	.line	481; stepperCon.c	b_decay = FAST_DECAY ;
000368   0e01     movlw   0x01             	MOVLW	0x01
00036a   010f     movlb   0xf              	BANKSEL	_b_decay
00036c   6f36     movwf   0x36, 0x1        	MOVWF	_b_decay, B
                                           ;	.line	482; stepperCon.c	PORTAbits.RA5 = 1 ;
00036e   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
000370   d014     bra     0x00039a         	BRA	_00282_DS_
                                           _00281_DS_:
000372   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	484; stepperCon.c	else if (step_b >= HALF_CYCLE) b_decay = SLOW_DECAY ;
000374   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
000376   0f80     addlw   0x80             	ADDLW	0x80
000378   0f60     addlw   0x60             	ADDLW	0x60
00037a   e303     bnc     0x000382         	BNC	_00278_DS_
00037c   010f     movlb   0xf              	BANKSEL	_b_decay
00037e   6b36     clrf    0x36, 0x1        	CLRF	_b_decay, B
000380   d00c     bra     0x00039a         	BRA	_00282_DS_
                                           _00278_DS_:
000382   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	485; stepperCon.c	else if (step_b > STEPS) {
000384   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
000386   0f80     addlw   0x80             	ADDLW	0x80
000388   0f6f     addlw   0x6f             	ADDLW	0x6f
00038a   e305     bnc     0x000396         	BNC	_00275_DS_
                                           ;	.line	486; stepperCon.c	b_decay = FAST_DECAY ;
00038c   0e01     movlw   0x01             	MOVLW	0x01
00038e   010f     movlb   0xf              	BANKSEL	_b_decay
000390   6f36     movwf   0x36, 0x1        	MOVWF	_b_decay, B
                                           ;	.line	487; stepperCon.c	PORTAbits.RA5 = 1 ;
000392   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
000394   d002     bra     0x00039a         	BRA	_00282_DS_
                                           _00275_DS_:
000396   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	489; stepperCon.c	else b_decay = SLOW_DECAY ;
000398   6b36     clrf    0x36, 0x1        	CLRF	_b_decay, B
                                           _00282_DS_:
                                           ;	.line	491; stepperCon.c	state = NEXT_STEP ;
00039a   0e06     movlw   0x06             	MOVLW	0x06
00039c   010f     movlb   0xf              	BANKSEL	_state
00039e   6f2b     movwf   0x2b, 0x1        	MOVWF	_state, B
                                           ;	.line	492; stepperCon.c	break ;
0003a0   d675     bra     0x00008c         	BRA	_00338_DS_
                                           _00284_DS_:
                                           ;	.line	495; stepperCon.c	state = RUNNING ;
0003a2   0e02     movlw   0x02             	MOVLW	0x02
0003a4   010f     movlb   0xf              	BANKSEL	_state
0003a6   6f2b     movwf   0x2b, 0x1        	MOVWF	_state, B
0003a8   010f     movlb   0xf              	BANKSEL	_dir
                                           ;	.line	498; stepperCon.c	if (dir == 1) {
0003aa   512c     movf    0x2c, 0x0, 0x1   	MOVF	_dir, W, B
0003ac   0a01     xorlw   0x01             	XORLW	0x01
0003ae   e11a     bnz     0x0003e4         	BNZ	_00294_DS_
                                           _00561_DS_:
0003b0   010f     movlb   0xf              	BANKSEL	_skip
                                           ;	.line	499; stepperCon.c	step_a += skip ;
0003b2   5132     movf    0x32, 0x0, 0x1   	MOVF	_skip, W, B
0003b4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0003b6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003b8   010f     movlb   0xf              	BANKSEL	_step_a
0003ba   2733     addwf   0x33, 0x1, 0x1   	ADDWF	_step_a, F, B
                                           ;	.line	500; stepperCon.c	step_b += skip ;
0003bc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003be   010f     movlb   0xf              	BANKSEL	_step_b
0003c0   2734     addwf   0x34, 0x1, 0x1   	ADDWF	_step_b, F, B
0003c2   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	501; stepperCon.c	if (step_a > FULL_CYCLE - 1) step_a -= FULL_CYCLE ;
0003c4   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
0003c6   0f80     addlw   0x80             	ADDLW	0x80
0003c8   0f40     addlw   0x40             	ADDLW	0x40
0003ca   e303     bnc     0x0003d2         	BNC	_00286_DS_
0003cc   0ec0     movlw   0xc0             	MOVLW	0xc0
0003ce   010f     movlb   0xf              	BANKSEL	_step_a
0003d0   2733     addwf   0x33, 0x1, 0x1   	ADDWF	_step_a, F, B
                                           _00286_DS_:
0003d2   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	502; stepperCon.c	if (step_b > FULL_CYCLE - 1) step_b -= FULL_CYCLE ;
0003d4   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
0003d6   0f80     addlw   0x80             	ADDLW	0x80
0003d8   0f40     addlw   0x40             	ADDLW	0x40
0003da   e31d     bnc     0x000416         	BNC	_00295_DS_
0003dc   0ec0     movlw   0xc0             	MOVLW	0xc0
0003de   010f     movlb   0xf              	BANKSEL	_step_b
0003e0   2734     addwf   0x34, 0x1, 0x1   	ADDWF	_step_b, F, B
0003e2   d019     bra     0x000416         	BRA	_00295_DS_
                                           _00294_DS_:
0003e4   010f     movlb   0xf              	BANKSEL	_skip
                                           ;	.line	506; stepperCon.c	step_a -= skip ;
0003e6   5132     movf    0x32, 0x0, 0x1   	MOVF	_skip, W, B
0003e8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0003ea   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003ec   010f     movlb   0xf              	BANKSEL	_step_a
0003ee   5f33     subwf   0x33, 0x1, 0x1   	SUBWF	_step_a, F, B
                                           ;	.line	507; stepperCon.c	step_b -= skip ;
0003f0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003f2   010f     movlb   0xf              	BANKSEL	_step_b
0003f4   5f34     subwf   0x34, 0x1, 0x1   	SUBWF	_step_b, F, B
                                           ;	.line	508; stepperCon.c	if (step_a < 0) step_a += FULL_CYCLE ;
0003f6   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0003f8   010f     movlb   0xf              	BANKSEL	_step_a
0003fa   af33     btfss   0x33, 0x7, 0x1   	BTFSS	_step_a, 7, B
0003fc   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0003fe   e303     bnc     0x000406         	BNC	_00290_DS_
000400   0e40     movlw   0x40             	MOVLW	0x40
000402   010f     movlb   0xf              	BANKSEL	_step_a
000404   2733     addwf   0x33, 0x1, 0x1   	ADDWF	_step_a, F, B
                                           _00290_DS_:
                                           ;	.line	509; stepperCon.c	if (step_b < 0) step_b += FULL_CYCLE ;
000406   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
000408   010f     movlb   0xf              	BANKSEL	_step_b
00040a   af34     btfss   0x34, 0x7, 0x1   	BTFSS	_step_b, 7, B
00040c   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00040e   e303     bnc     0x000416         	BNC	_00295_DS_
000410   0e40     movlw   0x40             	MOVLW	0x40
000412   010f     movlb   0xf              	BANKSEL	_step_b
000414   2734     addwf   0x34, 0x1, 0x1   	ADDWF	_step_b, F, B
                                           _00295_DS_:
000416   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	513; stepperCon.c	if (step_a == HALF_CYCLE || step_a == 0) pol_a = 2 ;
000418   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
00041a   0a20     xorlw   0x20             	XORLW	0x20
00041c   e003     bz      0x000424         	BZ	_00299_DS_
                                           _00565_DS_:
00041e   010f     movlb   0xf              	BANKSEL	_step_a
000420   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000422   e104     bnz     0x00042c         	BNZ	_00300_DS_
                                           _00299_DS_:
000424   0e02     movlw   0x02             	MOVLW	0x02
000426   0102     movlb   0x2              	BANKSEL	_pol_a
000428   6f82     movwf   0x82, 0x1        	MOVWF	_pol_a, B
00042a   d00b     bra     0x000442         	BRA	_00301_DS_
                                           _00300_DS_:
00042c   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	514; stepperCon.c	else if (step_a > HALF_CYCLE) pol_a = 0 ;
00042e   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000430   0f80     addlw   0x80             	ADDLW	0x80
000432   0f5f     addlw   0x5f             	ADDLW	0x5f
000434   e303     bnc     0x00043c         	BNC	_00297_DS_
000436   0102     movlb   0x2              	BANKSEL	_pol_a
000438   6b82     clrf    0x82, 0x1        	CLRF	_pol_a, B
00043a   d003     bra     0x000442         	BRA	_00301_DS_
                                           _00297_DS_:
                                           ;	.line	515; stepperCon.c	else pol_a = 1 ;
00043c   0e01     movlw   0x01             	MOVLW	0x01
00043e   0102     movlb   0x2              	BANKSEL	_pol_a
000440   6f82     movwf   0x82, 0x1        	MOVWF	_pol_a, B
                                           _00301_DS_:
000442   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	517; stepperCon.c	if (step_b == HALF_CYCLE || step_b == 0) pol_b = 2 ;
000444   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
000446   0a20     xorlw   0x20             	XORLW	0x20
000448   e003     bz      0x000450         	BZ	_00306_DS_
                                           _00568_DS_:
00044a   010f     movlb   0xf              	BANKSEL	_step_b
00044c   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
00044e   e104     bnz     0x000458         	BNZ	_00307_DS_
                                           _00306_DS_:
000450   0e02     movlw   0x02             	MOVLW	0x02
000452   0102     movlb   0x2              	BANKSEL	_pol_b
000454   6f83     movwf   0x83, 0x1        	MOVWF	_pol_b, B
000456   d00b     bra     0x00046e         	BRA	_00308_DS_
                                           _00307_DS_:
000458   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	518; stepperCon.c	else if (step_b > HALF_CYCLE) pol_b = 0 ;
00045a   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
00045c   0f80     addlw   0x80             	ADDLW	0x80
00045e   0f5f     addlw   0x5f             	ADDLW	0x5f
000460   e303     bnc     0x000468         	BNC	_00304_DS_
000462   0102     movlb   0x2              	BANKSEL	_pol_b
000464   6b83     clrf    0x83, 0x1        	CLRF	_pol_b, B
000466   d003     bra     0x00046e         	BRA	_00308_DS_
                                           _00304_DS_:
                                           ;	.line	519; stepperCon.c	else pol_b = 1 ;
000468   0e01     movlw   0x01             	MOVLW	0x01
00046a   0102     movlb   0x2              	BANKSEL	_pol_b
00046c   6f83     movwf   0x83, 0x1        	MOVWF	_pol_b, B
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
                                           _00308_DS_:
00046e   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	522; stepperCon.c	pwm_a_l = 0x0c + (pwm_lu[step_a] & 0x3) << 4 ;
000470   5133     movf    0x33, 0x0, 0x1   	MOVF	_step_a, W, B
000472   0d02     mullw   0x02             	MULLW	0x02
000474   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000476   010f     movlb   0xf              	BANKSEL	_step_a
000478   bf33     btfsc   0x33, 0x7, 0x1   	BTFSC	_step_a, 7, B
00047a   0802     sublw   0x02             	SUBLW	0x02
00047c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00047e   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000480   f004
000482   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
000484   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000486   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000488   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00048a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00048c   ffe9
00048e   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000490   ffea
000492   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000494   f004
000496   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
000498   f005
00049a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00049c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00049e   0e03     movlw   0x03             	MOVLW	0x03
0004a0   1606     andwf   0x06, 0x1, 0x0   	ANDWF	r0x06, F
0004a2   0e0c     movlw   0x0c             	MOVLW	0x0c
0004a4   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
0004a6   3806     swapf   0x06, 0x0, 0x0   	SWAPF	r0x06, W
0004a8   0bf0     andlw   0xf0             	ANDLW	0xf0
0004aa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	523; stepperCon.c	pwm_a_h = pwm_lu[step_a] >> 2 ;
0004ac   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0004ae   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0004b0   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0004b2   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0004b4   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0004b6   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0004b8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004ba   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
0004bc   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	525; stepperCon.c	pwm_b_l = 0x0c + (pwm_lu[step_b] & 0x3) << 4 ;
0004be   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_b, W, B
0004c0   0d02     mullw   0x02             	MULLW	0x02
0004c2   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0004c4   010f     movlb   0xf              	BANKSEL	_step_b
0004c6   bf34     btfsc   0x34, 0x7, 0x1   	BTFSC	_step_b, 7, B
0004c8   0802     sublw   0x02             	SUBLW	0x02
0004ca   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0004cc   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0004ce   f004
0004d0   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0004d2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0004d4   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0004d6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0004d8   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0004da   ffe9
0004dc   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0004de   ffea
0004e0   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0004e2   f004
0004e4   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0004e6   f005
0004e8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004ea   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0004ec   0e03     movlw   0x03             	MOVLW	0x03
0004ee   1606     andwf   0x06, 0x1, 0x0   	ANDWF	r0x06, F
0004f0   0e0c     movlw   0x0c             	MOVLW	0x0c
0004f2   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
0004f4   3806     swapf   0x06, 0x0, 0x0   	SWAPF	r0x06, W
0004f6   0bf0     andlw   0xf0             	ANDLW	0xf0
0004f8   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           ;	.line	526; stepperCon.c	pwm_b_h = pwm_lu[step_b] >> 2 ;
0004fa   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0004fc   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0004fe   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000500   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000502   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
000504   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000506   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000508   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           ;	.line	528; stepperCon.c	break ;
00050a   ef46     goto    0x00008c         	GOTO	_00338_DS_
00050c   f000
                                           _00310_DS_:
                                           ;	.line	531; stepperCon.c	if(CM1CON0bits.C1OUT && a_state == T_DRIVE) {
00050e   ac79     btfss   0x79, 0x6, 0x0   	BTFSS	_CM1CON0bits, 6
000510   d016     bra     0x00053e         	BRA	_00318_DS_
000512   0102     movlb   0x2              	BANKSEL	_a_state
000514   5180     movf    0x80, 0x0, 0x1   	MOVF	_a_state, W, B
000516   0a02     xorlw   0x02             	XORLW	0x02
000518   e112     bnz     0x00053e         	BNZ	_00318_DS_
                                           _00573_DS_:
00051a   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	532; stepperCon.c	if (a_decay == FAST_DECAY) {            
00051c   5135     movf    0x35, 0x0, 0x1   	MOVF	_a_decay, W, B
00051e   0a01     xorlw   0x01             	XORLW	0x01
000520   e109     bnz     0x000534         	BNZ	_00315_DS_
                                           _00575_DS_:
000522   0102     movlb   0x2              	BANKSEL	_pol_a
                                           ;	.line	533; stepperCon.c	if (pol_a) {                    // Forward current, Phase-A
000524   5182     movf    0x82, 0x0, 0x1   	MOVF	_pol_a, W, B
000526   e003     bz      0x00052e         	BZ	_00312_DS_
                                           ;	.line	534; stepperCon.c	LATCbits.LATC0 = 0 ;
000528   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	535; stepperCon.c	LATCbits.LATC1 = 1 ;  
00052a   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
00052c   d004     bra     0x000536         	BRA	_00316_DS_
                                           _00312_DS_:
                                           ;	.line	538; stepperCon.c	LATCbits.LATC1 = 0 ;
00052e   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	539; stepperCon.c	LATCbits.LATC0 = 1 ;
000530   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
000532   d001     bra     0x000536         	BRA	_00316_DS_
                                           _00315_DS_:
                                           ;	.line	542; stepperCon.c	else PORTAbits.RA4 = 0 ;
000534   9880     bcf     0x80, 0x4, 0x0   	BCF	_PORTAbits, 4
                                           _00316_DS_:
                                           ;	.line	544; stepperCon.c	a_state = PH_OFF ;
000536   0e01     movlw   0x01             	MOVLW	0x01
000538   0102     movlb   0x2              	BANKSEL	_a_state
00053a   6f80     movwf   0x80, 0x1        	MOVWF	_a_state, B
                                           ;	.line	545; stepperCon.c	T1CONbits.TMR1ON = 1 ;
00053c   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00318_DS_:
                                           ;	.line	548; stepperCon.c	if(CM2CON0bits.C2OUT && b_state == T_DRIVE) {
00053e   ac78     btfss   0x78, 0x6, 0x0   	BTFSS	_CM2CON0bits, 6
000540   d016     bra     0x00056e         	BRA	_00327_DS_
000542   0102     movlb   0x2              	BANKSEL	_b_state
000544   5181     movf    0x81, 0x0, 0x1   	MOVF	_b_state, W, B
000546   0a02     xorlw   0x02             	XORLW	0x02
000548   e112     bnz     0x00056e         	BNZ	_00327_DS_
                                           _00577_DS_:
00054a   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	549; stepperCon.c	if (b_decay == FAST_DECAY) {
00054c   5136     movf    0x36, 0x0, 0x1   	MOVF	_b_decay, W, B
00054e   0a01     xorlw   0x01             	XORLW	0x01
000550   e109     bnz     0x000564         	BNZ	_00324_DS_
                                           _00579_DS_:
000552   0102     movlb   0x2              	BANKSEL	_pol_b
                                           ;	.line	550; stepperCon.c	if (pol_b) {                    // Forward current, Phase-B
000554   5183     movf    0x83, 0x0, 0x1   	MOVF	_pol_b, W, B
000556   e003     bz      0x00055e         	BZ	_00321_DS_
                                           ;	.line	551; stepperCon.c	LATDbits.LATD5 = 0 ;
000558   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	552; stepperCon.c	LATCbits.LATC2 = 1 ;
00055a   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
00055c   d004     bra     0x000566         	BRA	_00325_DS_
                                           _00321_DS_:
                                           ;	.line	555; stepperCon.c	LATCbits.LATC2 = 0 ;
00055e   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	556; stepperCon.c	LATDbits.LATD5 = 1 ;
000560   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
000562   d001     bra     0x000566         	BRA	_00325_DS_
                                           _00324_DS_:
                                           ;	.line	559; stepperCon.c	else PORTAbits.RA5 = 0 ;
000564   9a80     bcf     0x80, 0x5, 0x0   	BCF	_PORTAbits, 5
                                           _00325_DS_:
                                           ;	.line	561; stepperCon.c	b_state = PH_OFF ;
000566   0e01     movlw   0x01             	MOVLW	0x01
000568   0102     movlb   0x2              	BANKSEL	_b_state
00056a   6f81     movwf   0x81, 0x1        	MOVWF	_b_state, B
                                           ;	.line	562; stepperCon.c	T3CONbits.TMR3ON = 1 ;
00056c   80b1     bsf     0xb1, 0x0, 0x0   	BSF	_T3CONbits, 0
                                           _00327_DS_:
                                           ;	.line	566; stepperCon.c	if (!PORTBbits.RB3) {
00056e   b681     btfsc   0x81, 0x3, 0x0   	BTFSC	_PORTBbits, 3
000570   ef46     goto    0x00008c         	GOTO	_00338_DS_
000572   f000
                                           ;	.line	567; stepperCon.c	INTCONbits.GIE = 0 ;
000574   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	568; stepperCon.c	idleInts() ;
000576   ecc8     call    0x002190, 0x0    	CALL	_idleInts
000578   f010
                                           ;	.line	570; stepperCon.c	LATAbits.LATA4 = 0 ;    // Shut phases down
00057a   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	571; stepperCon.c	LATAbits.LATA5 = 0 ; 
00057c   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
                                           ;	.line	573; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
00057e   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
000580   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	574; stepperCon.c	state = IDLE ;
000582   6b2b     clrf    0x2b, 0x1        	CLRF	_state, B
                                           ;	.line	575; stepperCon.c	INTCONbits.GIE = 1 ;
000584   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	577; stepperCon.c	break ;
000586   ef46     goto    0x00008c         	GOTO	_00338_DS_
000588   f000
                                           _00331_DS_:
                                           ;	.line	581; stepperCon.c	if (PORTBbits.RB3) state = START ;
00058a   a681     btfss   0x81, 0x3, 0x0   	BTFSS	_PORTBbits, 3
00058c   d003     bra     0x000594         	BRA	_00333_DS_
00058e   0e01     movlw   0x01             	MOVLW	0x01
000590   010f     movlb   0xf              	BANKSEL	_state
000592   6f2b     movwf   0x2b, 0x1        	MOVWF	_state, B
                                           _00333_DS_:
000594   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	584; stepperCon.c	if (i2c_dirty) {
000596   5130     movf    0x30, 0x0, 0x1   	MOVF	_i2c_dirty, W, B
000598   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
00059a   ef46     goto    0x00008c         	GOTO	_00338_DS_
00059c   f000
                                           ;	.line	585; stepperCon.c	store_regs(i2c_regs, sizeof(i2c_regs)) ;
00059e   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
0005a0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0005a2   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
0005a4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0005a6   0e80     movlw   0x80             	MOVLW	0x80
0005a8   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0005aa   0e09     movlw   0x09             	MOVLW	0x09
0005ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005ae   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0005b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0005b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005ba   ecca     call    0x001994, 0x0    	CALL	_store_regs
0005bc   f00c
0005be   0e04     movlw   0x04             	MOVLW	0x04
0005c0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0005c2   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	586; stepperCon.c	i2c_dirty = 0 ;
0005c4   6b30     clrf    0x30, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	587; stepperCon.c	set_op_vars() ; 
0005c6   ec86     call    0x001b0c, 0x0    	CALL	_set_op_vars
0005c8   f00d
                                           ;	.line	591; stepperCon.c	}
0005ca   ef46     goto    0x00008c         	GOTO	_00338_DS_
0005cc   f000
                                           ;	.line	593; stepperCon.c	}
0005ce   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__delay_ms	code
                                           _delay_ms:
                                           ;	.line	353; stepperCon.c	void delay_ms(uint16_t time) {
001f88   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001f8a   ffe5
001f8c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001f8e   ffd9
001f90   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001f92   ffe5
001f94   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001f96   ffe5
001f98   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001f9a   ffe5
001f9c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001f9e   ffe5
001fa0   0e02     movlw   0x02             	MOVLW	0x02
001fa2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001fa4   f000
001fa6   0e03     movlw   0x03             	MOVLW	0x03
001fa8   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001faa   f001
                                           ;	.line	356; stepperCon.c	T0CON = 0x02 ;
001fac   0e02     movlw   0x02             	MOVLW	0x02
001fae   6ed5     movwf   0xd5, 0x0        	MOVWF	_T0CON
                                           _00217_DS_:
                                           ;	.line	358; stepperCon.c	while(--i) {
001fb0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001fb2   0fff     addlw   0xff             	ADDLW	0xff
001fb4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001fb6   0eff     movlw   0xff             	MOVLW	0xff
001fb8   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001fba   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001fbc   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
001fbe   f000
001fc0   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
001fc2   f001
001fc4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001fc6   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
001fc8   e00a     bz      0x001fde         	BZ	_00219_DS_
                                           ;	.line	359; stepperCon.c	T0CONbits.TMR0ON = 0 ;
001fca   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	360; stepperCon.c	INTCONbits.TMR0IF = 0 ;
001fcc   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	361; stepperCon.c	TMR0H = TMR_1MS >> 8 ;
001fce   0ef8     movlw   0xf8             	MOVLW	0xf8
001fd0   6ed7     movwf   0xd7, 0x0        	MOVWF	_TMR0H
                                           ;	.line	362; stepperCon.c	TMR0L = TMR_1MS ;
001fd2   0e30     movlw   0x30             	MOVLW	0x30
001fd4   6ed6     movwf   0xd6, 0x0        	MOVWF	_TMR0L
                                           ;	.line	363; stepperCon.c	T0CONbits.TMR0ON = 1 ;
001fd6   8ed5     bsf     0xd5, 0x7, 0x0   	BSF	_T0CONbits, 7
                                           _00214_DS_:
                                           ;	.line	365; stepperCon.c	while(!INTCONbits.TMR0IF) ;
001fd8   b4f2     btfsc   0xf2, 0x2, 0x0   	BTFSC	_INTCONbits, 2
001fda   d7ea     bra     0x001fb0         	BRA	_00217_DS_
001fdc   d7fd     bra     0x001fd8         	BRA	_00214_DS_
                                           _00219_DS_:
                                           ;	.line	368; stepperCon.c	T0CONbits.TMR0ON = 0 ;
001fde   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	369; stepperCon.c	INTCONbits.TMR0IF = 0 ;
001fe0   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	370; stepperCon.c	}
001fe2   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001fe4   f003
001fe6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001fe8   f002
001fea   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001fec   f001
001fee   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001ff0   f000
001ff2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001ff4   ffd9
001ff6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__set_op_vars	code
                                           _set_op_vars:
                                           ;	.line	340; stepperCon.c	void set_op_vars(void) {
001b0c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001b0e   ffe5
001b10   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001b12   ffd9
001b14   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001b16   ffe5
001b18   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001b1a   ffe5
001b1c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001b1e   ffe5
001b20   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001b22   ffe5
                                           ;	.line	341; stepperCon.c	i2c_address = i2c_regs[0x00] ;
001b24   c0e1     movff   0x0e1, 0xf31     	MOVFF	_i2c_regs, _i2c_address
001b26   ff31
                                           ;	.line	342; stepperCon.c	skip        = i2c_regs[0x01] ;
001b28   c0e2     movff   0x0e2, 0xf32     	MOVFF	(_i2c_regs + 1), _skip
001b2a   ff32
                                           ;	.line	343; stepperCon.c	set_amp     = i2c_regs[0x02] ;
001b2c   c0e3     movff   0x0e3, 0xf24     	MOVFF	(_i2c_regs + 2), _set_amp
001b2e   ff24
001b30   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
001b32   6b25     clrf    0x25, 0x1        	CLRF	(_set_amp + 1), B
                                           ;	.line	344; stepperCon.c	set_amp    += i2c_regs[0x03] << 8 ;
001b34   c0e4     movff   0x0e4, 0x000     	MOVFF	(_i2c_regs + 3), r0x00
001b36   f000
001b38   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001b3a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b3c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001b3e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001b40   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b42   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001b44   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001b46   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001b48   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b4a   010f     movlb   0xf              	BANKSEL	_set_amp
001b4c   2724     addwf   0x24, 0x1, 0x1   	ADDWF	_set_amp, F, B
001b4e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b50   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
001b52   2325     addwfc  0x25, 0x1, 0x1   	ADDWFC	(_set_amp + 1), F, B
                                           ;	.line	345; stepperCon.c	max_amp     = i2c_regs[0x04] ;
001b54   c0e5     movff   0x0e5, 0xf26     	MOVFF	(_i2c_regs + 4), _max_amp
001b56   ff26
001b58   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001b5a   6b27     clrf    0x27, 0x1        	CLRF	(_max_amp + 1), B
                                           ;	.line	346; stepperCon.c	max_amp    += i2c_regs[0x05] << 8 ;
001b5c   c0e6     movff   0x0e6, 0x000     	MOVFF	(_i2c_regs + 5), r0x00
001b5e   f000
001b60   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001b62   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b64   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001b66   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001b68   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b6a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001b6c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001b6e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001b70   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b72   010f     movlb   0xf              	BANKSEL	_max_amp
001b74   2726     addwf   0x26, 0x1, 0x1   	ADDWF	_max_amp, F, B
001b76   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b78   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001b7a   2327     addwfc  0x27, 0x1, 0x1   	ADDWFC	(_max_amp + 1), F, B
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 6) and store in _t_off
001b7c   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 6)
                                           ;	.line	347; stepperCon.c	t_off       = i2c_regs[0x06] * 2 * TMR_500NS ;
001b7e   51e7     movf    0xe7, 0x0, 0x1   	MOVF	(_i2c_regs + 6), W, B
001b80   0d02     mullw   0x02             	MULLW	0x02
001b82   cff3     movff   0xff3, 0xf28     	MOVFF	PRODL, _t_off
001b84   ff28
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 7) and store in _t_blank_low
001b86   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 7)
                                           ;	.line	348; stepperCon.c	t_blank_low = i2c_regs[0x07] * 2 * TMR_500NS ;
001b88   51e8     movf    0xe8, 0x0, 0x1   	MOVF	(_i2c_regs + 7), W, B
001b8a   0d02     mullw   0x02             	MULLW	0x02
001b8c   cff3     movff   0xff3, 0xf29     	MOVFF	PRODL, _t_blank_low
001b8e   ff29
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 8) and store in _t_blank_high
001b90   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 8)
                                           ;	.line	349; stepperCon.c	t_blank_high= i2c_regs[0x08] * 2 * TMR_500NS ;
001b92   51e9     movf    0xe9, 0x0, 0x1   	MOVF	(_i2c_regs + 8), W, B
001b94   0d02     mullw   0x02             	MULLW	0x02
001b96   cff3     movff   0xff3, 0xf2a     	MOVFF	PRODL, _t_blank_high
001b98   ff2a
                                           ;	.line	350; stepperCon.c	}
001b9a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001b9c   f003
001b9e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001ba0   f002
001ba2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001ba4   f001
001ba6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001ba8   f000
001baa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001bac   ffd9
001bae   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__prep_pwm_lu	code
                                           _prep_pwm_lu:
                                           ;	.line	324; stepperCon.c	void prep_pwm_lu(void) {
001218   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00121a   ffe5
00121c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00121e   ffd9
001220   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001222   ffe5
001224   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001226   ffe5
001228   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00122a   ffe5
00122c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00122e   ffe5
001230   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001232   ffe5
001234   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001236   ffe5
001238   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00123a   ffe5
00123c   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00123e   ffe5
001240   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001242   ffe5
001244   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
001246   ffe5
001248   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00124a   ffe5
00124c   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
                                           ;	.line	328; stepperCon.c	ratio = (float)set_amp / (float)max_amp ;
00124e   5125     movf    0x25, 0x0, 0x1   	MOVF	(_set_amp + 1), W, B
001250   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001252   010f     movlb   0xf              	BANKSEL	_set_amp
001254   5124     movf    0x24, 0x0, 0x1   	MOVF	_set_amp, W, B
001256   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001258   ecfc     call    0x001ff8, 0x0    	CALL	___uint2fs
00125a   f00f
00125c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00125e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001260   f001
001262   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001264   f002
001266   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
001268   f003
00126a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00126c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00126e   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001270   5127     movf    0x27, 0x0, 0x1   	MOVF	(_max_amp + 1), W, B
001272   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001274   010f     movlb   0xf              	BANKSEL	_max_amp
001276   5126     movf    0x26, 0x0, 0x1   	MOVF	_max_amp, W, B
001278   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00127a   ecfc     call    0x001ff8, 0x0    	CALL	___uint2fs
00127c   f00f
00127e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001280   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001282   f005
001284   cff4     movff   0xff4, 0x006     	MOVFF	PRODH, r0x06
001286   f006
001288   cfe9     movff   0xfe9, 0x007     	MOVFF	FSR0L, r0x07
00128a   f007
00128c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00128e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001290   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001292   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001294   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001296   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001298   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00129a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00129c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00129e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0012a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0012a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ac   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012b0   ec56     call    0x000cac, 0x0    	CALL	___fsdiv
0012b2   f006
0012b4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0012b6   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0012b8   f001
0012ba   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0012bc   f002
0012be   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0012c0   f003
0012c2   0e08     movlw   0x08             	MOVLW	0x08
0012c4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	331; stepperCon.c	zero_cross = __fs2uint(bias) ;
0012c6   0e43     movlw   0x43             	MOVLW	0x43
0012c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ca   0eff     movlw   0xff             	MOVLW	0xff
0012cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ce   0ec0     movlw   0xc0             	MOVLW	0xc0
0012d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012d2   0e00     movlw   0x00             	MOVLW	0x00
0012d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012d6   ecc7     call    0x001d8e, 0x0    	CALL	___fs2uint
0012d8   f00e
0012da   0100     movlb   0x0              	BANKSEL	_zero_cross
0012dc   6ffe     movwf   0xfe, 0x1        	MOVWF	_zero_cross, B
0012de   cff3     movff   0xff3, 0x0ff     	MOVFF	PRODL, (_zero_cross + 1)
0012e0   f0ff
0012e2   0e04     movlw   0x04             	MOVLW	0x04
0012e4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	333; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0012e6   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           ; ;multiply lit val:0x02 by variable r0x04 and store in r0x05
                                           _00195_DS_:
                                           ;	.line	334; stepperCon.c	set = (float)pwm_base[i] * ratio + bias ;
0012e8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0012ea   0d02     mullw   0x02             	MULLW	0x02
0012ec   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0012ee   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0012f0   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0012f2   f005
0012f4   0e60     movlw   0x60             	MOVLW	LOW(_pwm_base)
0012f6   2405     addwf   0x05, 0x0, 0x0   	ADDWF	r0x05, W
0012f8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0012fa   0e00     movlw   0x00             	MOVLW	HIGH(_pwm_base)
0012fc   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0012fe   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001300   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001302   ffe9
001304   c008     movff   0x008, 0xfea     	MOVFF	r0x08, FSR0H
001306   ffea
001308   cfee     movff   0xfee, 0x007     	MOVFF	POSTINC0, r0x07
00130a   f007
00130c   cfef     movff   0xfef, 0x008     	MOVFF	INDF0, r0x08
00130e   f008
001310   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001312   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001314   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001316   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001318   ec50     call    0x001ea0, 0x0    	CALL	___sint2fs
00131a   f00f
00131c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00131e   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
001320   f008
001322   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
001324   f009
001326   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
001328   f00a
00132a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00132c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00132e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001330   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001332   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001334   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001336   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001338   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00133a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00133c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00133e   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
001340   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001342   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001344   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001346   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001348   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00134a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00134c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00134e   ece8     call    0x0005d0, 0x0    	CALL	___fsmul
001350   f002
001352   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001354   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
001356   f008
001358   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
00135a   f009
00135c   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
00135e   f00a
001360   0e08     movlw   0x08             	MOVLW	0x08
001362   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001364   0e43     movlw   0x43             	MOVLW	0x43
001366   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001368   0eff     movlw   0xff             	MOVLW	0xff
00136a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00136c   0ec0     movlw   0xc0             	MOVLW	0xc0
00136e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001370   0e00     movlw   0x00             	MOVLW	0x00
001372   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001374   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
001376   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001378   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00137a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00137c   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00137e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001380   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001382   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001384   eca4     call    0x000948, 0x0    	CALL	___fsadd
001386   f004
001388   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00138a   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
00138c   f008
00138e   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
001390   f009
001392   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
001394   f00a
001396   0e08     movlw   0x08             	MOVLW	0x08
001398   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	335; stepperCon.c	pwm_lu[i] = __fs2uint(set) ;
00139a   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00139c   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
00139e   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0013a0   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0013a2   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0013a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013a6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0013a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013aa   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0013ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013ae   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0013b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013b2   ecc7     call    0x001d8e, 0x0    	CALL	___fs2uint
0013b4   f00e
0013b6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0013b8   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
0013ba   f008
0013bc   0e04     movlw   0x04             	MOVLW	0x04
0013be   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0013c0   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0013c2   ffe9
0013c4   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
0013c6   ffea
0013c8   c007     movff   0x007, 0xfee     	MOVFF	r0x07, POSTINC0
0013ca   ffee
0013cc   c008     movff   0x008, 0xfef     	MOVFF	r0x08, INDF0
0013ce   ffef
                                           ;	.line	333; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0013d0   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0013d2   0e40     movlw   0x40             	MOVLW	0x40
0013d4   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
0013d6   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0013d8   d787     bra     0x0012e8         	BRA	_00195_DS_
                                           ;	.line	337; stepperCon.c	}
0013da   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
0013dc   f00a
0013de   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
0013e0   f009
0013e2   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
0013e4   f008
0013e6   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0013e8   f007
0013ea   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0013ec   f006
0013ee   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0013f0   f005
0013f2   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0013f4   f004
0013f6   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0013f8   f003
0013fa   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0013fc   f002
0013fe   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001400   f001
001402   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001404   f000
001406   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001408   ffd9
00140a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__idleInts	code
                                           _idleInts:
                                           ;	.line	310; stepperCon.c	void idleInts(void) {
002190   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002192   ffe5
002194   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002196   ffd9
                                           ;	.line	311; stepperCon.c	INTCONbits.INT0IE = 0 ;     // Disable 'step' interrupt
002198   98f2     bcf     0xf2, 0x4, 0x0   	BCF	_INTCONbits, 4
                                           ;	.line	312; stepperCon.c	INTCON3bits.INT2IE = 0 ;    // Disable 'dir' interrupt
00219a   98f0     bcf     0xf0, 0x4, 0x0   	BCF	_INTCON3bits, 4
                                           ;	.line	314; stepperCon.c	PIE1bits.SSP1IE = 1 ;       // Enable I2C interrupt
00219c   869d     bsf     0x9d, 0x3, 0x0   	BSF	_PIE1bits, 3
                                           ;	.line	315; stepperCon.c	PIE2bits.BCL1IE = 1 ;       // Enable I2C collision detection interrupt
00219e   86a0     bsf     0xa0, 0x3, 0x0   	BSF	_PIE2bits, 3
                                           ;	.line	317; stepperCon.c	SSP1CON1bits.SSPOV = 0 ;
0021a0   9cc6     bcf     0xc6, 0x6, 0x0   	BCF	_SSP1CON1bits, 6
                                           ;	.line	318; stepperCon.c	PIR1bits.SSP1IF = 0 ;
0021a2   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	319; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
0021a4   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
                                           ;	.line	320; stepperCon.c	SSP1CON1bits.SSPEN = 1 ;    // Enable I2C port
0021a6   8ac6     bsf     0xc6, 0x5, 0x0   	BSF	_SSP1CON1bits, 5
                                           ;	.line	321; stepperCon.c	}
0021a8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0021aa   ffd9
0021ac   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__activeInts	code
                                           _activeInts:
                                           ;	.line	291; stepperCon.c	void activeInts(void) {
0020d2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0020d4   ffe5
0020d6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0020d8   ffd9
                                           ;	.line	292; stepperCon.c	PIE1bits.SSP1IE = 0 ;       // Disable I2C interrupt
0020da   969d     bcf     0x9d, 0x3, 0x0   	BCF	_PIE1bits, 3
                                           ;	.line	293; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;    // Disable I2C port
0020dc   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	294; stepperCon.c	PIE2bits.BCL1IE = 0 ;       // Disable I2C collision detection interrupt
0020de   96a0     bcf     0xa0, 0x3, 0x0   	BCF	_PIE2bits, 3
                                           ;	.line	297; stepperCon.c	if(PORTBbits.RB2) { 
0020e0   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
0020e2   d005     bra     0x0020ee         	BRA	_00182_DS_
                                           ;	.line	298; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;
0020e4   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	299; stepperCon.c	dir = 1 ;
0020e6   0e01     movlw   0x01             	MOVLW	0x01
0020e8   010f     movlb   0xf              	BANKSEL	_dir
0020ea   6f2c     movwf   0x2c, 0x1        	MOVWF	_dir, B
0020ec   d004     bra     0x0020f6         	BRA	_00183_DS_
                                           _00182_DS_:
                                           ;	.line	302; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
0020ee   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	303; stepperCon.c	dir = -1 ;
0020f0   0eff     movlw   0xff             	MOVLW	0xff
0020f2   010f     movlb   0xf              	BANKSEL	_dir
0020f4   6f2c     movwf   0x2c, 0x1        	MOVWF	_dir, B
                                           _00183_DS_:
                                           ;	.line	306; stepperCon.c	INTCONbits.INT0IE = 1 ;     // Enable 'step' interrupt
0020f6   88f2     bsf     0xf2, 0x4, 0x0   	BSF	_INTCONbits, 4
                                           ;	.line	307; stepperCon.c	INTCON3bits.INT2IE = 1 ;    // Enable 'dir' interrupt
0020f8   88f0     bsf     0xf0, 0x4, 0x0   	BSF	_INTCON3bits, 4
                                           ;	.line	308; stepperCon.c	}
0020fa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0020fc   ffd9
0020fe   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__i2cSetup	code
                                           _i2cSetup:
                                           ;	.line	276; stepperCon.c	void i2cSetup(void) {
002100   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002102   ffe5
002104   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002106   ffd9
                                           ;	.line	277; stepperCon.c	TRISCbits.TRISC3 = 1 ;      // Set I2C pins as input
002108   8694     bsf     0x94, 0x3, 0x0   	BSF	_TRISCbits, 3
                                           ;	.line	278; stepperCon.c	TRISCbits.TRISC4 = 1 ;
00210a   8894     bsf     0x94, 0x4, 0x0   	BSF	_TRISCbits, 4
                                           ;	.line	280; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;
00210c   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	281; stepperCon.c	SSP1CON2bits.GCEN = 1 ;     // Enable general call on address 0x00
00210e   8ec5     bsf     0xc5, 0x7, 0x0   	BSF	_SSP1CON2bits, 7
                                           ;	.line	282; stepperCon.c	SSP1CON2bits.SEN = 1 ;      // Enable clock stretching
002110   80c5     bsf     0xc5, 0x0, 0x0   	BSF	_SSP1CON2bits, 0
                                           ;	.line	283; stepperCon.c	SSP1ADD = i2c_address ;     // Set device I2C address
002112   cf31     movff   0xf31, 0xfc8     	MOVFF	_i2c_address, _SSP1ADD
002114   ffc8
002116   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
                                           ;	.line	285; stepperCon.c	i2c_reg_addr = 0 ;
002118   6b2f     clrf    0x2f, 0x1        	CLRF	_i2c_reg_addr, B
                                           ;	.line	287; stepperCon.c	SSP1CON1bits.SSPM = 0x6 ;   // I2C Slave mode, 7-bit address
00211a   50c6     movf    0xc6, 0x0, 0x0   	MOVF	_SSP1CON1bits, W
00211c   0bf0     andlw   0xf0             	ANDLW	0xf0
00211e   0906     iorlw   0x06             	IORLW	0x06
002120   6ec6     movwf   0xc6, 0x0        	MOVWF	_SSP1CON1bits
                                           ;	.line	288; stepperCon.c	}
002122   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002124   ffd9
002126   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__lowInt	code
                                           _lowInt:
                                           ;	.line	233; stepperCon.c	static void lowInt(void) __interrupt(2) {
001582   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
001584   ffe5
001586   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
001588   ffe5
00158a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00158c   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
00158e   ffe5
001590   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
001592   ffe5
001594   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
001596   ffe5
001598   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
00159a   ffe5
00159c   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
00159e   ffe5
0015a0   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0015a2   ffe5
0015a4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0015a6   ffe5
0015a8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0015aa   ffd9
0015ac   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0015ae   ffe5
0015b0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0015b2   ffe5
0015b4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0015b6   ffe5
                                           ;	.line	234; stepperCon.c	uint8_t i2c_buf = 0 ;
0015b8   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	237; stepperCon.c	if (PIR1bits.SSP1IF) {
0015ba   a69e     btfss   0x9e, 0x3, 0x0   	BTFSS	_PIR1bits, 3
0015bc   d054     bra     0x001666         	BRA	_00138_DS_
                                           ;	.line	238; stepperCon.c	if (SSP1STATbits.BF) i2c_buf = SSP1BUF ;    // Read data, clear BF
0015be   a0c7     btfss   0xc7, 0x0, 0x0   	BTFSS	_SSP1STATbits, 0
0015c0   d002     bra     0x0015c6         	BRA	_00123_DS_
0015c2   cfc9     movff   0xfc9, 0x000     	MOVFF	_SSP1BUF, r0x00
0015c4   f000
                                           _00123_DS_:
                                           ;	.line	241; stepperCon.c	if (!SSP1STATbits.D) {
0015c6   bac7     btfsc   0xc7, 0x5, 0x0   	BTFSC	_SSP1STATbits, 5
0015c8   d014     bra     0x0015f2         	BRA	_00133_DS_
0015ca   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	242; stepperCon.c	i2c_counter = 0 ;                       // Reset counter
0015cc   6b2e     clrf    0x2e, 0x1        	CLRF	_i2c_counter, B
                                           ;	.line	243; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
0015ce   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
0015d0   d03d     bra     0x00164c         	BRA	_00134_DS_
                                           ;	.line	244; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
0015d2   cf2f     movff   0xf2f, 0x001     	MOVFF	_i2c_reg_addr, r0x01
0015d4   f001
0015d6   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
0015d8   2b2f     incf    0x2f, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
0015da   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0015dc   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
0015de   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0015e0   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
0015e2   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0015e4   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0015e6   ffe9
0015e8   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0015ea   ffea
0015ec   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
0015ee   ffc9
0015f0   d02d     bra     0x00164c         	BRA	_00134_DS_
                                           _00133_DS_:
0015f2   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	249; stepperCon.c	i2c_counter++ ;                         // Increment counter
0015f4   2b2e     incf    0x2e, 0x1, 0x1   	INCF	_i2c_counter, F, B
                                           ;	.line	250; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
0015f6   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
0015f8   d010     bra     0x00161a         	BRA	_00130_DS_
                                           ;	.line	251; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
0015fa   cf2f     movff   0xf2f, 0x001     	MOVFF	_i2c_reg_addr, r0x01
0015fc   f001
0015fe   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
001600   2b2f     incf    0x2f, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001602   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001604   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001606   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001608   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
00160a   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00160c   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
00160e   ffe9
001610   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
001612   ffea
001614   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001616   ffc9
001618   d019     bra     0x00164c         	BRA	_00134_DS_
                                           _00130_DS_:
00161a   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	254; stepperCon.c	if (i2c_counter == 1) {             // First byte is register
00161c   512e     movf    0x2e, 0x0, 0x1   	MOVF	_i2c_counter, W, B
00161e   0a01     xorlw   0x01             	XORLW	0x01
001620   e103     bnz     0x001628         	BNZ	_00127_DS_
                                           ;	.line	255; stepperCon.c	i2c_reg_addr = i2c_buf ;        // value
001622   c000     movff   0x000, 0xf2f     	MOVFF	r0x00, _i2c_reg_addr
001624   ff2f
001626   d012     bra     0x00164c         	BRA	_00134_DS_
                                           _00127_DS_:
                                           ;	.line	258; stepperCon.c	i2c_regs[i2c_reg_addr++] = i2c_buf ; // write
001628   cf2f     movff   0xf2f, 0x001     	MOVFF	_i2c_reg_addr, r0x01
00162a   f001
00162c   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
00162e   2b2f     incf    0x2f, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001630   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001632   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001634   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001636   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001638   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00163a   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
00163c   ffe9
00163e   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
001640   ffea
001642   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
001644   ffef
                                           ;	.line	259; stepperCon.c	i2c_dirty = 1 ;                 // set I2C dirty flag
001646   0e01     movlw   0x01             	MOVLW	0x01
001648   010f     movlb   0xf              	BANKSEL	_i2c_dirty
00164a   6f30     movwf   0x30, 0x1        	MOVWF	_i2c_dirty, B
                                           _00134_DS_:
                                           ;	.line	264; stepperCon.c	i2c_reg_addr %= sizeof(i2c_regs) ;          // Prevent buffer overflow
00164c   0e09     movlw   0x09             	MOVLW	0x09
00164e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001650   cf2f     movff   0xf2f, 0xfe5     	MOVFF	_i2c_reg_addr, POSTDEC1
001652   ffe5
001654   ec8a     call    0x001f14, 0x0    	CALL	__moduchar
001656   f00f
001658   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
00165a   6f2f     movwf   0x2f, 0x1        	MOVWF	_i2c_reg_addr, B
00165c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00165e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	266; stepperCon.c	PIR1bits.SSP1IF = 0 ;       // Clear interrupt
001660   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	267; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
001662   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
001664   d003     bra     0x00166c         	BRA	_00140_DS_
                                           _00138_DS_:
                                           ;	.line	270; stepperCon.c	else if (PIR2bits.BCL1IF) {
001666   a6a1     btfss   0xa1, 0x3, 0x0   	BTFSS	_PIR2bits, 3
001668   d001     bra     0x00166c         	BRA	_00140_DS_
                                           ;	.line	271; stepperCon.c	PIR2bits.BCL1IF = 0 ;       // Clear I2C collision interrupt
00166a   96a1     bcf     0xa1, 0x3, 0x0   	BCF	_PIR2bits, 3
                                           _00140_DS_:
                                           ;	.line	273; stepperCon.c	}
00166c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00166e   f002
001670   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001672   f001
001674   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001676   f000
001678   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00167a   ffd9
00167c   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
00167e   fffb
001680   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
001682   fffa
001684   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
001686   ffea
001688   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
00168a   ffe9
00168c   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
00168e   fff4
001690   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
001692   fff3
001694   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001696   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
001698   ffe0
00169a   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
00169c   ffd8
00169e   0010     retfie  0x0              	RETFIE	

                                           ; ; Starting pCode block
                                           S_stepperCon__highInt	code
                                           _highInt:
                                           ;	.line	189; stepperCon.c	static void highInt(void) __interrupt(1) {
0016a0   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0016a2   ffe5
0016a4   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0016a6   ffe5
0016a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016aa   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0016ac   ffe5
0016ae   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0016b0   ffe5
0016b2   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0016b4   ffe5
0016b6   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0016b8   ffe5
0016ba   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0016bc   ffe5
0016be   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0016c0   ffe5
0016c2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0016c4   ffe5
0016c6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0016c8   ffd9
0016ca   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0016cc   ffe5
0016ce   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0016d0   ffe5
0016d2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0016d4   ffe5
0016d6   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0016d8   ffe5
                                           ;	.line	191; stepperCon.c	if (INTCONbits.INT0IF) {
0016da   a2f2     btfss   0xf2, 0x1, 0x0   	BTFSS	_INTCONbits, 1
0016dc   d004     bra     0x0016e6         	BRA	_00106_DS_
                                           ;	.line	192; stepperCon.c	state = STEP ;
0016de   0e04     movlw   0x04             	MOVLW	0x04
0016e0   010f     movlb   0xf              	BANKSEL	_state
0016e2   6f2b     movwf   0x2b, 0x1        	MOVWF	_state, B
                                           ;	.line	193; stepperCon.c	INTCONbits.INT0IF = 0 ;     // clear 'step' interrupt
0016e4   92f2     bcf     0xf2, 0x1, 0x0   	BCF	_INTCONbits, 1
                                           _00106_DS_:
                                           ;	.line	197; stepperCon.c	if (INTCON3bits.INT2IF) {
0016e6   a2f0     btfss   0xf0, 0x1, 0x0   	BTFSS	_INTCON3bits, 1
0016e8   d00f     bra     0x001708         	BRA	_00111_DS_
                                           ;	.line	199; stepperCon.c	if(PORTBbits.RB2) {
0016ea   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
0016ec   d005     bra     0x0016f8         	BRA	_00108_DS_
                                           ;	.line	201; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;   
0016ee   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	202; stepperCon.c	dir = 1 ;
0016f0   0e01     movlw   0x01             	MOVLW	0x01
0016f2   010f     movlb   0xf              	BANKSEL	_dir
0016f4   6f2c     movwf   0x2c, 0x1        	MOVWF	_dir, B
0016f6   d004     bra     0x001700         	BRA	_00109_DS_
                                           _00108_DS_:
                                           ;	.line	206; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
0016f8   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	207; stepperCon.c	dir = -1 ;
0016fa   0eff     movlw   0xff             	MOVLW	0xff
0016fc   010f     movlb   0xf              	BANKSEL	_dir
0016fe   6f2c     movwf   0x2c, 0x1        	MOVWF	_dir, B
                                           _00109_DS_:
                                           ;	.line	210; stepperCon.c	state = NEXT_STEP ;         // Force recalculate of next step
001700   0e06     movlw   0x06             	MOVLW	0x06
001702   010f     movlb   0xf              	BANKSEL	_state
001704   6f2b     movwf   0x2b, 0x1        	MOVWF	_state, B
                                           ;	.line	211; stepperCon.c	INTCON3bits.INT2IF = 0 ;    // clear 'dir' interrupt
001706   92f0     bcf     0xf0, 0x1, 0x0   	BCF	_INTCON3bits, 1
                                           _00111_DS_:
                                           ;	.line	215; stepperCon.c	if (PIR1bits.ADIF) {
001708   ac9e     btfss   0x9e, 0x6, 0x0   	BTFSS	_PIR1bits, 6
00170a   d034     bra     0x001774         	BRA	_00117_DS_
00170c   010f     movlb   0xf              	BANKSEL	_adc_cap
                                           ;	.line	216; stepperCon.c	if (adc_cap) {
00170e   512d     movf    0x2d, 0x0, 0x1   	MOVF	_adc_cap, W, B
001710   e017     bz      0x001740         	BZ	_00113_DS_
                                           ;	.line	217; stepperCon.c	b_adc = (ADRESH << 8) + ADRESL ;
001712   cfc4     movff   0xfc4, 0x000     	MOVFF	_ADRESH, r0x00
001714   f000
001716   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001718   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00171a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00171c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00171e   cfc3     movff   0xfc3, 0x000     	MOVFF	_ADRESL, r0x00
001720   f000
001722   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001724   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001726   2402     addwf   0x02, 0x0, 0x0   	ADDWF	r0x02, W
001728   010f     movlb   0xf              	BANKSEL	_b_adc
00172a   6f22     movwf   0x22, 0x1        	MOVWF	_b_adc, B
00172c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00172e   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
001730   010f     movlb   0xf              	BANKSEL	(_b_adc + 1)
001732   6f23     movwf   0x23, 0x1        	MOVWF	(_b_adc + 1), B
                                           ;	.line	218; stepperCon.c	ADCON0bits.CHS = 0b0000 ;           // Set capture to RA0
001734   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
001736   0b83     andlw   0x83             	ANDLW	0x83
001738   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
00173a   010f     movlb   0xf              	BANKSEL	_adc_cap
                                           ;	.line	219; stepperCon.c	adc_cap = CAPTURE_A ;
00173c   6b2d     clrf    0x2d, 0x1        	CLRF	_adc_cap, B
00173e   d018     bra     0x001770         	BRA	_00114_DS_
                                           _00113_DS_:
                                           ;	.line	222; stepperCon.c	a_adc = (ADRESH << 8) + ADRESL ;   
001740   cfc4     movff   0xfc4, 0x000     	MOVFF	_ADRESH, r0x00
001742   f000
001744   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001746   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001748   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00174a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00174c   cfc3     movff   0xfc3, 0x000     	MOVFF	_ADRESL, r0x00
00174e   f000
001750   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001752   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001754   2402     addwf   0x02, 0x0, 0x0   	ADDWF	r0x02, W
001756   010f     movlb   0xf              	BANKSEL	_a_adc
001758   6f20     movwf   0x20, 0x1        	MOVWF	_a_adc, B
00175a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00175c   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00175e   010f     movlb   0xf              	BANKSEL	(_a_adc + 1)
001760   6f21     movwf   0x21, 0x1        	MOVWF	(_a_adc + 1), B
                                           ;	.line	223; stepperCon.c	ADCON0bits.CHS = 0b0001 ;           // Set capture to RA1
001762   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
001764   0b83     andlw   0x83             	ANDLW	0x83
001766   0904     iorlw   0x04             	IORLW	0x04
001768   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
                                           ;	.line	224; stepperCon.c	adc_cap = CAPTURE_B ;
00176a   0e01     movlw   0x01             	MOVLW	0x01
00176c   010f     movlb   0xf              	BANKSEL	_adc_cap
00176e   6f2d     movwf   0x2d, 0x1        	MOVWF	_adc_cap, B
                                           _00114_DS_:
                                           ;	.line	227; stepperCon.c	ADCON0bits.GO = 1 ;                     // Start next capture
001770   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           ;	.line	228; stepperCon.c	PIR1bits.ADIF = 0 ;                     // Clear ADC interrupt
001772   9c9e     bcf     0x9e, 0x6, 0x0   	BCF	_PIR1bits, 6
                                           _00117_DS_:
                                           ;	.line	230; stepperCon.c	}
001774   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001776   f003
001778   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00177a   f002
00177c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00177e   f001
001780   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001782   f000
001784   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001786   ffd9
001788   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
00178a   fffb
00178c   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
00178e   fffa
001790   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
001792   ffea
001794   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
001796   ffe9
001798   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
00179a   fff4
00179c   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
00179e   fff3
0017a0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0017a2   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0017a4   ffe0
0017a6   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0017a8   ffd8
0017aa   0010     retfie  0x0              	RETFIE	



                                           ; Statistics:
                                           ; code size:	 2912 (0x0b60) bytes ( 2.22%)
                                           ;           	 1456 (0x05b0) words
                                           ; udata size:	  166 (0x00a6) bytes ( 4.51%)
                                           ; access size:	   11 (0x000b) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.1 #10385 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_ioSetup
                                           	global	_pwmSetup
                                           	global	_intSetup
                                           	global	_adc_setup
                                           	global	_resetCheck

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_sc_setup__resetCheck	code
                                           _resetCheck:
                                           ;	.line	140; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void resetCheck(void) {
001bb0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001bb2   ffe5
001bb4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001bb6   ffd9
001bb8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001bba   ffe5
001bbc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001bbe   ffe5
                                           ;	.line	144; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(!RCONbits.TO || !RCONbits.PD || !RCONbits.BOR) {
001bc0   a6d0     btfss   0xd0, 0x3, 0x0   	BTFSS	_RCONbits, 3
001bc2   d004     bra     0x001bcc         	BRA	_00128_DS_
001bc4   a4d0     btfss   0xd0, 0x2, 0x0   	BTFSS	_RCONbits, 2
001bc6   d002     bra     0x001bcc         	BRA	_00128_DS_
001bc8   b0d0     btfsc   0xd0, 0x0, 0x0   	BTFSC	_RCONbits, 0
001bca   d007     bra     0x001bda         	BRA	_00129_DS_
                                           _00128_DS_:
                                           ;	.line	146; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.TO = 1 ;
001bcc   86d0     bsf     0xd0, 0x3, 0x0   	BSF	_RCONbits, 3
                                           ;	.line	147; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.PD = 1 ;
001bce   84d0     bsf     0xd0, 0x2, 0x0   	BSF	_RCONbits, 2
                                           ;	.line	148; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.BOR = 0 ;
001bd0   90d0     bcf     0xd0, 0x0, 0x0   	BCF	_RCONbits, 0
                                           ;	.line	149; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.POR = 0 ;
001bd2   92d0     bcf     0xd0, 0x1, 0x0   	BCF	_RCONbits, 1
                                           ;	.line	151; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
001bd4   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
001bd6   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           _00126_DS_:
                                           ;	.line	154; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(1) ; 
001bd8   d7ff     bra     0x001bd8         	BRA	_00126_DS_
                                           _00129_DS_:
                                           ;	.line	158; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(STKPTRbits.STKFUL || STKPTRbits.STKUNF) {
001bda   befc     btfsc   0xfc, 0x7, 0x0   	BTFSC	_STKPTRbits, 7
001bdc   d002     bra     0x001be2         	BRA	_00140_DS_
001bde   acfc     btfss   0xfc, 0x6, 0x0   	BTFSS	_STKPTRbits, 6
001be0   d031     bra     0x001c44         	BRA	_00143_DS_
                                           _00140_DS_:
                                           ;	.line	160; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKFUL = 0 ;
001be2   9efc     bcf     0xfc, 0x7, 0x0   	BCF	_STKPTRbits, 7
                                           ;	.line	161; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKUNF = 0 ;
001be4   9cfc     bcf     0xfc, 0x6, 0x0   	BCF	_STKPTRbits, 6
                                           ;	.line	163; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
001be6   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	164; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
001be8   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           ;	.line	167; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1CS = 0 ;      // Timer1 to Fosc/4
001bea   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
001bec   0b3f     andlw   0x3f             	ANDLW	0x3f
001bee   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	168; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
001bf0   0e78     movlw   0x78             	MOVLW	0x78
001bf2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00138_DS_:
                                           ;	.line	171; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 0 ;
001bf4   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	172; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR1bits.TMR1IF = 0 ;
001bf6   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	173; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.T1CKPS = 3 ;      // Timer1 1:8 prescale
001bf8   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
001bfa   0bcf     andlw   0xcf             	ANDLW	0xcf
001bfc   0930     iorlw   0x30             	IORLW	0x30
001bfe   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	174; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1H = TMR_10MS >> 8 ;
001c00   0eb1     movlw   0xb1             	MOVLW	0xb1
001c02   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	175; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1L = TMR_10MS ;
001c04   0edf     movlw   0xdf             	MOVLW	0xdf
001c06   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	176; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 1 ;
001c08   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00132_DS_:
                                           ;	.line	178; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(!PIR1bits.TMR1IF) ;
001c0a   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
001c0c   d7fe     bra     0x001c0a         	BRA	_00132_DS_
                                           ;	.line	180; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if (--i == 0) {
001c0e   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
001c10   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c12   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
001c14   f000
001c16   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c18   e1ed     bnz     0x001bf4         	BNZ	_00138_DS_
                                           ;	.line	181; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC5 = !LATCbits.LATC5 ;
001c1a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c1c   ba8b     btfsc   0x8b, 0x5, 0x0   	BTFSC	_LATCbits, 5
001c1e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001c20   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c22   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001c24   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001c26   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001c28   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c2a   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
001c2c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c2e   0b01     andlw   0x01             	ANDLW	0x01
001c30   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
001c32   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001c34   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001c36   508b     movf    0x8b, 0x0, 0x0   	MOVF	_LATCbits, W
001c38   0bdf     andlw   0xdf             	ANDLW	0xdf
001c3a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
001c3c   6e8b     movwf   0x8b, 0x0        	MOVWF	_LATCbits
                                           ;	.line	182; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
001c3e   0e78     movlw   0x78             	MOVLW	0x78
001c40   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c42   d7d8     bra     0x001bf4         	BRA	_00138_DS_
                                           _00143_DS_:
                                           ;	.line	186; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
001c44   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001c46   f001
001c48   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001c4a   f000
001c4c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001c4e   ffd9
001c50   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__adc_setup	code
                                           _adc_setup:
                                           ;	.line	119; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void adc_setup(void) {
002062   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002064   ffe5
002066   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002068   ffd9
                                           ;	.line	120; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON0bits.ADON = 0 ;      // ADC Off
00206a   90c2     bcf     0xc2, 0x0, 0x0   	BCF	_ADCON0bits, 0
                                           ;	.line	122; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON2bits.ADCS = 0b110 ;  // ADC clock = Fosc/64 = 1us
00206c   50c0     movf    0xc0, 0x0, 0x0   	MOVF	_ADCON2bits, W
00206e   0bf8     andlw   0xf8             	ANDLW	0xf8
002070   0906     iorlw   0x06             	IORLW	0x06
002072   6ec0     movwf   0xc0, 0x0        	MOVWF	_ADCON2bits
                                           ;	.line	123; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON2bits.ADFM = 1 ; 
002074   8ec0     bsf     0xc0, 0x7, 0x0   	BSF	_ADCON2bits, 7
                                           ;	.line	125; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON1bits.PVCFG = 0b00 ;  // Pos. Ref. voltage = AVdd
002076   50c1     movf    0xc1, 0x0, 0x0   	MOVF	_ADCON1bits, W
002078   0bf3     andlw   0xf3             	ANDLW	0xf3
00207a   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1bits
                                           ;	.line	126; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON1bits.NVCFG = 0b00 ;  // Nrg. Ref. voltage = AVss
00207c   50c1     movf    0xc1, 0x0, 0x0   	MOVF	_ADCON1bits, W
00207e   0bfc     andlw   0xfc             	ANDLW	0xfc
002080   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1bits
002082   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	128; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA0 = 1 ;     // Enable RA0 as analog input
002084   8138     bsf     0x38, 0x0, 0x1   	BSF	_ANSELAbits, 0, B
                                           ;	.line	129; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA0 = 1 ;
002086   8092     bsf     0x92, 0x0, 0x0   	BSF	_TRISAbits, 0
002088   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	131; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA1 = 1 ;     // Enable RA1 as analog input
00208a   8338     bsf     0x38, 0x1, 0x1   	BSF	_ANSELAbits, 1, B
                                           ;	.line	132; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA1 = 1 ;
00208c   8292     bsf     0x92, 0x1, 0x0   	BSF	_TRISAbits, 1
                                           ;	.line	134; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR1bits.ADIF = 0 ;        // Reset ADC interrupt 
00208e   9c9e     bcf     0x9e, 0x6, 0x0   	BCF	_PIR1bits, 6
                                           ;	.line	135; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIE1bits.ADIE = 1 ;        // Enable ADC interrupt
002090   8c9d     bsf     0x9d, 0x6, 0x0   	BSF	_PIE1bits, 6
                                           ;	.line	137; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON0bits.ADON = 1 ;      // ADC On
002092   80c2     bsf     0xc2, 0x0, 0x0   	BSF	_ADCON0bits, 0
                                           ;	.line	138; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002094   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002096   ffd9
002098   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__intSetup	code
                                           _intSetup:
                                           ;	.line	98; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void intSetup(void) {
00214c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00214e   ffe5
002150   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002152   ffd9
                                           ;	.line	99; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 0 ;   // Disable interrupts
002154   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	100; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 0 ;
002156   9cf2     bcf     0xf2, 0x6, 0x0   	BCF	_INTCONbits, 6
                                           ;	.line	102; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.IPEN = 1 ;         // Enable interrupts priority
002158   8ed0     bsf     0xd0, 0x7, 0x0   	BSF	_RCONbits, 7
                                           ;	.line	104; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.RBPU = 1 ;      // Disable Port B pull-ups
00215a   8ef1     bsf     0xf1, 0x7, 0x0   	BSF	_INTCON2bits, 7
                                           ;	.line	105; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.INTEDG0 = 1 ;   // 'step' interrupt on rising edge
00215c   8cf1     bsf     0xf1, 0x6, 0x0   	BSF	_INTCON2bits, 6
                                           ;	.line	107; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON3bits.INT2IP = 1 ;    // High priority to 'dir' interrupt
00215e   8ef0     bsf     0xf0, 0x7, 0x0   	BSF	_INTCON3bits, 7
                                           ;	.line	109; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.ADIP = 1 ;         // ADC High priority interrupt
002160   8c9f     bsf     0x9f, 0x6, 0x0   	BSF	_IPR1bits, 6
                                           ;	.line	111; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.SSP1IP = 0 ;       // Low priority to I2C interrupt
002162   969f     bcf     0x9f, 0x3, 0x0   	BCF	_IPR1bits, 3
                                           ;	.line	114; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 1 ;   // Enable interrupts
002164   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	115; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 1 ;
002166   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
                                           ;	.line	116; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002168   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00216a   ffd9
00216c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__pwmSetup	code
                                           _pwmSetup:
                                           ;	.line	58; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void pwmSetup(void) {
001cf4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001cf6   ffe5
001cf8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001cfa   ffd9
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC0 = 1 ;          // Disable port drivers for setup
001cfc   8094     bsf     0x94, 0x0, 0x0   	BSF	_TRISCbits, 0
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC1 = 1 ;
001cfe   8294     bsf     0x94, 0x1, 0x0   	BSF	_TRISCbits, 1
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC2 = 1 ;
001d00   8494     bsf     0x94, 0x2, 0x0   	BSF	_TRISCbits, 2
                                           ;	.line	62; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD5 = 1 ;
001d02   8a95     bsf     0x95, 0x5, 0x0   	BSF	_TRISDbits, 5
001d04   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	64; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C2TSEL = 0b00 ;    // Timer2 to ECCP2
001d06   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
001d08   0be7     andlw   0xe7             	ANDLW	0xe7
001d0a   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
001d0c   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
001d0e   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C1TSEL = 0b00 ;    // Timer2 to ECCP1      
001d10   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
001d12   0bfc     andlw   0xfc             	ANDLW	0xfc
001d14   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
001d16   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PR2 = 0xff ;                    // Set timer for 62.5kHz @64MHz, 10-bit res
001d18   0eff     movlw   0xff             	MOVLW	0xff
001d1a   6ebb     movwf   0xbb, 0x0        	MOVWF	_PR2
                                           ;	.line	67; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.T2CKPS = 0x0 ;        // Set prescaler to 1:1
001d1c   50ba     movf    0xba, 0x0, 0x0   	MOVF	_T2CONbits, W
001d1e   0bfc     andlw   0xfc             	ANDLW	0xfc
001d20   6eba     movwf   0xba, 0x0        	MOVWF	_T2CONbits
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.TMR2ON = 1 ;          // Turn timer on
001d22   84ba     bsf     0xba, 0x2, 0x0   	BSF	_T2CONbits, 2
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.PSS2AC = 0b00  ;    // Pin A1 set to '0' at shutdown
001d24   5064     movf    0x64, 0x0, 0x0   	MOVF	_ECCP2ASbits, W
001d26   0bf3     andlw   0xf3             	ANDLW	0xf3
001d28   6e64     movwf   0x64, 0x0        	MOVWF	_ECCP2ASbits
                                           ;	.line	71; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.PSS2BD = 0b00  ;    // Pin A2 set to '0' at shutdown
001d2a   5064     movf    0x64, 0x0, 0x0   	MOVF	_ECCP2ASbits, W
001d2c   0bfc     andlw   0xfc             	ANDLW	0xfc
001d2e   6e64     movwf   0x64, 0x0        	MOVWF	_ECCP2ASbits
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.PSS1AC = 0b00  ;    // Pin B1 set to '0' at shutdown
001d30   50b6     movf    0xb6, 0x0, 0x0   	MOVF	_ECCP1ASbits, W
001d32   0bf3     andlw   0xf3             	ANDLW	0xf3
001d34   6eb6     movwf   0xb6, 0x0        	MOVWF	_ECCP1ASbits
                                           ;	.line	73; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.PSS1BD = 0b00  ;    // Pin B2 set to '0' at shutdown
001d36   50b6     movf    0xb6, 0x0, 0x0   	MOVF	_ECCP1ASbits, W
001d38   0bfc     andlw   0xfc             	ANDLW	0xfc
001d3a   6eb6     movwf   0xb6, 0x0        	MOVWF	_ECCP1ASbits
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.CCP2AS = 0x00  ;    // Disable auto-shutdown
001d3c   5064     movf    0x64, 0x0, 0x0   	MOVF	_ECCP2ASbits, W
001d3e   0b8f     andlw   0x8f             	ANDLW	0x8f
001d40   6e64     movwf   0x64, 0x0        	MOVWF	_ECCP2ASbits
                                           ;	.line	76; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.CCP1AS = 0x00  ;    
001d42   50b6     movf    0xb6, 0x0, 0x0   	MOVF	_ECCP1ASbits, W
001d44   0b8f     andlw   0x8f             	ANDLW	0x8f
001d46   6eb6     movwf   0xb6, 0x0        	MOVWF	_ECCP1ASbits
                                           ;	.line	78; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.CCP2ASE = 1    ;    // Force shutdown
001d48   8e64     bsf     0x64, 0x7, 0x0   	BSF	_ECCP2ASbits, 7
                                           ;	.line	79; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.CCP1ASE = 1    ;    
001d4a   8eb6     bsf     0xb6, 0x7, 0x0   	BSF	_ECCP1ASbits, 7
                                           ;	.line	81; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.CCP2M = 0b1100 ;    // Phase A Half-bridge mode
001d4c   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
001d4e   0bf0     andlw   0xf0             	ANDLW	0xf0
001d50   090c     iorlw   0x0c             	IORLW	0x0c
001d52   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	82; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.P2M = 0b10 ;
001d54   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
001d56   0b3f     andlw   0x3f             	ANDLW	0x3f
001d58   0980     iorlw   0x80             	IORLW	0x80
001d5a   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	83; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.CCP1M = 0b1100 ;    // Phase B Half-bridge mode
001d5c   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
001d5e   0bf0     andlw   0xf0             	ANDLW	0xf0
001d60   090c     iorlw   0x0c             	IORLW	0x0c
001d62   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	84; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.P1M = 0b10 ;
001d64   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
001d66   0b3f     andlw   0x3f             	ANDLW	0x3f
001d68   0980     iorlw   0x80             	IORLW	0x80
001d6a   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	86; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PWM2CONbits.P2DC = 16 ;             // 16 * 4 * Tosc = 1us dead-band
001d6c   5065     movf    0x65, 0x0, 0x0   	MOVF	_PWM2CONbits, W
001d6e   0b80     andlw   0x80             	ANDLW	0x80
001d70   0910     iorlw   0x10             	IORLW	0x10
001d72   6e65     movwf   0x65, 0x0        	MOVWF	_PWM2CONbits
                                           ;	.line	87; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PWM1CONbits.P1DC = 16 ; 
001d74   50b7     movf    0xb7, 0x0, 0x0   	MOVF	_PWM1CONbits, W
001d76   0b80     andlw   0x80             	ANDLW	0x80
001d78   0910     iorlw   0x10             	IORLW	0x10
001d7a   6eb7     movwf   0xb7, 0x0        	MOVWF	_PWM1CONbits
                                           ;	.line	89; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC0 = 0 ;          // Enable port drivers
001d7c   9094     bcf     0x94, 0x0, 0x0   	BCF	_TRISCbits, 0
                                           ;	.line	90; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC1 = 0 ;
001d7e   9294     bcf     0x94, 0x1, 0x0   	BCF	_TRISCbits, 1
                                           ;	.line	91; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC2 = 0 ;
001d80   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
                                           ;	.line	92; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD5 = 0 ;
001d82   9a95     bcf     0x95, 0x5, 0x0   	BCF	_TRISDbits, 5
                                           ;	.line	94; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.CCP2ASE = 0    ;    // Enable PWM
001d84   9e64     bcf     0x64, 0x7, 0x0   	BCF	_ECCP2ASbits, 7
                                           ;	.line	95; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.CCP1ASE = 0    ;    
001d86   9eb6     bcf     0xb6, 0x7, 0x0   	BCF	_ECCP1ASbits, 7
                                           ;	.line	96; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
001d88   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d8a   ffd9
001d8c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__ioSetup	code
                                           _ioSetup:
                                           ;	.line	31; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void ioSetup(void) {
00209a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00209c   ffe5
00209e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0020a0   ffd9
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB4 = 0 ;     // Start with a cleared 'fault' signal
0020a2   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	33; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 0 ;
0020a4   9881     bcf     0x81, 0x4, 0x0   	BCF	_PORTBbits, 4
0020a6   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD2 = 0 ;
0020a8   953b     bcf     0x3b, 0x2, 0x1   	BCF	_ANSELDbits, 2, B
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.RD2 = 0 ;     // Start with blue LED off
0020aa   9495     bcf     0x95, 0x2, 0x0   	BCF	_TRISDbits, 2
                                           ;	.line	37; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTDbits.RD2 = 0 ;
0020ac   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
0020ae   010f     movlb   0xf              	BANKSEL	_ANSELC
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELC = 0x00 ;         // Disable Port-C as analog input
0020b0   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC5 = 0 ;     // Start with red LED off
0020b2   9a94     bcf     0x94, 0x5, 0x0   	BCF	_TRISCbits, 5
                                           ;	.line	42; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 0 ;
0020b4   9a82     bcf     0x82, 0x5, 0x0   	BCF	_PORTCbits, 5
                                           ;	.line	44; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA4 = 0 ;
0020b6   9892     bcf     0x92, 0x4, 0x0   	BCF	_TRISAbits, 4
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA4 = 0 ;
0020b8   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
0020ba   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	47; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA5 = 0 ;
0020bc   9b38     bcf     0x38, 0x5, 0x1   	BCF	_ANSELAbits, 5, B
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA5 = 0 ;
0020be   9a92     bcf     0x92, 0x5, 0x0   	BCF	_TRISAbits, 5
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA5 = 0 ;
0020c0   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
0020c2   010f     movlb   0xf              	BANKSEL	_ANSELB
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELB = 0x00 ;         // Disable port B analog input
0020c4   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB0 = 1 ;     // 'step', 'dir' and 'enable' as inputs
0020c6   8093     bsf     0x93, 0x0, 0x0   	BSF	_TRISBbits, 0
                                           ;	.line	54; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB2 = 1 ;
0020c8   8493     bsf     0x93, 0x2, 0x0   	BSF	_TRISBbits, 2
                                           ;	.line	55; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB3 = 1 ;
0020ca   8693     bsf     0x93, 0x3, 0x0   	BSF	_TRISBbits, 3
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
0020cc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0020ce   ffd9
0020d0   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  462 (0x01ce) bytes ( 0.35%)
                                           ;           	  231 (0x00e7) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.1 #10385 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_read_regs
                                           	global	_store_regs

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_registers__store_regs	code
                                           _store_regs:
                                           ;	.line	43; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void store_regs(uint8_t * i2c_regs, uint8_t num_regs) {
001994   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001996   ffe5
001998   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00199a   ffd9
00199c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00199e   ffe5
0019a0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0019a2   ffe5
0019a4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0019a6   ffe5
0019a8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0019aa   ffe5
0019ac   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0019ae   ffe5
0019b0   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0019b2   ffe5
0019b4   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0019b6   ffe5
0019b8   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0019ba   ffe5
0019bc   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0019be   ffe5
0019c0   0e02     movlw   0x02             	MOVLW	0x02
0019c2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0019c4   f000
0019c6   0e03     movlw   0x03             	MOVLW	0x03
0019c8   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0019ca   f001
0019cc   0e04     movlw   0x04             	MOVLW	0x04
0019ce   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0019d0   f002
0019d2   0e05     movlw   0x05             	MOVLW	0x05
0019d4   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0019d6   f003
                                           ;	.line	46; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
0019d8   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
0019da   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00129_DS_:
0019dc   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0019de   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
0019e0   e22a     bc      0x001a36         	BC	_00131_DS_
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ; 
0019e2   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
0019e4   ffa9
                                           ;	.line	50; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
0019e6   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
0019e8   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	52; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
0019ea   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	val = EEDATA ;
0019ec   cfa8     movff   0xfa8, 0x005     	MOVFF	_EEDATA, r0x05
0019ee   f005
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	if (val != i2c_regs[i]) {
0019f0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019f2   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0019f4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0019f6   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0019f8   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0019fa   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0019fc   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0019fe   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001a00   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001a02   c006     movff   0x006, 0xfe9     	MOVFF	r0x06, FSR0L
001a04   ffe9
001a06   c007     movff   0x007, 0xff3     	MOVFF	r0x07, PRODL
001a08   fff3
001a0a   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001a0c   ecb7     call    0x00216e, 0x0    	CALL	__gptrget1
001a0e   f010
001a10   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001a12   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001a14   1806     xorwf   0x06, 0x0, 0x0   	XORWF	r0x06, W
001a16   e00d     bz      0x001a32         	BZ	_00130_DS_
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEDATA = i2c_regs[i] ;      // Prepare data
001a18   c006     movff   0x006, 0xfa8     	MOVFF	r0x06, _EEDATA
001a1a   ffa8
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001a1c   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001a1e   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 1 ;       // Allow write cycle
001a20   84a6     bsf     0xa6, 0x2, 0x0   	BSF	_EECON1bits, 2
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 0 ;        // Disable interrupts
001a22   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0x55 ;             // "magic" sequence for write
001a24   0e55     movlw   0x55             	MOVLW	0x55
001a26   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0xaa ;
001a28   0eaa     movlw   0xaa             	MOVLW	0xaa
001a2a   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WR = 1 ;         // Initiate write
001a2c   82a6     bsf     0xa6, 0x1, 0x0   	BSF	_EECON1bits, 1
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 1 ;        // Enable interrupts
001a2e   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 0 ;       // Prevent write cycle
001a30   94a6     bcf     0xa6, 0x2, 0x0   	BCF	_EECON1bits, 2
                                           _00130_DS_:
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001a32   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
001a34   d7d3     bra     0x0019dc         	BRA	_00129_DS_
                                           _00131_DS_:
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
001a36   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
001a38   f008
001a3a   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001a3c   f007
001a3e   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001a40   f006
001a42   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001a44   f005
001a46   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001a48   f004
001a4a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001a4c   f003
001a4e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001a50   f002
001a52   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001a54   f001
001a56   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001a58   f000
001a5a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001a5c   ffd9
001a5e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_registers__read_regs	code
                                           _read_regs:
                                           ;	.line	29; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void read_regs(uint8_t * i2c_regs, uint8_t num_regs) {
001c52   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001c54   ffe5
001c56   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c58   ffd9
001c5a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001c5c   ffe5
001c5e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001c60   ffe5
001c62   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001c64   ffe5
001c66   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001c68   ffe5
001c6a   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001c6c   ffe5
001c6e   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001c70   ffe5
001c72   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001c74   ffe5
001c76   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001c78   ffe5
001c7a   0e02     movlw   0x02             	MOVLW	0x02
001c7c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001c7e   f000
001c80   0e03     movlw   0x03             	MOVLW	0x03
001c82   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001c84   f001
001c86   0e04     movlw   0x04             	MOVLW	0x04
001c88   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001c8a   f002
001c8c   0e05     movlw   0x05             	MOVLW	0x05
001c8e   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
001c90   f003
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
001c92   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001c94   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00107_DS_:
001c96   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001c98   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
001c9a   e219     bc      0x001cce         	BC	_00109_DS_
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ;              // Read I2C address from 00 location
001c9c   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
001c9e   ffa9
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001ca0   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	37; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001ca2   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
001ca4   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	i2c_regs[i] = EEDATA ;
001ca6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ca8   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001caa   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001cac   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001cae   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001cb0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001cb2   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001cb4   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001cb6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001cb8   cfa8     movff   0xfa8, 0xfe5     	MOVFF	_EEDATA, POSTDEC1
001cba   ffe5
001cbc   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
001cbe   ffe9
001cc0   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
001cc2   fff3
001cc4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001cc6   ece5     call    0x0021ca, 0x0    	CALL	__gptrput1
001cc8   f010
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001cca   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
001ccc   d7e4     bra     0x001c96         	BRA	_00107_DS_
                                           _00109_DS_:
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
001cce   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001cd0   f007
001cd2   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001cd4   f006
001cd6   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001cd8   f005
001cda   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001cdc   f004
001cde   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001ce0   f003
001ce2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001ce4   f002
001ce6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001ce8   f001
001cea   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001cec   f000
001cee   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001cf0   ffd9
001cf2   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  366 (0x016e) bytes ( 0.28%)
                                           ;           	  183 (0x00b7) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    9 (0x0009) bytes


                                           	end
