gplink-1.5.2 #1313 (Aug 28 2018)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 15/09/18  00:18:21


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.2 #10526 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec
                                           	CONFIG	FOSC=HSHP
                                           	CONFIG	PLLCFG=ON
                                           	CONFIG	WDTEN=SWON
                                           	CONFIG	XINST=OFF
                                           	CONFIG	CCP3MX=PORTB5
                                           	CONFIG	P2BMX=PORTC0
                                           	CONFIG	MCLRE=EXTMCLR


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_zero_cross
                                           	global	_min_current
                                           	global	_max_current
                                           	global	_state
                                           	global	_micro_steps
                                           	global	_set_amp
                                           	global	_max_amp
                                           	global	_t_blank
                                           	global	_pid_kp
                                           	global	_pid_ki
                                           	global	_dir
                                           	global	_skip
                                           	global	_fault
                                           	global	_pwm_lu
                                           	global	_i2c_address
                                           	global	_i2c_counter
                                           	global	_i2c_reg_addr
                                           	global	_i2c_regs
                                           	global	_i2c_dirty
                                           	global	_i2c_buf
                                           	global	_adc_wdt
                                           	global	_i2cSetup
                                           	global	_activeInts
                                           	global	_idleInts
                                           	global	_stop
                                           	global	_prep_pwm_lu
                                           	global	_set_fault
                                           	global	_set_op_vars
                                           	global	_delay_ms
                                           	global	_main
                                           	global	___EEPROM

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__moduchar
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	__max_out
                                           	extern	__min_out
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_set_max_out
                                           	extern	_set_min_out
                                           	extern	_init_result
                                           	extern	_calc_pi
                                           	extern	_read_regs
                                           	extern	_store_regs
                                           	extern	_ioSetup
                                           	extern	_pwmSetup
                                           	extern	_compsSetup
                                           	extern	_intSetup
                                           	extern	_adc_setup
                                           	extern	_resetCheck
                                           	extern	___uint2fs
                                           	extern	___fsdiv
                                           	extern	___sint2fs
                                           	extern	___fsmul
                                           	extern	___fsadd
                                           	extern	___fs2uint
                                           	extern	__mulint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           _pwm_base	db	0x00, 0x00, 0x32, 0x00, 0x64, 0x00, 0x95, 0x00, 0xc4, 0x00, 0xf1, 0x00
                                           	db	0x1c, 0x01, 0x45, 0x01, 0x6a, 0x01, 0x8c, 0x01, 0xaa, 0x01, 0xc4, 0x01
                                           	db	0xd9, 0x01, 0xea, 0x01, 0xf6, 0x01, 0xfe, 0x01, 0x00, 0x02, 0xfe, 0x01
                                           	db	0xf6, 0x01, 0xea, 0x01, 0xd9, 0x01, 0xc4, 0x01, 0xaa, 0x01, 0x8c, 0x01
                                           	db	0x6a, 0x01, 0x45, 0x01, 0x1c, 0x01, 0xf1, 0x00, 0xc4, 0x00, 0x95, 0x00
                                           	db	0x64, 0x00, 0x32, 0x00, 0x00, 0x00, 0xce, 0xff, 0x9c, 0xff, 0x6b, 0xff
                                           	db	0x3c, 0xff, 0x0f, 0xff, 0xe4, 0xfe, 0xbb, 0xfe, 0x96, 0xfe, 0x74, 0xfe
                                           	db	0x56, 0xfe, 0x3b, 0xfe, 0x27, 0xfe, 0x16, 0xfe, 0x0a, 0xfe, 0x02, 0xfe
                                           	db	0x00, 0xfe, 0x02, 0xfe, 0x0a, 0xfe, 0x16, 0xfe, 0x27, 0xfe, 0x3c, 0xfe
                                           	db	0x56, 0xfe, 0x74, 0xfe, 0x96, 0xfe, 0xbb, 0xfe, 0xe4, 0xfe, 0x0f, 0xff
                                           	db	0x3c, 0xff, 0x6b, 0xff, 0x9c, 0xff, 0xce, 0xff


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1

                                           udata_stepperCon_0	udata
                                           _max_current	res	2

                                           udata_stepperCon_1	udata
                                           _min_current	res	2

                                           udata_stepperCon_2	udata
                                           _zero_cross	res	2

                                           udata_stepperCon_3	udata
                                           _adc_wdt	res	2

                                           udata_stepperCon_4	udata
                                           _state	res	1

                                           udata_stepperCon_5	udata
                                           _dir	res	1

                                           udata_stepperCon_6	udata
                                           _skip	res	1

                                           udata_stepperCon_7	udata
                                           _micro_steps	res	1

                                           udata_stepperCon_8	udata
                                           _i2c_buf	res	1

                                           udata_stepperCon_9	udata
                                           _i2c_counter	res	1

                                           udata_stepperCon_10	udata
                                           _i2c_reg_addr	res	1

                                           udata_stepperCon_11	udata
                                           _i2c_regs	res	11

                                           udata_stepperCon_12	udata
                                           _i2c_dirty	res	1

                                           udata_stepperCon_13	udata
                                           _i2c_address	res	1

                                           udata_stepperCon_14	udata
                                           _set_amp	res	2

                                           udata_stepperCon_15	udata
                                           _max_amp	res	2

                                           udata_stepperCon_16	udata
                                           _pwm_lu	res	128

                                           udata_stepperCon_17	udata
                                           _fault	res	1

                                           udata_stepperCon_18	udata
                                           _t_blank	res	1

                                           udata_stepperCon_19	udata
                                           _pid_kp	res	2

                                           udata_stepperCon_20	udata
                                           _pid_ki	res	2

                                           udata_stepperCon_21	udata
                                           _main_pi_result_a_65536_102	res	8

                                           udata_stepperCon_22	udata
                                           _main_pi_result_b_65536_102	res	8

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x1_highInt	code	0X000008
                                           ivec_0x1_highInt:
000008   ef62     goto    0x0020c4         	GOTO	_highInt
00000a   f010

                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x2_lowInt	code	0X000018
                                           ivec_0x2_lowInt:
000018   ef35     goto    0x001c6a         	GOTO	_lowInt
00001a   f00e

                                           ; ; Starting pCode block for absolute Ival
                                           S_stepperCon____EEPROM	code	0XF00000
                                           ___EEPROM:
                                           	DB	0x44, 0x01, 0xb0, 0x04, 0x3c, 0x07, 0x18, 0x14, 0x00, 0x32, 0x00






                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stepperCon__main	code
                                           _main:
                                           ;	.line	414; stepperCon.c	int16_t pwm_a = 0, pwm_b = 0 ;
00001c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
00001e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000020   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000022   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           ;	.line	421; stepperCon.c	int16_t step_a = 0 ;                         // Current phase A step
000024   6a04     clrf    0x04, 0x0        	CLRF	r0x04
000026   6a05     clrf    0x05, 0x0        	CLRF	r0x05
                                           ;	.line	422; stepperCon.c	int16_t step_b = 0 ;                         // Current phase B step
000028   6a06     clrf    0x06, 0x0        	CLRF	r0x06
00002a   6a07     clrf    0x07, 0x0        	CLRF	r0x07
                                           ;	.line	424; stepperCon.c	ioSetup() ;                 // Setup IO ports
00002c   eca7     call    0x002b4e, 0x0    	CALL	_ioSetup
00002e   f015
                                           ;	.line	427; stepperCon.c	if(RCONbits.POR) resetCheck() ;
000030   a2d0     btfss   0xd0, 0x1, 0x0   	BTFSS	_RCONbits, 1
000032   d002     bra     0x000038         	BRA	_00320_DS_
000034   ec49     call    0x002492, 0x0    	CALL	_resetCheck
000036   f012
                                           _00320_DS_:
                                           ;	.line	431; stepperCon.c	RCONbits.POR = 1 ;
000038   82d0     bsf     0xd0, 0x1, 0x0   	BSF	_RCONbits, 1
                                           ;	.line	432; stepperCon.c	RCONbits.BOR = 1 ;
00003a   80d0     bsf     0xd0, 0x0, 0x0   	BSF	_RCONbits, 0
                                           ;	.line	434; stepperCon.c	read_regs(i2c_regs, sizeof(i2c_regs)) ;  // Populate I2C registers from EEPROM
00003c   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
00003e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000040   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
000042   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000044   0e80     movlw   0x80             	MOVLW	0x80
000046   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000048   0e0b     movlw   0x0b             	MOVLW	0x0b
00004a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00004c   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00004e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000050   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000052   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000054   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000056   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000058   ec9a     call    0x002534, 0x0    	CALL	_read_regs
00005a   f012
00005c   0e04     movlw   0x04             	MOVLW	0x04
00005e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	435; stepperCon.c	set_op_vars() ;             // Set operation variables from I2C registers
000060   ec2e     call    0x00225c, 0x0    	CALL	_set_op_vars
000062   f011
000064   0102     movlb   0x2              	BANKSEL	_i2c_dirty
                                           ;	.line	436; stepperCon.c	i2c_dirty = 0 ;             // Clear I2C dirty flag
000066   6b9b     clrf    0x9b, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	438; stepperCon.c	i2cSetup() ;                // Setup I2C I/F
000068   ec25     call    0x002c4a, 0x0    	CALL	_i2cSetup
00006a   f016
                                           ;	.line	439; stepperCon.c	intSetup() ;                // Interrupts setup
00006c   ec39     call    0x002c72, 0x0    	CALL	_intSetup
00006e   f016
                                           ;	.line	440; stepperCon.c	compsSetup() ;
000070   ecc5     call    0x002b8a, 0x0    	CALL	_compsSetup
000072   f015
                                           ;	.line	441; stepperCon.c	adc_setup() ;
000074   ec86     call    0x002b0c, 0x0    	CALL	_adc_setup
000076   f015
                                           ;	.line	442; stepperCon.c	idleInts() ;                // Set interrupts to 'idle' state
000078   ec5f     call    0x002cbe, 0x0    	CALL	_idleInts
00007a   f016
00007c   0102     movlb   0x2              	BANKSEL	_state
                                           ;	.line	445; stepperCon.c	state = IDLE ;              // Start in 'idle' state
00007e   6b94     clrf    0x94, 0x1        	CLRF	_state, B
                                           ;	.line	448; stepperCon.c	PORTDbits.RD2 = 1 ;     // Turn blue LED on
000080   8483     bsf     0x83, 0x2, 0x0   	BSF	_PORTDbits, 2
                                           ;	.line	449; stepperCon.c	delay_ms(300) ;    
000082   0e01     movlw   0x01             	MOVLW	0x01
000084   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000086   0e2c     movlw   0x2c             	MOVLW	0x2c
000088   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00008a   ec81     call    0x002902, 0x0    	CALL	_delay_ms
00008c   f014
00008e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000090   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	450; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
000092   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
                                           ;	.line	452; stepperCon.c	WDTCON = 1 ;        // Enable watchdog timer
000094   0e01     movlw   0x01             	MOVLW	0x01
000096   6ed1     movwf   0xd1, 0x0        	MOVWF	_WDTCON
                                           _00368_DS_:
000098   0004     clrwdt                   	clrwdt	
                                           ;	.line	458; stepperCon.c	switch(state) {
00009a   c294     movff   0x294, 0x008     	MOVFF	_state, r0x08
00009c   f008
00009e   0e07     movlw   0x07             	MOVLW	0x07
0000a0   5c08     subwf   0x08, 0x0, 0x0   	SUBWF	r0x08, W
0000a2   e2fa     bc      0x000098         	BC	_00368_DS_
0000a4   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
0000a6   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
0000a8   3408     rlcf    0x08, 0x0, 0x0   	RLCF	r0x08, W
0000aa   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
0000ac   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
0000ae   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
0000b0   0bfc     andlw   0xfc             	ANDLW	0xfc
0000b2   0fc2     addlw   0xc2             	ADDLW	LOW(_00478_DS_)
0000b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000b6   0e00     movlw   0x00             	MOVLW	HIGH(_00478_DS_)
0000b8   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
0000ba   0e00     movlw   0x00             	MOVLW	UPPER(_00478_DS_)
0000bc   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
0000be   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0000c0   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00478_DS_:
0000c2   efd7     goto    0x0005ae         	GOTO	_00360_DS_
0000c4   f002
0000c6   ef6f     goto    0x0000de         	GOTO	_00321_DS_
0000c8   f000
0000ca   efb6     goto    0x00056c         	GOTO	_00354_DS_
0000cc   f002
0000ce   efe6     goto    0x0003cc         	GOTO	_00346_DS_
0000d0   f001
0000d2   ef4e     goto    0x00049c         	GOTO	_00350_DS_
0000d4   f002
0000d6   ef4c     goto    0x000098         	GOTO	_00368_DS_
0000d8   f000
0000da   ef39     goto    0x000272         	GOTO	_00328_DS_
0000dc   f001
                                           _00321_DS_:
                                           ;	.line	460; stepperCon.c	state = RUNNING ;
0000de   0e02     movlw   0x02             	MOVLW	0x02
0000e0   0102     movlb   0x2              	BANKSEL	_state
0000e2   6f94     movwf   0x94, 0x1        	MOVWF	_state, B
                                           ;	.line	461; stepperCon.c	LATCbits.LATC5 = 0 ;
0000e4   9a8b     bcf     0x8b, 0x5, 0x0   	BCF	_LATCbits, 5
                                           ;	.line	462; stepperCon.c	LATBbits.LATB4 = 0 ;
0000e6   988a     bcf     0x8a, 0x4, 0x0   	BCF	_LATBbits, 4
                                           ;	.line	465; stepperCon.c	LATDbits.LATD2 = 1 ;
0000e8   848c     bsf     0x8c, 0x2, 0x0   	BSF	_LATDbits, 2
0000ea   0102     movlb   0x2              	BANKSEL	_micro_steps
                                           ;	.line	468; stepperCon.c	if (micro_steps == STEP_1) step_a = STEPS / 2 ;
0000ec   5197     movf    0x97, 0x0, 0x1   	MOVF	_micro_steps, W, B
0000ee   0a10     xorlw   0x10             	XORLW	0x10
0000f0   e104     bnz     0x0000fa         	BNZ	_00323_DS_
0000f2   0e08     movlw   0x08             	MOVLW	0x08
0000f4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0000f6   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0000f8   d002     bra     0x0000fe         	BRA	_00324_DS_
                                           _00323_DS_:
                                           ;	.line	469; stepperCon.c	else step_a = 0 ;
0000fa   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0000fc   6a05     clrf    0x05, 0x0        	CLRF	r0x05
                                           _00324_DS_:
                                           ;	.line	472; stepperCon.c	step_b = step_a + STEPS ;
0000fe   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000100   0f10     addlw   0x10             	ADDLW	0x10
000102   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000104   0e00     movlw   0x00             	MOVLW	0x00
000106   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
000108   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
                                           ;	.line	477; stepperCon.c	init_result(&pi_result_a, pid_kp, pid_ki) ;
00010a   0e00     movlw   0x00             	MOVLW	HIGH(_main_pi_result_a_65536_102)
00010c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00010e   0eec     movlw   0xec             	MOVLW	LOW(_main_pi_result_a_65536_102)
000110   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000112   0e80     movlw   0x80             	MOVLW	0x80
000114   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000116   0102     movlb   0x2              	BANKSEL	(_pid_ki + 1)
000118   5187     movf    0x87, 0x0, 0x1   	MOVF	(_pid_ki + 1), W, B
00011a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00011c   0102     movlb   0x2              	BANKSEL	_pid_ki
00011e   5186     movf    0x86, 0x0, 0x1   	MOVF	_pid_ki, W, B
000120   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000122   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
000124   5185     movf    0x85, 0x0, 0x1   	MOVF	(_pid_kp + 1), W, B
000126   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000128   0102     movlb   0x2              	BANKSEL	_pid_kp
00012a   5184     movf    0x84, 0x0, 0x1   	MOVF	_pid_kp, W, B
00012c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00012e   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000130   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000132   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000134   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000136   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000138   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00013a   ec60     call    0x001ec0, 0x0    	CALL	_init_result
00013c   f00f
00013e   0e07     movlw   0x07             	MOVLW	0x07
000140   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	478; stepperCon.c	init_result(&pi_result_b, pid_kp, pid_ki) ;
000142   0e00     movlw   0x00             	MOVLW	HIGH(_main_pi_result_b_65536_102)
000144   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000146   0ef4     movlw   0xf4             	MOVLW	LOW(_main_pi_result_b_65536_102)
000148   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00014a   0e80     movlw   0x80             	MOVLW	0x80
00014c   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00014e   0102     movlb   0x2              	BANKSEL	(_pid_ki + 1)
000150   5187     movf    0x87, 0x0, 0x1   	MOVF	(_pid_ki + 1), W, B
000152   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000154   0102     movlb   0x2              	BANKSEL	_pid_ki
000156   5186     movf    0x86, 0x0, 0x1   	MOVF	_pid_ki, W, B
000158   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00015a   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
00015c   5185     movf    0x85, 0x0, 0x1   	MOVF	(_pid_kp + 1), W, B
00015e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000160   0102     movlb   0x2              	BANKSEL	_pid_kp
000162   5184     movf    0x84, 0x0, 0x1   	MOVF	_pid_kp, W, B
000164   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000166   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000168   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00016a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00016c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00016e   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000170   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000172   ec60     call    0x001ec0, 0x0    	CALL	_init_result
000174   f00f
000176   0e07     movlw   0x07             	MOVLW	0x07
000178   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	480; stepperCon.c	prep_pwm_lu() ;            // prepare PWM lookup table
00017a   ec2d     call    0x00145a, 0x0    	CALL	_prep_pwm_lu
00017c   f00a
                                           ;	.line	482; stepperCon.c	pwm_a = pwm_lu[step_a] ;
00017e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000180   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000182   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000184   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000186   0e00     movlw   0x00             	MOVLW	0x00
000188   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00018a   0e02     movlw   0x02             	MOVLW	0x02
00018c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00018e   eceb     call    0x0025d6, 0x0    	CALL	__mulint
000190   f012
000192   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000194   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
000196   f009
000198   0e04     movlw   0x04             	MOVLW	0x04
00019a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00019c   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00019e   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0001a0   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0001a2   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
0001a4   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
0001a6   ffe9
0001a8   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
0001aa   ffea
0001ac   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
0001ae   f000
0001b0   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0001b2   f001
                                           ;	.line	483; stepperCon.c	pwm_b = pwm_lu[step_b] ;
0001b4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0001b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001b8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0001ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001bc   0e00     movlw   0x00             	MOVLW	0x00
0001be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001c0   0e02     movlw   0x02             	MOVLW	0x02
0001c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001c4   eceb     call    0x0025d6, 0x0    	CALL	__mulint
0001c6   f012
0001c8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0001ca   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
0001cc   f009
0001ce   0e04     movlw   0x04             	MOVLW	0x04
0001d0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0001d2   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0001d4   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0001d6   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0001d8   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
0001da   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
0001dc   ffe9
0001de   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
0001e0   ffea
0001e2   cfee     movff   0xfee, 0x002     	MOVFF	POSTINC0, r0x02
0001e4   f002
0001e6   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
0001e8   f003
                                           ;	.line	485; stepperCon.c	LATAbits.LATA4 = 1 ;
0001ea   8889     bsf     0x89, 0x4, 0x0   	BSF	_LATAbits, 4
                                           ;	.line	486; stepperCon.c	LATAbits.LATA5 = 1 ; 
0001ec   8a89     bsf     0x89, 0x5, 0x0   	BSF	_LATAbits, 5
0001ee   0102     movlb   0x2              	BANKSEL	_t_blank
                                           ;	.line	488; stepperCon.c	pwmSetup(t_blank) ;        // Activate PWM
0001f0   519e     movf    0x9e, 0x0, 0x1   	MOVF	_t_blank, W, B
0001f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001f4   ec90     call    0x001b20, 0x0    	CALL	_pwmSetup
0001f6   f00d
0001f8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	489; stepperCon.c	activeInts() ;             // Set active state interrupts
0001fa   ece1     call    0x002bc2, 0x0    	CALL	_activeInts
0001fc   f015
                                           ; ;multiply variable :_micro_steps by variable _dir and store in _skip
0001fe   0102     movlb   0x2              	BANKSEL	_dir
                                           ;	.line	490; stepperCon.c	skip = dir * micro_steps ;
000200   5195     movf    0x95, 0x0, 0x1   	MOVF	_dir, W, B
000202   0102     movlb   0x2              	BANKSEL	_micro_steps
000204   0397     mulwf   0x97, 0x1        	MULWF	_micro_steps, B
000206   cff3     movff   0xff3, 0x296     	MOVFF	PRODL, _skip
000208   f296
00020a   0102     movlb   0x2              	BANKSEL	_pid_kp
                                           ;	.line	492; stepperCon.c	if(pid_kp != 0) {
00020c   5184     movf    0x84, 0x0, 0x1   	MOVF	_pid_kp, W, B
00020e   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
000210   1185     iorwf   0x85, 0x0, 0x1   	IORWF	(_pid_kp + 1), W, B
000212   e006     bz      0x000220         	BZ	_00326_DS_
                                           ;	.line	493; stepperCon.c	ADCON0bits.CHS = 0b0001 ;  // Set capture to RA0
000214   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
000216   0b83     andlw   0x83             	ANDLW	0x83
000218   0904     iorlw   0x04             	IORLW	0x04
00021a   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
                                           ;	.line	494; stepperCon.c	ADCON0bits.GO = 1 ;
00021c   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
00021e   d73c     bra     0x000098         	BRA	_00368_DS_
                                           _00326_DS_:
                                           ;	.line	497; stepperCon.c	CCPR2L = pwm_a >> 2 ;
000220   3401     rlcf    0x01, 0x0, 0x0   	RLCF	r0x01, W
000222   3001     rrcf    0x01, 0x0, 0x0   	RRCF	r0x01, W
000224   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000226   3000     rrcf    0x00, 0x0, 0x0   	RRCF	r0x00, W
000228   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00022a   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
00022c   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
00022e   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
000230   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000232   6e67     movwf   0x67, 0x0        	MOVWF	_CCPR2L
                                           ;	.line	498; stepperCon.c	CCP2CONbits.DC2B = pwm_a ;
000234   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000236   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000238   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00023a   0b03     andlw   0x03             	ANDLW	0x03
00023c   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00023e   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000240   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
000242   0bcf     andlw   0xcf             	ANDLW	0xcf
000244   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000246   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	500; stepperCon.c	CCPR1L = pwm_b >> 2 ;
000248   3403     rlcf    0x03, 0x0, 0x0   	RLCF	r0x03, W
00024a   3003     rrcf    0x03, 0x0, 0x0   	RRCF	r0x03, W
00024c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00024e   3002     rrcf    0x02, 0x0, 0x0   	RRCF	r0x02, W
000250   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000252   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
000254   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
000256   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
000258   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00025a   6ebe     movwf   0xbe, 0x0        	MOVWF	_CCPR1L
                                           ;	.line	501; stepperCon.c	CCP1CONbits.DC1B = pwm_b ;
00025c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00025e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000260   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000262   0b03     andlw   0x03             	ANDLW	0x03
000264   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000266   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000268   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
00026a   0bcf     andlw   0xcf             	ANDLW	0xcf
00026c   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00026e   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	504; stepperCon.c	break ;
000270   d713     bra     0x000098         	BRA	_00368_DS_
                                           _00328_DS_:
                                           ;	.line	507; stepperCon.c	state = RUNNING ;
000272   0e02     movlw   0x02             	MOVLW	0x02
000274   0102     movlb   0x2              	BANKSEL	_state
000276   6f94     movwf   0x94, 0x1        	MOVWF	_state, B
                                           ;	.line	509; stepperCon.c	step_a += skip ;
000278   c296     movff   0x296, 0x008     	MOVFF	_skip, r0x08
00027a   f008
00027c   6a09     clrf    0x09, 0x0        	CLRF	r0x09
00027e   0102     movlb   0x2              	BANKSEL	_skip
000280   bf96     btfsc   0x96, 0x7, 0x1   	BTFSC	_skip, 7, B
000282   6809     setf    0x09, 0x0        	SETF	r0x09
000284   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000286   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000288   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00028a   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
                                           ;	.line	510; stepperCon.c	step_b += skip ;
00028c   c296     movff   0x296, 0x008     	MOVFF	_skip, r0x08
00028e   f008
000290   6a09     clrf    0x09, 0x0        	CLRF	r0x09
000292   0102     movlb   0x2              	BANKSEL	_skip
000294   bf96     btfsc   0x96, 0x7, 0x1   	BTFSC	_skip, 7, B
000296   6809     setf    0x09, 0x0        	SETF	r0x09
000298   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00029a   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
00029c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00029e   2207     addwfc  0x07, 0x1, 0x0   	ADDWFC	r0x07, F
                                           ;	.line	512; stepperCon.c	if (step_a >= FULL_CYCLE) step_a -= FULL_CYCLE ;
0002a0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0002a2   0f80     addlw   0x80             	ADDLW	0x80
0002a4   0f80     addlw   0x80             	ADDLW	0x80
0002a6   e102     bnz     0x0002ac         	BNZ	_00481_DS_
0002a8   0e40     movlw   0x40             	MOVLW	0x40
0002aa   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00481_DS_:
0002ac   e305     bnc     0x0002b8         	BNC	_00332_DS_
0002ae   0ec0     movlw   0xc0             	MOVLW	0xc0
0002b0   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002b2   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0002b4   0605     decf    0x05, 0x1, 0x0   	DECF	r0x05, F
0002b6   d008     bra     0x0002c8         	BRA	_00333_DS_
                                           _00332_DS_:
                                           ;	.line	513; stepperCon.c	else if (step_a < 0) step_a += FULL_CYCLE ;
0002b8   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0002ba   ae05     btfss   0x05, 0x7, 0x0   	BTFSS	r0x05, 7
0002bc   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002be   e304     bnc     0x0002c8         	BNC	_00333_DS_
0002c0   0e40     movlw   0x40             	MOVLW	0x40
0002c2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002c4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0002c6   2a05     incf    0x05, 0x1, 0x0   	INCF	r0x05, F
                                           _00333_DS_:
                                           ;	.line	515; stepperCon.c	if (step_b >= FULL_CYCLE) step_b -= FULL_CYCLE ; 
0002c8   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0002ca   0f80     addlw   0x80             	ADDLW	0x80
0002cc   0f80     addlw   0x80             	ADDLW	0x80
0002ce   e102     bnz     0x0002d4         	BNZ	_00482_DS_
0002d0   0e40     movlw   0x40             	MOVLW	0x40
0002d2   5c06     subwf   0x06, 0x0, 0x0   	SUBWF	r0x06, W
                                           _00482_DS_:
0002d4   e305     bnc     0x0002e0         	BNC	_00337_DS_
0002d6   0ec0     movlw   0xc0             	MOVLW	0xc0
0002d8   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
0002da   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0002dc   0607     decf    0x07, 0x1, 0x0   	DECF	r0x07, F
0002de   d008     bra     0x0002f0         	BRA	_00338_DS_
                                           _00337_DS_:
                                           ;	.line	516; stepperCon.c	else if (step_b < 0) step_b += FULL_CYCLE ;
0002e0   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0002e2   ae07     btfss   0x07, 0x7, 0x0   	BTFSS	r0x07, 7
0002e4   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002e6   e304     bnc     0x0002f0         	BNC	_00338_DS_
0002e8   0e40     movlw   0x40             	MOVLW	0x40
0002ea   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
0002ec   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0002ee   2a07     incf    0x07, 0x1, 0x0   	INCF	r0x07, F
                                           _00338_DS_:
                                           ;	.line	518; stepperCon.c	pwm_a = pwm_lu[step_a] ;
0002f0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0002f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002f4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0002f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002f8   0e00     movlw   0x00             	MOVLW	0x00
0002fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002fc   0e02     movlw   0x02             	MOVLW	0x02
0002fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000300   eceb     call    0x0025d6, 0x0    	CALL	__mulint
000302   f012
000304   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000306   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
000308   f009
00030a   0e04     movlw   0x04             	MOVLW	0x04
00030c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00030e   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
000310   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
000312   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000314   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
000316   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
000318   ffe9
00031a   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
00031c   ffea
00031e   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
000320   f000
000322   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000324   f001
                                           ;	.line	519; stepperCon.c	pwm_b = pwm_lu[step_b] ;
000326   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000328   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00032a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00032c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00032e   0e00     movlw   0x00             	MOVLW	0x00
000330   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000332   0e02     movlw   0x02             	MOVLW	0x02
000334   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000336   eceb     call    0x0025d6, 0x0    	CALL	__mulint
000338   f012
00033a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00033c   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
00033e   f009
000340   0e04     movlw   0x04             	MOVLW	0x04
000342   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000344   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
000346   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
000348   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
00034a   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
00034c   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
00034e   ffe9
000350   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
000352   ffea
000354   cfee     movff   0xfee, 0x002     	MOVFF	POSTINC0, r0x02
000356   f002
000358   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
00035a   f003
00035c   0102     movlb   0x2              	BANKSEL	_pid_kp
                                           ;	.line	522; stepperCon.c	if (pid_kp != 0) {
00035e   5184     movf    0x84, 0x0, 0x1   	MOVF	_pid_kp, W, B
000360   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
000362   1185     iorwf   0x85, 0x0, 0x1   	IORWF	(_pid_kp + 1), W, B
000364   e00a     bz      0x00037a         	BZ	_00344_DS_
                                           ;	.line	523; stepperCon.c	if (!PIE2bits.C2IE && !PIE2bits.C1IE && !ADCON0bits.GO) {
000366   baa0     btfsc   0xa0, 0x5, 0x0   	BTFSC	_PIE2bits, 5
000368   d697     bra     0x000098         	BRA	_00368_DS_
00036a   bca0     btfsc   0xa0, 0x6, 0x0   	BTFSC	_PIE2bits, 6
00036c   d695     bra     0x000098         	BRA	_00368_DS_
00036e   b2c2     btfsc   0xc2, 0x1, 0x0   	BTFSC	_ADCON0bits, 1
000370   d693     bra     0x000098         	BRA	_00368_DS_
                                           	;	VOLATILE READ - BEGIN
000372   5079     movf    0x79, 0x0, 0x0   	MOVF	_CM1CON0, W
                                           	;	VOLATILE READ - END
                                           ;	.line	525; stepperCon.c	PIR2bits.C1IF = 0 ; 
000374   9ca1     bcf     0xa1, 0x6, 0x0   	BCF	_PIR2bits, 6
                                           ;	.line	526; stepperCon.c	PIE2bits.C1IE = 1 ;
000376   8ca0     bsf     0xa0, 0x6, 0x0   	BSF	_PIE2bits, 6
000378   d68f     bra     0x000098         	BRA	_00368_DS_
                                           _00344_DS_:
                                           ;	.line	530; stepperCon.c	CCPR2L = pwm_a >> 2 ;
00037a   3401     rlcf    0x01, 0x0, 0x0   	RLCF	r0x01, W
00037c   3001     rrcf    0x01, 0x0, 0x0   	RRCF	r0x01, W
00037e   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
000380   3000     rrcf    0x00, 0x0, 0x0   	RRCF	r0x00, W
000382   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000384   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
000386   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
000388   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
00038a   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00038c   6e67     movwf   0x67, 0x0        	MOVWF	_CCPR2L
                                           ;	.line	531; stepperCon.c	CCP2CONbits.DC2B = pwm_a ;
00038e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000390   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000392   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000394   0b03     andlw   0x03             	ANDLW	0x03
000396   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000398   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00039a   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
00039c   0bcf     andlw   0xcf             	ANDLW	0xcf
00039e   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0003a0   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	533; stepperCon.c	CCPR1L = pwm_b >> 2 ;
0003a2   3403     rlcf    0x03, 0x0, 0x0   	RLCF	r0x03, W
0003a4   3003     rrcf    0x03, 0x0, 0x0   	RRCF	r0x03, W
0003a6   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0003a8   3002     rrcf    0x02, 0x0, 0x0   	RRCF	r0x02, W
0003aa   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0003ac   3409     rlcf    0x09, 0x0, 0x0   	RLCF	r0x09, W
0003ae   3209     rrcf    0x09, 0x1, 0x0   	RRCF	r0x09, F
0003b0   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
0003b2   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0003b4   6ebe     movwf   0xbe, 0x0        	MOVWF	_CCPR1L
                                           ;	.line	534; stepperCon.c	CCP1CONbits.DC1B = pwm_b ;
0003b6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0003b8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0003ba   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0003bc   0b03     andlw   0x03             	ANDLW	0x03
0003be   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
0003c0   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0003c2   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
0003c4   0bcf     andlw   0xcf             	ANDLW	0xcf
0003c6   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0003c8   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	537; stepperCon.c	break ;
0003ca   d666     bra     0x000098         	BRA	_00368_DS_
                                           _00346_DS_:
                                           ;	.line	540; stepperCon.c	state = RUNNING ;
0003cc   0e02     movlw   0x02             	MOVLW	0x02
0003ce   0102     movlb   0x2              	BANKSEL	_state
0003d0   6f94     movwf   0x94, 0x1        	MOVWF	_state, B
                                           ;	.line	542; stepperCon.c	adc_res = ADRESH ;
0003d2   cfc4     movff   0xfc4, 0x008     	MOVFF	_ADRESH, r0x08
0003d4   f008
0003d6   6a09     clrf    0x09, 0x0        	CLRF	r0x09
                                           ;	.line	543; stepperCon.c	adc_res <<= 8 ;
0003d8   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0003da   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
0003dc   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
                                           ;	.line	544; stepperCon.c	adc_res += ADRESL ;
0003de   cfc3     movff   0xfc3, 0x008     	MOVFF	_ADRESL, r0x08
0003e0   f008
0003e2   6a09     clrf    0x09, 0x0        	CLRF	r0x09
0003e4   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0003e6   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0003e8   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
0003ea   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
                                           	;	VOLATILE READ - BEGIN
0003ec   5078     movf    0x78, 0x0, 0x0   	MOVF	_CM2CON0, W
                                           	;	VOLATILE READ - END
                                           ;	.line	561; stepperCon.c	PIR2bits.C2IF = 0 ; 
0003ee   9aa1     bcf     0xa1, 0x5, 0x0   	BCF	_PIR2bits, 5
                                           ;	.line	562; stepperCon.c	PIE2bits.C2IE = 1 ;
0003f0   8aa0     bsf     0xa0, 0x5, 0x0   	BSF	_PIE2bits, 5
                                           ;	.line	564; stepperCon.c	calc_pi(&pi_result_a, adc_res, pwm_a) ;
0003f2   0e00     movlw   0x00             	MOVLW	HIGH(_main_pi_result_a_65536_102)
0003f4   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
0003f6   0eec     movlw   0xec             	MOVLW	LOW(_main_pi_result_a_65536_102)
0003f8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0003fa   0e80     movlw   0x80             	MOVLW	0x80
0003fc   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
0003fe   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000400   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000402   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000404   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000406   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000408   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00040a   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00040c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00040e   500c     movf    0x0c, 0x0, 0x0   	MOVF	r0x0c, W
000410   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000412   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
000414   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000416   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000418   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00041a   ecfd     call    0x0005fa, 0x0    	CALL	_calc_pi
00041c   f002
00041e   0e07     movlw   0x07             	MOVLW	0x07
000420   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000422   0100     movlb   0x0              	BANKSEL	(_main_pi_result_a_65536_102 + 1)
                                           ;	.line	566; stepperCon.c	CCPR2L = pi_result_a.output >> 2 ;
000424   35ed     rlcf    0xed, 0x0, 0x1   	RLCF	(_main_pi_result_a_65536_102 + 1), W, B
000426   0100     movlb   0x0              	BANKSEL	(_main_pi_result_a_65536_102 + 1)
000428   31ed     rrcf    0xed, 0x0, 0x1   	RRCF	(_main_pi_result_a_65536_102 + 1), W, B
00042a   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
00042c   0100     movlb   0x0              	BANKSEL	_main_pi_result_a_65536_102
00042e   31ec     rrcf    0xec, 0x0, 0x1   	RRCF	_main_pi_result_a_65536_102, W, B
000430   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000432   340b     rlcf    0x0b, 0x0, 0x0   	RLCF	r0x0b, W
000434   320b     rrcf    0x0b, 0x1, 0x0   	RRCF	r0x0b, F
000436   320a     rrcf    0x0a, 0x1, 0x0   	RRCF	r0x0a, F
000438   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00043a   6e67     movwf   0x67, 0x0        	MOVWF	_CCPR2L
00043c   0100     movlb   0x0              	BANKSEL	_main_pi_result_a_65536_102
                                           ;	.line	567; stepperCon.c	CCP2CONbits.DC2B = pi_result_a.output ;
00043e   51ec     movf    0xec, 0x0, 0x1   	MOVF	_main_pi_result_a_65536_102, W, B
000440   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000442   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000444   0b03     andlw   0x03             	ANDLW	0x03
000446   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000448   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00044a   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
00044c   0bcf     andlw   0xcf             	ANDLW	0xcf
00044e   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000450   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	569; stepperCon.c	if (adc_res <= 31) {
000452   0e00     movlw   0x00             	MOVLW	0x00
000454   5c09     subwf   0x09, 0x0, 0x0   	SUBWF	r0x09, W
000456   e102     bnz     0x00045c         	BNZ	_00483_DS_
000458   0e20     movlw   0x20             	MOVLW	0x20
00045a   5c08     subwf   0x08, 0x0, 0x0   	SUBWF	r0x08, W
                                           _00483_DS_:
00045c   e204     bc      0x000466         	BC	_00348_DS_
                                           ;	.line	570; stepperCon.c	adc_res = 2 ;
00045e   0e02     movlw   0x02             	MOVLW	0x02
000460   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000462   6a09     clrf    0x09, 0x0        	CLRF	r0x09
000464   d004     bra     0x00046e         	BRA	_00349_DS_
                                           _00348_DS_:
                                           ;	.line	572; stepperCon.c	else adc_res -= 30 ;
000466   0ee2     movlw   0xe2             	MOVLW	0xe2
000468   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00046a   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00046c   0609     decf    0x09, 0x1, 0x0   	DECF	r0x09, F
                                           _00349_DS_:
                                           ;	.line	575; stepperCon.c	CCPR5L = adc_res >> 2 ;
00046e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000470   3009     rrcf    0x09, 0x0, 0x0   	RRCF	r0x09, W
000472   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
000474   3008     rrcf    0x08, 0x0, 0x0   	RRCF	r0x08, W
000476   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000478   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00047a   320b     rrcf    0x0b, 0x1, 0x0   	RRCF	r0x0b, F
00047c   320a     rrcf    0x0a, 0x1, 0x0   	RRCF	r0x0a, F
00047e   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000480   010f     movlb   0xf              	BANKSEL	_CCPR5L
000482   6f55     movwf   0x55, 0x1        	MOVWF	_CCPR5L, B
                                           ;	.line	576; stepperCon.c	CCP5CONbits.DC5B = adc_res ;
000484   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000486   0b03     andlw   0x03             	ANDLW	0x03
000488   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00048a   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00048c   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
00048e   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
000490   0bcf     andlw   0xcf             	ANDLW	0xcf
000492   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000494   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
000496   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ;	.line	578; stepperCon.c	break ;
000498   ef4c     goto    0x000098         	GOTO	_00368_DS_
00049a   f000
                                           _00350_DS_:
                                           ;	.line	581; stepperCon.c	state = RUNNING ;
00049c   0e02     movlw   0x02             	MOVLW	0x02
00049e   0102     movlb   0x2              	BANKSEL	_state
0004a0   6f94     movwf   0x94, 0x1        	MOVWF	_state, B
                                           ;	.line	583; stepperCon.c	adc_res = ADRESH  ;
0004a2   cfc4     movff   0xfc4, 0x008     	MOVFF	_ADRESH, r0x08
0004a4   f008
0004a6   6a09     clrf    0x09, 0x0        	CLRF	r0x09
                                           ;	.line	584; stepperCon.c	adc_res <<= 8 ;
0004a8   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0004aa   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
0004ac   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
                                           ;	.line	585; stepperCon.c	adc_res += ADRESL ;
0004ae   cfc3     movff   0xfc3, 0x008     	MOVFF	_ADRESL, r0x08
0004b0   f008
0004b2   6a09     clrf    0x09, 0x0        	CLRF	r0x09
0004b4   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0004b6   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0004b8   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
0004ba   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
                                           	;	VOLATILE READ - BEGIN
0004bc   5079     movf    0x79, 0x0, 0x0   	MOVF	_CM1CON0, W
                                           	;	VOLATILE READ - END
                                           ;	.line	602; stepperCon.c	PIR2bits.C1IF = 0 ; 
0004be   9ca1     bcf     0xa1, 0x6, 0x0   	BCF	_PIR2bits, 6
                                           ;	.line	603; stepperCon.c	PIE2bits.C1IE = 1 ;
0004c0   8ca0     bsf     0xa0, 0x6, 0x0   	BSF	_PIE2bits, 6
                                           ;	.line	605; stepperCon.c	calc_pi(&pi_result_b, adc_res, pwm_b) ;
0004c2   0e00     movlw   0x00             	MOVLW	HIGH(_main_pi_result_b_65536_102)
0004c4   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
0004c6   0ef4     movlw   0xf4             	MOVLW	LOW(_main_pi_result_b_65536_102)
0004c8   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0004ca   0e80     movlw   0x80             	MOVLW	0x80
0004cc   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
0004ce   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0004d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004d2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0004d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004d6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0004d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004da   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0004dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004de   500c     movf    0x0c, 0x0, 0x0   	MOVF	r0x0c, W
0004e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004e2   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
0004e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004e6   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0004e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004ea   ecfd     call    0x0005fa, 0x0    	CALL	_calc_pi
0004ec   f002
0004ee   0e07     movlw   0x07             	MOVLW	0x07
0004f0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0004f2   0100     movlb   0x0              	BANKSEL	(_main_pi_result_b_65536_102 + 1)
                                           ;	.line	607; stepperCon.c	CCPR1L = pi_result_b.output >> 2 ;
0004f4   35f5     rlcf    0xf5, 0x0, 0x1   	RLCF	(_main_pi_result_b_65536_102 + 1), W, B
0004f6   0100     movlb   0x0              	BANKSEL	(_main_pi_result_b_65536_102 + 1)
0004f8   31f5     rrcf    0xf5, 0x0, 0x1   	RRCF	(_main_pi_result_b_65536_102 + 1), W, B
0004fa   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
0004fc   0100     movlb   0x0              	BANKSEL	_main_pi_result_b_65536_102
0004fe   31f4     rrcf    0xf4, 0x0, 0x1   	RRCF	_main_pi_result_b_65536_102, W, B
000500   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000502   340b     rlcf    0x0b, 0x0, 0x0   	RLCF	r0x0b, W
000504   320b     rrcf    0x0b, 0x1, 0x0   	RRCF	r0x0b, F
000506   320a     rrcf    0x0a, 0x1, 0x0   	RRCF	r0x0a, F
000508   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00050a   6ebe     movwf   0xbe, 0x0        	MOVWF	_CCPR1L
00050c   0100     movlb   0x0              	BANKSEL	_main_pi_result_b_65536_102
                                           ;	.line	608; stepperCon.c	CCP1CONbits.DC1B = pi_result_b.output ;
00050e   51f4     movf    0xf4, 0x0, 0x1   	MOVF	_main_pi_result_b_65536_102, W, B
000510   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000512   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000514   0b03     andlw   0x03             	ANDLW	0x03
000516   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000518   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00051a   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
00051c   0bcf     andlw   0xcf             	ANDLW	0xcf
00051e   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000520   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	610; stepperCon.c	if (adc_res <= 31) {
000522   0e00     movlw   0x00             	MOVLW	0x00
000524   5c09     subwf   0x09, 0x0, 0x0   	SUBWF	r0x09, W
000526   e102     bnz     0x00052c         	BNZ	_00484_DS_
000528   0e20     movlw   0x20             	MOVLW	0x20
00052a   5c08     subwf   0x08, 0x0, 0x0   	SUBWF	r0x08, W
                                           _00484_DS_:
00052c   e204     bc      0x000536         	BC	_00352_DS_
                                           ;	.line	611; stepperCon.c	adc_res = 2 ;
00052e   0e02     movlw   0x02             	MOVLW	0x02
000530   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
000532   6a09     clrf    0x09, 0x0        	CLRF	r0x09
000534   d004     bra     0x00053e         	BRA	_00353_DS_
                                           _00352_DS_:
                                           ;	.line	613; stepperCon.c	else adc_res -= 30 ;
000536   0ee2     movlw   0xe2             	MOVLW	0xe2
000538   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00053a   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00053c   0609     decf    0x09, 0x1, 0x0   	DECF	r0x09, F
                                           _00353_DS_:
                                           ;	.line	615; stepperCon.c	CCPR4L = adc_res >> 2 ;
00053e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000540   3009     rrcf    0x09, 0x0, 0x0   	RRCF	r0x09, W
000542   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
000544   3008     rrcf    0x08, 0x0, 0x0   	RRCF	r0x08, W
000546   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000548   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00054a   320b     rrcf    0x0b, 0x1, 0x0   	RRCF	r0x0b, F
00054c   320a     rrcf    0x0a, 0x1, 0x0   	RRCF	r0x0a, F
00054e   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
000550   010f     movlb   0xf              	BANKSEL	_CCPR4L
000552   6f58     movwf   0x58, 0x1        	MOVWF	_CCPR4L, B
                                           ;	.line	616; stepperCon.c	CCP4CONbits.DC4B = adc_res ;
000554   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
000556   0b03     andlw   0x03             	ANDLW	0x03
000558   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00055a   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00055c   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
00055e   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
000560   0bcf     andlw   0xcf             	ANDLW	0xcf
000562   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000564   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000566   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	618; stepperCon.c	break ;
000568   ef4c     goto    0x000098         	GOTO	_00368_DS_
00056a   f000
                                           _00354_DS_:
00056c   010f     movlb   0xf              	BANKSEL	_adc_wdt
                                           ;	.line	621; stepperCon.c	if(++adc_wdt > 500 && !ADCON0bits.GO) {
00056e   3f36     incfsz  0x36, 0x1, 0x1   	INCFSZ	_adc_wdt, F, B
000570   d002     bra     0x000576         	BRA	_10319_DS_
000572   010f     movlb   0xf              	BANKSEL	(_adc_wdt + 1)
000574   2b37     incf    0x37, 0x1, 0x1   	INCF	(_adc_wdt + 1), F, B
                                           _10319_DS_:
000576   0e01     movlw   0x01             	MOVLW	0x01
000578   010f     movlb   0xf              	BANKSEL	(_adc_wdt + 1)
00057a   5d37     subwf   0x37, 0x0, 0x1   	SUBWF	(_adc_wdt + 1), W, B
00057c   e103     bnz     0x000584         	BNZ	_00485_DS_
00057e   0ef5     movlw   0xf5             	MOVLW	0xf5
000580   010f     movlb   0xf              	BANKSEL	_adc_wdt
000582   5d36     subwf   0x36, 0x0, 0x1   	SUBWF	_adc_wdt, W, B
                                           _00485_DS_:
000584   e30b     bnc     0x00059c         	BNC	_00356_DS_
000586   b2c2     btfsc   0xc2, 0x1, 0x0   	BTFSC	_ADCON0bits, 1
000588   d009     bra     0x00059c         	BRA	_00356_DS_
00058a   010f     movlb   0xf              	BANKSEL	_adc_wdt
                                           ;	.line	622; stepperCon.c	adc_wdt = 0 ;
00058c   6b36     clrf    0x36, 0x1        	CLRF	_adc_wdt, B
00058e   010f     movlb   0xf              	BANKSEL	(_adc_wdt + 1)
000590   6b37     clrf    0x37, 0x1        	CLRF	(_adc_wdt + 1), B
                                           ;	.line	623; stepperCon.c	ADCON0bits.CHS = 0b0001 ;  // Set capture to RA0
000592   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
000594   0b83     andlw   0x83             	ANDLW	0x83
000596   0904     iorlw   0x04             	IORLW	0x04
000598   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
                                           ;	.line	624; stepperCon.c	ADCON0bits.GO = 1 ;
00059a   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           _00356_DS_:
                                           ;	.line	628; stepperCon.c	if (!PORTBbits.RB3) {
00059c   b681     btfsc   0x81, 0x3, 0x0   	BTFSC	_PORTBbits, 3
00059e   ef4c     goto    0x000098         	GOTO	_00368_DS_
0005a0   f000
                                           ;	.line	629; stepperCon.c	INTCONbits.GIE = 0 ;
0005a2   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	630; stepperCon.c	stop() ;
0005a4   ec83     call    0x002d06, 0x0    	CALL	_stop
0005a6   f016
                                           ;	.line	631; stepperCon.c	INTCONbits.GIE = 1 ;
0005a8   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	633; stepperCon.c	break ;
0005aa   ef4c     goto    0x000098         	GOTO	_00368_DS_
0005ac   f000
                                           _00360_DS_:
                                           ;	.line	637; stepperCon.c	if (PORTBbits.RB3 && !fault) state = START ;
0005ae   a681     btfss   0x81, 0x3, 0x0   	BTFSS	_PORTBbits, 3
0005b0   d006     bra     0x0005be         	BRA	_00362_DS_
0005b2   0102     movlb   0x2              	BANKSEL	_fault
0005b4   519d     movf    0x9d, 0x0, 0x1   	MOVF	_fault, W, B
0005b6   e103     bnz     0x0005be         	BNZ	_00362_DS_
0005b8   0e01     movlw   0x01             	MOVLW	0x01
0005ba   0102     movlb   0x2              	BANKSEL	_state
0005bc   6f94     movwf   0x94, 0x1        	MOVWF	_state, B
                                           _00362_DS_:
0005be   0102     movlb   0x2              	BANKSEL	_i2c_dirty
                                           ;	.line	640; stepperCon.c	if (i2c_dirty) {
0005c0   519b     movf    0x9b, 0x0, 0x1   	MOVF	_i2c_dirty, W, B
0005c2   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
0005c4   ef4c     goto    0x000098         	GOTO	_00368_DS_
0005c6   f000
                                           ;	.line	641; stepperCon.c	store_regs(i2c_regs, sizeof(i2c_regs)) ;
0005c8   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
0005ca   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0005cc   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
0005ce   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0005d0   0e80     movlw   0x80             	MOVLW	0x80
0005d2   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0005d4   0e0b     movlw   0x0b             	MOVLW	0x0b
0005d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005d8   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0005da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005dc   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0005de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005e0   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0005e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005e4   ecc8     call    0x002190, 0x0    	CALL	_store_regs
0005e6   f010
0005e8   0e04     movlw   0x04             	MOVLW	0x04
0005ea   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0005ec   0102     movlb   0x2              	BANKSEL	_i2c_dirty
                                           ;	.line	642; stepperCon.c	i2c_dirty = 0 ;
0005ee   6b9b     clrf    0x9b, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	643; stepperCon.c	set_op_vars() ; 
0005f0   ec2e     call    0x00225c, 0x0    	CALL	_set_op_vars
0005f2   f011
                                           ;	.line	647; stepperCon.c	}
0005f4   ef4c     goto    0x000098         	GOTO	_00368_DS_
0005f6   f000
                                           ;	.line	649; stepperCon.c	}
0005f8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__delay_ms	code
                                           _delay_ms:
                                           ;	.line	394; stepperCon.c	void delay_ms(uint16_t time) {
002902   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002904   ffe5
002906   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002908   ffd9
00290a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00290c   ffe5
00290e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002910   ffe5
002912   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002914   ffe5
002916   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002918   ffe5
00291a   0e02     movlw   0x02             	MOVLW	0x02
00291c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00291e   f000
002920   0e03     movlw   0x03             	MOVLW	0x03
002922   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002924   f001
                                           ;	.line	397; stepperCon.c	T0CON = 0x02 ;
002926   0e02     movlw   0x02             	MOVLW	0x02
002928   6ed5     movwf   0xd5, 0x0        	MOVWF	_T0CON
                                           _00311_DS_:
                                           ;	.line	399; stepperCon.c	while(--i) {
00292a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00292c   0fff     addlw   0xff             	ADDLW	0xff
00292e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002930   0eff     movlw   0xff             	MOVLW	0xff
002932   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002934   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002936   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
002938   f000
00293a   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
00293c   f001
00293e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002940   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
002942   e00a     bz      0x002958         	BZ	_00313_DS_
                                           ;	.line	400; stepperCon.c	T0CONbits.TMR0ON = 0 ;
002944   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	401; stepperCon.c	INTCONbits.TMR0IF = 0 ;
002946   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	402; stepperCon.c	TMR0H = TMR_1MS >> 8 ;
002948   0ef8     movlw   0xf8             	MOVLW	0xf8
00294a   6ed7     movwf   0xd7, 0x0        	MOVWF	_TMR0H
                                           ;	.line	403; stepperCon.c	TMR0L = TMR_1MS ;
00294c   0e30     movlw   0x30             	MOVLW	0x30
00294e   6ed6     movwf   0xd6, 0x0        	MOVWF	_TMR0L
                                           ;	.line	404; stepperCon.c	T0CONbits.TMR0ON = 1 ;
002950   8ed5     bsf     0xd5, 0x7, 0x0   	BSF	_T0CONbits, 7
                                           _00308_DS_:
                                           ;	.line	406; stepperCon.c	while(!INTCONbits.TMR0IF) ;
002952   b4f2     btfsc   0xf2, 0x2, 0x0   	BTFSC	_INTCONbits, 2
002954   d7ea     bra     0x00292a         	BRA	_00311_DS_
002956   d7fd     bra     0x002952         	BRA	_00308_DS_
                                           _00313_DS_:
                                           ;	.line	409; stepperCon.c	T0CONbits.TMR0ON = 0 ;
002958   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	410; stepperCon.c	INTCONbits.TMR0IF = 0 ;
00295a   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	411; stepperCon.c	}
00295c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00295e   f003
002960   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002962   f002
002964   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002966   f001
002968   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00296a   f000
00296c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00296e   ffd9
002970   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__set_op_vars	code
                                           _set_op_vars:
                                           ;	.line	379; stepperCon.c	void set_op_vars(void) {
00225c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00225e   ffe5
002260   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002262   ffd9
002264   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002266   ffe5
002268   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00226a   ffe5
00226c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00226e   ffe5
002270   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002272   ffe5
                                           ;	.line	380; stepperCon.c	i2c_address  = i2c_regs[0x00] ;
002274   c0e1     movff   0x0e1, 0x29c     	MOVFF	_i2c_regs, _i2c_address
002276   f29c
                                           ;	.line	381; stepperCon.c	micro_steps  = i2c_regs[0x01] ;
002278   c0e2     movff   0x0e2, 0x297     	MOVFF	(_i2c_regs + 1), _micro_steps
00227a   f297
                                           ;	.line	382; stepperCon.c	set_amp      = i2c_regs[0x02] ;
00227c   c0e3     movff   0x0e3, 0x280     	MOVFF	(_i2c_regs + 2), _set_amp
00227e   f280
002280   0102     movlb   0x2              	BANKSEL	(_set_amp + 1)
002282   6b81     clrf    0x81, 0x1        	CLRF	(_set_amp + 1), B
                                           ;	.line	383; stepperCon.c	set_amp     += i2c_regs[0x03] << 8 ;
002284   c0e4     movff   0x0e4, 0x000     	MOVFF	(_i2c_regs + 3), r0x00
002286   f000
002288   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00228a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00228c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00228e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002290   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002292   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002294   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002296   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002298   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00229a   0102     movlb   0x2              	BANKSEL	_set_amp
00229c   2780     addwf   0x80, 0x1, 0x1   	ADDWF	_set_amp, F, B
00229e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022a0   0102     movlb   0x2              	BANKSEL	(_set_amp + 1)
0022a2   2381     addwfc  0x81, 0x1, 0x1   	ADDWFC	(_set_amp + 1), F, B
                                           ;	.line	384; stepperCon.c	max_amp      = i2c_regs[0x04] ;
0022a4   c0e5     movff   0x0e5, 0x282     	MOVFF	(_i2c_regs + 4), _max_amp
0022a6   f282
0022a8   0102     movlb   0x2              	BANKSEL	(_max_amp + 1)
0022aa   6b83     clrf    0x83, 0x1        	CLRF	(_max_amp + 1), B
                                           ;	.line	385; stepperCon.c	max_amp     += i2c_regs[0x05] << 8 ;
0022ac   c0e6     movff   0x0e6, 0x000     	MOVFF	(_i2c_regs + 5), r0x00
0022ae   f000
0022b0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0022b2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0022b4   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0022b6   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0022b8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0022ba   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0022bc   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0022be   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0022c0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0022c2   0102     movlb   0x2              	BANKSEL	_max_amp
0022c4   2782     addwf   0x82, 0x1, 0x1   	ADDWF	_max_amp, F, B
0022c6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022c8   0102     movlb   0x2              	BANKSEL	(_max_amp + 1)
0022ca   2383     addwfc  0x83, 0x1, 0x1   	ADDWFC	(_max_amp + 1), F, B
                                           ;	.line	386; stepperCon.c	t_blank      = i2c_regs[0x06] ;
0022cc   c0e7     movff   0x0e7, 0x29e     	MOVFF	(_i2c_regs + 6), _t_blank
0022ce   f29e
                                           ;	.line	387; stepperCon.c	pid_kp       = i2c_regs[0x07] ;
0022d0   c0e8     movff   0x0e8, 0x284     	MOVFF	(_i2c_regs + 7), _pid_kp
0022d2   f284
0022d4   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
0022d6   6b85     clrf    0x85, 0x1        	CLRF	(_pid_kp + 1), B
                                           ;	.line	388; stepperCon.c	pid_kp      += i2c_regs[0x08] << 8 ;
0022d8   c0e9     movff   0x0e9, 0x000     	MOVFF	(_i2c_regs + 8), r0x00
0022da   f000
0022dc   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0022de   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0022e0   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0022e2   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0022e4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0022e6   0102     movlb   0x2              	BANKSEL	_pid_kp
0022e8   2784     addwf   0x84, 0x1, 0x1   	ADDWF	_pid_kp, F, B
0022ea   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0022ec   0102     movlb   0x2              	BANKSEL	(_pid_kp + 1)
0022ee   2385     addwfc  0x85, 0x1, 0x1   	ADDWFC	(_pid_kp + 1), F, B
                                           ;	.line	389; stepperCon.c	pid_ki       = i2c_regs[0x09] ;
0022f0   c0ea     movff   0x0ea, 0x286     	MOVFF	(_i2c_regs + 9), _pid_ki
0022f2   f286
0022f4   0102     movlb   0x2              	BANKSEL	(_pid_ki + 1)
0022f6   6b87     clrf    0x87, 0x1        	CLRF	(_pid_ki + 1), B
                                           ;	.line	390; stepperCon.c	pid_ki      += i2c_regs[0x0a] << 8 ;
0022f8   c0eb     movff   0x0eb, 0x000     	MOVFF	(_i2c_regs + 10), r0x00
0022fa   f000
0022fc   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0022fe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002300   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002302   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002304   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002306   0102     movlb   0x2              	BANKSEL	_pid_ki
002308   2786     addwf   0x86, 0x1, 0x1   	ADDWF	_pid_ki, F, B
00230a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00230c   0102     movlb   0x2              	BANKSEL	(_pid_ki + 1)
00230e   2387     addwfc  0x87, 0x1, 0x1   	ADDWFC	(_pid_ki + 1), F, B
                                           ;	.line	391; stepperCon.c	}
002310   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002312   f003
002314   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002316   f002
002318   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00231a   f001
00231c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00231e   f000
002320   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002322   ffd9
002324   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__set_fault	code
                                           _set_fault:
                                           ;	.line	368; stepperCon.c	void set_fault(void) {
002d9a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d9c   ffe5
002d9e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002da0   ffd9
                                           ;	.line	370; stepperCon.c	LATBbits.LATB4 = 1 ;
002da2   888a     bsf     0x8a, 0x4, 0x0   	BSF	_LATBbits, 4
                                           ;	.line	373; stepperCon.c	LATCbits.LATC5 = 1 ;
002da4   8a8b     bsf     0x8b, 0x5, 0x0   	BSF	_LATCbits, 5
                                           ;	.line	375; stepperCon.c	fault = 1 ;
002da6   0e01     movlw   0x01             	MOVLW	0x01
002da8   0102     movlb   0x2              	BANKSEL	_fault
002daa   6f9d     movwf   0x9d, 0x1        	MOVWF	_fault, B
                                           ;	.line	376; stepperCon.c	}
002dac   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002dae   ffd9
002db0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__prep_pwm_lu	code
                                           _prep_pwm_lu:
                                           ;	.line	342; stepperCon.c	void prep_pwm_lu(void) {
00145a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00145c   ffe5
00145e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001460   ffd9
001462   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001464   ffe5
001466   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001468   ffe5
00146a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00146c   ffe5
00146e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001470   ffe5
001472   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001474   ffe5
001476   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001478   ffe5
00147a   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00147c   ffe5
00147e   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001480   ffe5
001482   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001484   ffe5
001486   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
001488   ffe5
00148a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00148c   ffe5
00148e   c00b     movff   0x00b, 0xfe5     	MOVFF	r0x0b, POSTDEC1
001490   ffe5
001492   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
001494   ffe5
001496   c00d     movff   0x00d, 0xfe5     	MOVFF	r0x0d, POSTDEC1
001498   ffe5
00149a   c00e     movff   0x00e, 0xfe5     	MOVFF	r0x0e, POSTDEC1
00149c   ffe5
00149e   c00f     movff   0x00f, 0xfe5     	MOVFF	r0x0f, POSTDEC1
0014a0   ffe5
0014a2   c010     movff   0x010, 0xfe5     	MOVFF	r0x10, POSTDEC1
0014a4   ffe5
0014a6   c011     movff   0x011, 0xfe5     	MOVFF	r0x11, POSTDEC1
0014a8   ffe5
0014aa   c012     movff   0x012, 0xfe5     	MOVFF	r0x12, POSTDEC1
0014ac   ffe5
0014ae   c013     movff   0x013, 0xfe5     	MOVFF	r0x13, POSTDEC1
0014b0   ffe5
                                           ;	.line	345; stepperCon.c	int16_t max = -32000 ;
0014b2   6a00     clrf    0x00, 0x0        	CLRF	r0x00
0014b4   0e83     movlw   0x83             	MOVLW	0x83
0014b6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	346; stepperCon.c	int16_t min = 32000 ;
0014b8   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0014ba   0e7d     movlw   0x7d             	MOVLW	0x7d
0014bc   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0014be   0102     movlb   0x2              	BANKSEL	(_set_amp + 1)
                                           ;	.line	348; stepperCon.c	ratio = (float)set_amp / (float)max_amp ;
0014c0   5181     movf    0x81, 0x0, 0x1   	MOVF	(_set_amp + 1), W, B
0014c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014c4   0102     movlb   0x2              	BANKSEL	_set_amp
0014c6   5180     movf    0x80, 0x0, 0x1   	MOVF	_set_amp, W, B
0014c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014ca   ecf0     call    0x0029e0, 0x0    	CALL	___uint2fs
0014cc   f014
0014ce   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0014d0   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0014d2   f005
0014d4   cff4     movff   0xff4, 0x006     	MOVFF	PRODH, r0x06
0014d6   f006
0014d8   cfe9     movff   0xfe9, 0x007     	MOVFF	FSR0L, r0x07
0014da   f007
0014dc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0014de   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0014e0   0102     movlb   0x2              	BANKSEL	(_max_amp + 1)
0014e2   5183     movf    0x83, 0x0, 0x1   	MOVF	(_max_amp + 1), W, B
0014e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014e6   0102     movlb   0x2              	BANKSEL	_max_amp
0014e8   5182     movf    0x82, 0x0, 0x1   	MOVF	_max_amp, W, B
0014ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014ec   ecf0     call    0x0029e0, 0x0    	CALL	___uint2fs
0014ee   f014
0014f0   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0014f2   cff3     movff   0xff3, 0x009     	MOVFF	PRODL, r0x09
0014f4   f009
0014f6   cff4     movff   0xff4, 0x00a     	MOVFF	PRODH, r0x0a
0014f8   f00a
0014fa   cfe9     movff   0xfe9, 0x00b     	MOVFF	FSR0L, r0x0b
0014fc   f00b
0014fe   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001500   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001502   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
001504   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001506   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
001508   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00150a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00150c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00150e   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001510   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001512   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001514   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001516   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001518   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00151a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00151c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00151e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001520   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001522   ecbf     call    0x000d7e, 0x0    	CALL	___fsdiv
001524   f006
001526   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001528   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00152a   f005
00152c   cff4     movff   0xff4, 0x006     	MOVFF	PRODH, r0x06
00152e   f006
001530   cfe9     movff   0xfe9, 0x007     	MOVFF	FSR0L, r0x07
001532   f007
001534   0e08     movlw   0x08             	MOVLW	0x08
001536   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001538   010f     movlb   0xf              	BANKSEL	_zero_cross
                                           ;	.line	351; stepperCon.c	zero_cross = bias ;
00153a   6b34     clrf    0x34, 0x1        	CLRF	_zero_cross, B
00153c   0e02     movlw   0x02             	MOVLW	0x02
00153e   010f     movlb   0xf              	BANKSEL	(_zero_cross + 1)
001540   6f35     movwf   0x35, 0x1        	MOVWF	(_zero_cross + 1), B
                                           ;	.line	353; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
001542   6a08     clrf    0x08, 0x0        	CLRF	r0x08
001544   6a09     clrf    0x09, 0x0        	CLRF	r0x09
001546   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
001548   6a0b     clrf    0x0b, 0x0        	CLRF	r0x0b
00154a   6a0c     clrf    0x0c, 0x0        	CLRF	r0x0c
00154c   6a0d     clrf    0x0d, 0x0        	CLRF	r0x0d
                                           _00270_DS_:
                                           ;	.line	354; stepperCon.c	set = (float)pwm_base[i] * ratio + bias ;
00154e   0e60     movlw   0x60             	MOVLW	LOW(_pwm_base)
001550   240c     addwf   0x0c, 0x0, 0x0   	ADDWF	r0x0c, W
001552   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001554   0e00     movlw   0x00             	MOVLW	HIGH(_pwm_base)
001556   200d     addwfc  0x0d, 0x0, 0x0   	ADDWFC	r0x0d, W
001558   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
00155a   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
00155c   ffe9
00155e   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
001560   ffea
001562   cfee     movff   0xfee, 0x00e     	MOVFF	POSTINC0, r0x0e
001564   f00e
001566   cfef     movff   0xfef, 0x00f     	MOVFF	INDF0, r0x0f
001568   f00f
00156a   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
00156c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00156e   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
001570   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001572   ec47     call    0x00288e, 0x0    	CALL	___sint2fs
001574   f014
001576   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001578   cff3     movff   0xff3, 0x00f     	MOVFF	PRODL, r0x0f
00157a   f00f
00157c   cff4     movff   0xff4, 0x010     	MOVFF	PRODH, r0x10
00157e   f010
001580   cfe9     movff   0xfe9, 0x011     	MOVFF	FSR0L, r0x11
001582   f011
001584   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001586   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001588   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00158a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00158c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00158e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001590   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001592   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001594   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001596   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001598   5011     movf    0x11, 0x0, 0x0   	MOVF	r0x11, W
00159a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00159c   5010     movf    0x10, 0x0, 0x0   	MOVF	r0x10, W
00159e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015a0   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
0015a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015a4   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
0015a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015a8   ecf6     call    0x0009ec, 0x0    	CALL	___fsmul
0015aa   f004
0015ac   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0015ae   cff3     movff   0xff3, 0x00f     	MOVFF	PRODL, r0x0f
0015b0   f00f
0015b2   cff4     movff   0xff4, 0x010     	MOVFF	PRODH, r0x10
0015b4   f010
0015b6   cfe9     movff   0xfe9, 0x011     	MOVFF	FSR0L, r0x11
0015b8   f011
0015ba   0e08     movlw   0x08             	MOVLW	0x08
0015bc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0015be   0e44     movlw   0x44             	MOVLW	0x44
0015c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015c2   0e00     movlw   0x00             	MOVLW	0x00
0015c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015c6   0e00     movlw   0x00             	MOVLW	0x00
0015c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015ca   0e00     movlw   0x00             	MOVLW	0x00
0015cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015ce   5011     movf    0x11, 0x0, 0x0   	MOVF	r0x11, W
0015d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015d2   5010     movf    0x10, 0x0, 0x0   	MOVF	r0x10, W
0015d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015d6   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
0015d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015da   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
0015dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015de   ec77     call    0x0010ee, 0x0    	CALL	___fsadd
0015e0   f008
0015e2   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0015e4   cff3     movff   0xff3, 0x00f     	MOVFF	PRODL, r0x0f
0015e6   f00f
0015e8   cff4     movff   0xff4, 0x010     	MOVFF	PRODH, r0x10
0015ea   f010
0015ec   cfe9     movff   0xfe9, 0x011     	MOVFF	FSR0L, r0x11
0015ee   f011
0015f0   0e08     movlw   0x08             	MOVLW	0x08
0015f2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	355; stepperCon.c	pwm_lu[i] = set ;
0015f4   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0015f6   240c     addwf   0x0c, 0x0, 0x0   	ADDWF	r0x0c, W
0015f8   6e12     movwf   0x12, 0x0        	MOVWF	r0x12
0015fa   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0015fc   200d     addwfc  0x0d, 0x0, 0x0   	ADDWFC	r0x0d, W
0015fe   6e13     movwf   0x13, 0x0        	MOVWF	r0x13
001600   5011     movf    0x11, 0x0, 0x0   	MOVF	r0x11, W
001602   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001604   5010     movf    0x10, 0x0, 0x0   	MOVF	r0x10, W
001606   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001608   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
00160a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00160c   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
00160e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001610   ec3b     call    0x002676, 0x0    	CALL	___fs2uint
001612   f013
001614   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001616   cff3     movff   0xff3, 0x00f     	MOVFF	PRODL, r0x0f
001618   f00f
00161a   0e04     movlw   0x04             	MOVLW	0x04
00161c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00161e   c012     movff   0x012, 0xfe9     	MOVFF	r0x12, FSR0L
001620   ffe9
001622   c013     movff   0x013, 0xfea     	MOVFF	r0x13, FSR0H
001624   ffea
001626   c00e     movff   0x00e, 0xfee     	MOVFF	r0x0e, POSTINC0
001628   ffee
00162a   c00f     movff   0x00f, 0xfef     	MOVFF	r0x0f, INDF0
00162c   ffef
                                           ;	.line	357; stepperCon.c	if ((int16_t)pwm_lu[i] > max) max = pwm_lu[i] ;
00162e   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
001630   240c     addwf   0x0c, 0x0, 0x0   	ADDWF	r0x0c, W
001632   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001634   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
001636   200d     addwfc  0x0d, 0x0, 0x0   	ADDWFC	r0x0d, W
001638   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
00163a   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
00163c   ffe9
00163e   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
001640   ffea
001642   cfee     movff   0xfee, 0x00e     	MOVFF	POSTINC0, r0x0e
001644   f00e
001646   cfef     movff   0xfef, 0x00f     	MOVFF	INDF0, r0x0f
001648   f00f
00164a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00164c   0f80     addlw   0x80             	ADDLW	0x80
00164e   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
001650   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
001652   0f80     addlw   0x80             	ADDLW	0x80
001654   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
001656   e102     bnz     0x00165c         	BNZ	_00291_DS_
001658   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
00165a   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           _00291_DS_:
00165c   e20e     bc      0x00167a         	BC	_00266_DS_
00165e   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
001660   240c     addwf   0x0c, 0x0, 0x0   	ADDWF	r0x0c, W
001662   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001664   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
001666   200d     addwfc  0x0d, 0x0, 0x0   	ADDWFC	r0x0d, W
001668   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
00166a   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
00166c   ffe9
00166e   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
001670   ffea
001672   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
001674   f000
001676   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001678   f001
                                           _00266_DS_:
                                           ;	.line	358; stepperCon.c	if ((int16_t)pwm_lu[i] < min) min = pwm_lu[i] ;
00167a   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00167c   240a     addwf   0x0a, 0x0, 0x0   	ADDWF	r0x0a, W
00167e   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
001680   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
001682   200b     addwfc  0x0b, 0x0, 0x0   	ADDWFC	r0x0b, W
001684   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
001686   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
001688   ffe9
00168a   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
00168c   ffea
00168e   cfee     movff   0xfee, 0x00e     	MOVFF	POSTINC0, r0x0e
001690   f00e
001692   cfef     movff   0xfef, 0x00f     	MOVFF	INDF0, r0x0f
001694   f00f
001696   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
001698   0f80     addlw   0x80             	ADDLW	0x80
00169a   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
00169c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00169e   0f80     addlw   0x80             	ADDLW	0x80
0016a0   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
0016a2   e102     bnz     0x0016a8         	BNZ	_00292_DS_
0016a4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0016a6   5c0e     subwf   0x0e, 0x0, 0x0   	SUBWF	r0x0e, W
                                           _00292_DS_:
0016a8   e20e     bc      0x0016c6         	BC	_00271_DS_
0016aa   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0016ac   240a     addwf   0x0a, 0x0, 0x0   	ADDWF	r0x0a, W
0016ae   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
0016b0   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0016b2   200b     addwfc  0x0b, 0x0, 0x0   	ADDWFC	r0x0b, W
0016b4   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
0016b6   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
0016b8   ffe9
0016ba   c00f     movff   0x00f, 0xfea     	MOVFF	r0x0f, FSR0H
0016bc   ffea
0016be   cfee     movff   0xfee, 0x002     	MOVFF	POSTINC0, r0x02
0016c0   f002
0016c2   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
0016c4   f003
                                           _00271_DS_:
                                           ;	.line	353; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0016c6   0e02     movlw   0x02             	MOVLW	0x02
0016c8   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
0016ca   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0016cc   2a0b     incf    0x0b, 0x1, 0x0   	INCF	r0x0b, F
0016ce   0e02     movlw   0x02             	MOVLW	0x02
0016d0   260c     addwf   0x0c, 0x1, 0x0   	ADDWF	r0x0c, F
0016d2   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0016d4   2a0d     incf    0x0d, 0x1, 0x0   	INCF	r0x0d, F
0016d6   4a08     infsnz  0x08, 0x1, 0x0   	INFSNZ	r0x08, F
0016d8   2a09     incf    0x09, 0x1, 0x0   	INCF	r0x09, F
0016da   0e00     movlw   0x00             	MOVLW	0x00
0016dc   5c09     subwf   0x09, 0x0, 0x0   	SUBWF	r0x09, W
0016de   e102     bnz     0x0016e4         	BNZ	_00293_DS_
0016e0   0e40     movlw   0x40             	MOVLW	0x40
0016e2   5c08     subwf   0x08, 0x0, 0x0   	SUBWF	r0x08, W
                                           _00293_DS_:
0016e4   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0016e6   d733     bra     0x00154e         	BRA	_00270_DS_
                                           ;	.line	361; stepperCon.c	set_max_out(max + 10) ;
0016e8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0016ea   0f0a     addlw   0x0a             	ADDLW	0x0a
0016ec   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0016ee   0e00     movlw   0x00             	MOVLW	0x00
0016f0   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0016f2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0016f4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0016f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016f8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0016fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016fc   ec93     call    0x002326, 0x0    	CALL	_set_max_out
0016fe   f011
001700   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001702   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	362; stepperCon.c	set_min_out(min - 10) ;
001704   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001706   0ff6     addlw   0xf6             	ADDLW	0xf6
001708   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00170a   0eff     movlw   0xff             	MOVLW	0xff
00170c   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00170e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001710   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001712   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001714   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001716   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001718   ecb3     call    0x002d66, 0x0    	CALL	_set_min_out
00171a   f016
00171c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00171e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	364; stepperCon.c	max_current = max + 30 ;
001720   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001722   0f1e     addlw   0x1e             	ADDLW	0x1e
001724   010f     movlb   0xf              	BANKSEL	_max_current
001726   6f30     movwf   0x30, 0x1        	MOVWF	_max_current, B
001728   0e00     movlw   0x00             	MOVLW	0x00
00172a   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
00172c   010f     movlb   0xf              	BANKSEL	(_max_current + 1)
00172e   6f31     movwf   0x31, 0x1        	MOVWF	(_max_current + 1), B
                                           ;	.line	365; stepperCon.c	min_current = min - 30 ;
001730   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001732   0fe2     addlw   0xe2             	ADDLW	0xe2
001734   010f     movlb   0xf              	BANKSEL	_min_current
001736   6f32     movwf   0x32, 0x1        	MOVWF	_min_current, B
001738   0eff     movlw   0xff             	MOVLW	0xff
00173a   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00173c   010f     movlb   0xf              	BANKSEL	(_min_current + 1)
00173e   6f33     movwf   0x33, 0x1        	MOVWF	(_min_current + 1), B
                                           ;	.line	366; stepperCon.c	}
001740   cfe4     movff   0xfe4, 0x013     	MOVFF	PREINC1, r0x13
001742   f013
001744   cfe4     movff   0xfe4, 0x012     	MOVFF	PREINC1, r0x12
001746   f012
001748   cfe4     movff   0xfe4, 0x011     	MOVFF	PREINC1, r0x11
00174a   f011
00174c   cfe4     movff   0xfe4, 0x010     	MOVFF	PREINC1, r0x10
00174e   f010
001750   cfe4     movff   0xfe4, 0x00f     	MOVFF	PREINC1, r0x0f
001752   f00f
001754   cfe4     movff   0xfe4, 0x00e     	MOVFF	PREINC1, r0x0e
001756   f00e
001758   cfe4     movff   0xfe4, 0x00d     	MOVFF	PREINC1, r0x0d
00175a   f00d
00175c   cfe4     movff   0xfe4, 0x00c     	MOVFF	PREINC1, r0x0c
00175e   f00c
001760   cfe4     movff   0xfe4, 0x00b     	MOVFF	PREINC1, r0x0b
001762   f00b
001764   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
001766   f00a
001768   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
00176a   f009
00176c   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
00176e   f008
001770   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001772   f007
001774   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001776   f006
001778   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00177a   f005
00177c   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00177e   f004
001780   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001782   f003
001784   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001786   f002
001788   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00178a   f001
00178c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00178e   f000
001790   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001792   ffd9
001794   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__stop	code
                                           _stop:
                                           ;	.line	326; stepperCon.c	void stop(void) {
002d06   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d08   ffe5
002d0a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d0c   ffd9
                                           ;	.line	327; stepperCon.c	LATAbits.LATA4 = 0 ;            // Shut phases down
002d0e   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	328; stepperCon.c	LATAbits.LATA5 = 0 ; 
002d10   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
                                           ;	.line	330; stepperCon.c	idleInts() ;
002d12   ec5f     call    0x002cbe, 0x0    	CALL	_idleInts
002d14   f016
                                           ;	.line	332; stepperCon.c	ECCP2ASbits.CCP2ASE = 1    ;    // Shutdown PWM 
002d16   8e64     bsf     0x64, 0x7, 0x0   	BSF	_ECCP2ASbits, 7
                                           ;	.line	333; stepperCon.c	ECCP1ASbits.CCP1ASE = 1    ;    
002d18   8eb6     bsf     0xb6, 0x7, 0x0   	BSF	_ECCP1ASbits, 7
                                           ;	.line	335; stepperCon.c	ADCON0bits.GO = 0 ;
002d1a   92c2     bcf     0xc2, 0x1, 0x0   	BCF	_ADCON0bits, 1
                                           ;	.line	337; stepperCon.c	PORTDbits.RD2 = 0 ;             // Turn blue LED off
002d1c   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
002d1e   0102     movlb   0x2              	BANKSEL	_state
                                           ;	.line	338; stepperCon.c	state = IDLE ;
002d20   6b94     clrf    0x94, 0x1        	CLRF	_state, B
                                           ;	.line	339; stepperCon.c	}
002d22   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d24   ffd9
002d26   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__idleInts	code
                                           _idleInts:
                                           ;	.line	308; stepperCon.c	void idleInts(void) {
002cbe   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002cc0   ffe5
002cc2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002cc4   ffd9
                                           ;	.line	309; stepperCon.c	INTCONbits.INT0IE = 0 ;     // Disable 'step' interrupt
002cc6   98f2     bcf     0xf2, 0x4, 0x0   	BCF	_INTCONbits, 4
                                           ;	.line	310; stepperCon.c	INTCON3bits.INT2IE = 0 ;    // Disable 'dir' interrupt
002cc8   98f0     bcf     0xf0, 0x4, 0x0   	BCF	_INTCON3bits, 4
                                           ;	.line	312; stepperCon.c	PIE1bits.ADIE = 0 ;         // Disable ADC interrupt
002cca   9c9d     bcf     0x9d, 0x6, 0x0   	BCF	_PIE1bits, 6
                                           ;	.line	314; stepperCon.c	PIE2bits.C1IE = 0 ;         // Disable comparators int. 
002ccc   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           ;	.line	315; stepperCon.c	PIE2bits.C2IE = 0 ;
002cce   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           ;	.line	317; stepperCon.c	PIE1bits.SSP1IE = 1 ;       // Enable I2C interrupt
002cd0   869d     bsf     0x9d, 0x3, 0x0   	BSF	_PIE1bits, 3
                                           ;	.line	318; stepperCon.c	PIE2bits.BCL1IE = 1 ;       // Enable I2C collision detection interrupt
002cd2   86a0     bsf     0xa0, 0x3, 0x0   	BSF	_PIE2bits, 3
                                           ;	.line	320; stepperCon.c	SSP1CON1bits.SSPOV = 0 ;
002cd4   9cc6     bcf     0xc6, 0x6, 0x0   	BCF	_SSP1CON1bits, 6
                                           ;	.line	321; stepperCon.c	PIR1bits.SSP1IF = 0 ;
002cd6   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	322; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
002cd8   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
                                           ;	.line	323; stepperCon.c	SSP1CON1bits.SSPEN = 1 ;    // Enable I2C port
002cda   8ac6     bsf     0xc6, 0x5, 0x0   	BSF	_SSP1CON1bits, 5
                                           ;	.line	324; stepperCon.c	}
002cdc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002cde   ffd9
002ce0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__activeInts	code
                                           _activeInts:
                                           ;	.line	288; stepperCon.c	void activeInts(void) {
002bc2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002bc4   ffe5
002bc6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002bc8   ffd9
                                           ;	.line	289; stepperCon.c	PIE1bits.SSP1IE = 0 ;       // Disable I2C interrupt
002bca   969d     bcf     0x9d, 0x3, 0x0   	BCF	_PIE1bits, 3
                                           ;	.line	290; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;    // Disable I2C port
002bcc   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	291; stepperCon.c	PIE2bits.BCL1IE = 0 ;       // Disable I2C collision detection interrupt
002bce   96a0     bcf     0xa0, 0x3, 0x0   	BCF	_PIE2bits, 3
                                           ;	.line	294; stepperCon.c	if(PORTBbits.RB2) { 
002bd0   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
002bd2   d005     bra     0x002bde         	BRA	_00248_DS_
                                           ;	.line	295; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;
002bd4   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	296; stepperCon.c	dir = 1 ;
002bd6   0e01     movlw   0x01             	MOVLW	0x01
002bd8   0102     movlb   0x2              	BANKSEL	_dir
002bda   6f95     movwf   0x95, 0x1        	MOVWF	_dir, B
002bdc   d004     bra     0x002be6         	BRA	_00249_DS_
                                           _00248_DS_:
                                           ;	.line	299; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
002bde   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	300; stepperCon.c	dir = -1 ;
002be0   0eff     movlw   0xff             	MOVLW	0xff
002be2   0102     movlb   0x2              	BANKSEL	_dir
002be4   6f95     movwf   0x95, 0x1        	MOVWF	_dir, B
                                           _00249_DS_:
                                           ;	.line	303; stepperCon.c	INTCONbits.INT0IE = 1 ;     // Enable 'step' interrupt
002be6   88f2     bsf     0xf2, 0x4, 0x0   	BSF	_INTCONbits, 4
                                           ;	.line	304; stepperCon.c	INTCON3bits.INT2IE = 1 ;    // Enable 'dir' interrupt
002be8   88f0     bsf     0xf0, 0x4, 0x0   	BSF	_INTCON3bits, 4
                                           ;	.line	305; stepperCon.c	PIE1bits.ADIE = 1 ;         // Enable ADC interrupt
002bea   8c9d     bsf     0x9d, 0x6, 0x0   	BSF	_PIE1bits, 6
                                           ;	.line	306; stepperCon.c	}
002bec   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002bee   ffd9
002bf0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__i2cSetup	code
                                           _i2cSetup:
                                           ;	.line	273; stepperCon.c	void i2cSetup(void) {
002c4a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c4c   ffe5
002c4e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c50   ffd9
                                           ;	.line	274; stepperCon.c	TRISCbits.TRISC3 = 1 ;      // Set I2C pins as input
002c52   8694     bsf     0x94, 0x3, 0x0   	BSF	_TRISCbits, 3
                                           ;	.line	275; stepperCon.c	TRISCbits.TRISC4 = 1 ;
002c54   8894     bsf     0x94, 0x4, 0x0   	BSF	_TRISCbits, 4
                                           ;	.line	277; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;
002c56   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	278; stepperCon.c	SSP1CON2bits.GCEN = 1 ;     // Enable general call on address 0x00
002c58   8ec5     bsf     0xc5, 0x7, 0x0   	BSF	_SSP1CON2bits, 7
                                           ;	.line	279; stepperCon.c	SSP1CON2bits.SEN = 1 ;      // Enable clock stretching
002c5a   80c5     bsf     0xc5, 0x0, 0x0   	BSF	_SSP1CON2bits, 0
                                           ;	.line	280; stepperCon.c	SSP1ADD = i2c_address ;     // Set device I2C address
002c5c   c29c     movff   0x29c, 0xfc8     	MOVFF	_i2c_address, _SSP1ADD
002c5e   ffc8
002c60   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
                                           ;	.line	282; stepperCon.c	i2c_reg_addr = 0 ;
002c62   6b9a     clrf    0x9a, 0x1        	CLRF	_i2c_reg_addr, B
                                           ;	.line	284; stepperCon.c	SSP1CON1bits.SSPM = 0x6 ;   // I2C Slave mode, 7-bit address
002c64   50c6     movf    0xc6, 0x0, 0x0   	MOVF	_SSP1CON1bits, W
002c66   0bf0     andlw   0xf0             	ANDLW	0xf0
002c68   0906     iorlw   0x06             	IORLW	0x06
002c6a   6ec6     movwf   0xc6, 0x0        	MOVWF	_SSP1CON1bits
                                           ;	.line	285; stepperCon.c	}
002c6c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c6e   ffd9
002c70   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__lowInt	code
                                           _lowInt:
                                           ;	.line	212; stepperCon.c	static void lowInt(void) __interrupt(2) {
001c6a   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
001c6c   ffe5
001c6e   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
001c70   ffe5
001c72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c74   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
001c76   ffe5
001c78   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
001c7a   ffe5
001c7c   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
001c7e   ffe5
001c80   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
001c82   ffe5
001c84   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
001c86   ffe5
001c88   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
001c8a   ffe5
001c8c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001c8e   ffe5
001c90   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c92   ffd9
001c94   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001c96   ffe5
001c98   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001c9a   ffe5
                                           ;	.line	215; stepperCon.c	if (INTCON3bits.INT2IF) {
001c9c   a2f0     btfss   0xf0, 0x1, 0x0   	BTFSS	_INTCON3bits, 1
001c9e   d014     bra     0x001cc8         	BRA	_00178_DS_
                                           ;	.line	217; stepperCon.c	if(PORTBbits.RB2) {
001ca0   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
001ca2   d007     bra     0x001cb2         	BRA	_00175_DS_
                                           ;	.line	219; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;   
001ca4   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	220; stepperCon.c	dir = 1 ;
001ca6   0e01     movlw   0x01             	MOVLW	0x01
001ca8   0102     movlb   0x2              	BANKSEL	_dir
001caa   6f95     movwf   0x95, 0x1        	MOVWF	_dir, B
                                           ;	.line	221; stepperCon.c	skip = micro_steps ;
001cac   c297     movff   0x297, 0x296     	MOVFF	_micro_steps, _skip
001cae   f296
001cb0   d00a     bra     0x001cc6         	BRA	_00176_DS_
                                           _00175_DS_:
                                           ;	.line	225; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
001cb2   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	226; stepperCon.c	dir = -1 ;
001cb4   0eff     movlw   0xff             	MOVLW	0xff
001cb6   0102     movlb   0x2              	BANKSEL	_dir
001cb8   6f95     movwf   0x95, 0x1        	MOVWF	_dir, B
001cba   0102     movlb   0x2              	BANKSEL	_micro_steps
                                           ;	.line	227; stepperCon.c	skip = -micro_steps ;
001cbc   1d97     comf    0x97, 0x0, 0x1   	COMF	_micro_steps, W, B
001cbe   0102     movlb   0x2              	BANKSEL	_skip
001cc0   6f96     movwf   0x96, 0x1        	MOVWF	_skip, B
001cc2   0102     movlb   0x2              	BANKSEL	_skip
001cc4   2b96     incf    0x96, 0x1, 0x1   	INCF	_skip, F, B
                                           _00176_DS_:
                                           ;	.line	230; stepperCon.c	INTCON3bits.INT2IF = 0 ;    // clear 'dir' interrupt
001cc6   92f0     bcf     0xf0, 0x1, 0x0   	BCF	_INTCON3bits, 1
                                           _00178_DS_:
                                           ;	.line	234; stepperCon.c	if (PIR1bits.SSP1IF) {
001cc8   a69e     btfss   0x9e, 0x3, 0x0   	BTFSS	_PIR1bits, 3
001cca   d054     bra     0x001d74         	BRA	_00195_DS_
                                           ;	.line	235; stepperCon.c	if (SSP1STATbits.BF) i2c_buf = SSP1BUF ;    // Read data, clear BF
001ccc   a0c7     btfss   0xc7, 0x0, 0x0   	BTFSS	_SSP1STATbits, 0
001cce   d002     bra     0x001cd4         	BRA	_00180_DS_
001cd0   cfc9     movff   0xfc9, 0x298     	MOVFF	_SSP1BUF, _i2c_buf
001cd2   f298
                                           _00180_DS_:
                                           ;	.line	238; stepperCon.c	if (!SSP1STATbits.D) {
001cd4   bac7     btfsc   0xc7, 0x5, 0x0   	BTFSC	_SSP1STATbits, 5
001cd6   d014     bra     0x001d00         	BRA	_00190_DS_
001cd8   0102     movlb   0x2              	BANKSEL	_i2c_counter
                                           ;	.line	239; stepperCon.c	i2c_counter = 0 ;                       // Reset counter
001cda   6b99     clrf    0x99, 0x1        	CLRF	_i2c_counter, B
                                           ;	.line	240; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
001cdc   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
001cde   d03d     bra     0x001d5a         	BRA	_00191_DS_
                                           ;	.line	241; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
001ce0   c29a     movff   0x29a, 0x000     	MOVFF	_i2c_reg_addr, r0x00
001ce2   f000
001ce4   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
001ce6   2b9a     incf    0x9a, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001ce8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001cea   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001cec   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001cee   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001cf0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001cf2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001cf4   ffe9
001cf6   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001cf8   ffea
001cfa   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001cfc   ffc9
001cfe   d02d     bra     0x001d5a         	BRA	_00191_DS_
                                           _00190_DS_:
001d00   0102     movlb   0x2              	BANKSEL	_i2c_counter
                                           ;	.line	246; stepperCon.c	i2c_counter++ ;                         // Increment counter
001d02   2b99     incf    0x99, 0x1, 0x1   	INCF	_i2c_counter, F, B
                                           ;	.line	247; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
001d04   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
001d06   d010     bra     0x001d28         	BRA	_00187_DS_
                                           ;	.line	248; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
001d08   c29a     movff   0x29a, 0x000     	MOVFF	_i2c_reg_addr, r0x00
001d0a   f000
001d0c   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
001d0e   2b9a     incf    0x9a, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001d10   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001d12   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001d14   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001d16   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001d18   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001d1a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001d1c   ffe9
001d1e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001d20   ffea
001d22   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001d24   ffc9
001d26   d019     bra     0x001d5a         	BRA	_00191_DS_
                                           _00187_DS_:
001d28   0102     movlb   0x2              	BANKSEL	_i2c_counter
                                           ;	.line	251; stepperCon.c	if (i2c_counter == 1) {             // First byte is register
001d2a   5199     movf    0x99, 0x0, 0x1   	MOVF	_i2c_counter, W, B
001d2c   0a01     xorlw   0x01             	XORLW	0x01
001d2e   e103     bnz     0x001d36         	BNZ	_00184_DS_
                                           ;	.line	252; stepperCon.c	i2c_reg_addr = i2c_buf ;        // value
001d30   c298     movff   0x298, 0x29a     	MOVFF	_i2c_buf, _i2c_reg_addr
001d32   f29a
001d34   d012     bra     0x001d5a         	BRA	_00191_DS_
                                           _00184_DS_:
                                           ;	.line	255; stepperCon.c	i2c_regs[i2c_reg_addr++] = i2c_buf ; // write
001d36   c29a     movff   0x29a, 0x000     	MOVFF	_i2c_reg_addr, r0x00
001d38   f000
001d3a   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
001d3c   2b9a     incf    0x9a, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001d3e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001d40   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001d42   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001d44   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001d46   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001d48   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001d4a   ffe9
001d4c   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001d4e   ffea
001d50   c298     movff   0x298, 0xfef     	MOVFF	_i2c_buf, INDF0
001d52   ffef
                                           ;	.line	256; stepperCon.c	i2c_dirty = 1 ;                 // set I2C dirty flag
001d54   0e01     movlw   0x01             	MOVLW	0x01
001d56   0102     movlb   0x2              	BANKSEL	_i2c_dirty
001d58   6f9b     movwf   0x9b, 0x1        	MOVWF	_i2c_dirty, B
                                           _00191_DS_:
                                           ;	.line	261; stepperCon.c	i2c_reg_addr %= sizeof(i2c_regs) ;          // Prevent buffer overflow
001d5a   0e0b     movlw   0x0b             	MOVLW	0x0b
001d5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d5e   c29a     movff   0x29a, 0xfe5     	MOVFF	_i2c_reg_addr, POSTDEC1
001d60   ffe5
001d62   ec07     call    0x00280e, 0x0    	CALL	__moduchar
001d64   f014
001d66   0102     movlb   0x2              	BANKSEL	_i2c_reg_addr
001d68   6f9a     movwf   0x9a, 0x1        	MOVWF	_i2c_reg_addr, B
001d6a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001d6c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	263; stepperCon.c	PIR1bits.SSP1IF = 0 ;       // Clear interrupt
001d6e   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	264; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
001d70   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
001d72   d003     bra     0x001d7a         	BRA	_00197_DS_
                                           _00195_DS_:
                                           ;	.line	267; stepperCon.c	else if (PIR2bits.BCL1IF) {
001d74   a6a1     btfss   0xa1, 0x3, 0x0   	BTFSS	_PIR2bits, 3
001d76   d001     bra     0x001d7a         	BRA	_00197_DS_
                                           ;	.line	268; stepperCon.c	PIR2bits.BCL1IF = 0 ;       // Clear I2C collision interrupt
001d78   96a1     bcf     0xa1, 0x3, 0x0   	BCF	_PIR2bits, 3
                                           _00197_DS_:
                                           ;	.line	270; stepperCon.c	}
001d7a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001d7c   f001
001d7e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001d80   f000
001d82   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d84   ffd9
001d86   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
001d88   fffb
001d8a   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
001d8c   fffa
001d8e   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
001d90   ffea
001d92   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
001d94   ffe9
001d96   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
001d98   fff4
001d9a   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
001d9c   fff3
001d9e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001da0   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
001da2   ffe0
001da4   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
001da6   ffd8
001da8   0010     retfie  0x0              	RETFIE	

                                           ; ; Starting pCode block
                                           S_stepperCon__highInt	code
                                           _highInt:
                                           ;	.line	169; stepperCon.c	static void highInt(void) __interrupt(1) {
0020c4   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0020c6   ffe5
0020c8   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0020ca   ffe5
0020cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020ce   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0020d0   ffe5
0020d2   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0020d4   ffe5
0020d6   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0020d8   ffe5
0020da   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0020dc   ffe5
0020de   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0020e0   ffe5
0020e2   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0020e4   ffe5
0020e6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0020e8   ffe5
0020ea   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0020ec   ffd9
0020ee   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0020f0   ffe5
                                           ;	.line	171; stepperCon.c	if (PIR1bits.ADIF) {
0020f2   ac9e     btfss   0x9e, 0x6, 0x0   	BTFSS	_PIR1bits, 6
0020f4   d018     bra     0x002126         	BRA	_00111_DS_
0020f6   010f     movlb   0xf              	BANKSEL	_adc_wdt
                                           ;	.line	172; stepperCon.c	adc_wdt = 0 ;
0020f8   6b36     clrf    0x36, 0x1        	CLRF	_adc_wdt, B
0020fa   010f     movlb   0xf              	BANKSEL	(_adc_wdt + 1)
0020fc   6b37     clrf    0x37, 0x1        	CLRF	(_adc_wdt + 1), B
0020fe   0102     movlb   0x2              	BANKSEL	_state
                                           ;	.line	174; stepperCon.c	if (state != STEP) {
002100   5194     movf    0x94, 0x0, 0x1   	MOVF	_state, W, B
002102   0a06     xorlw   0x06             	XORLW	0x06
002104   e00f     bz      0x002124         	BZ	_00109_DS_
                                           ;	.line	175; stepperCon.c	if (ADCON0bits.CHS == 0b0001) state = CALC_PI_A ;
002106   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
002108   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
00210a   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
00210c   0b1f     andlw   0x1f             	ANDLW	0x1f
00210e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002110   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002112   0a01     xorlw   0x01             	XORLW	0x01
002114   e104     bnz     0x00211e         	BNZ	_00106_DS_
002116   0e03     movlw   0x03             	MOVLW	0x03
002118   0102     movlb   0x2              	BANKSEL	_state
00211a   6f94     movwf   0x94, 0x1        	MOVWF	_state, B
00211c   d003     bra     0x002124         	BRA	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	176; stepperCon.c	else state = CALC_PI_B ;
00211e   0e04     movlw   0x04             	MOVLW	0x04
002120   0102     movlb   0x2              	BANKSEL	_state
002122   6f94     movwf   0x94, 0x1        	MOVWF	_state, B
                                           _00109_DS_:
                                           ;	.line	179; stepperCon.c	PIR1bits.ADIF = 0 ;                     // Clear ADC interrupt
002124   9c9e     bcf     0x9e, 0x6, 0x0   	BCF	_PIR1bits, 6
                                           _00111_DS_:
                                           ;	.line	183; stepperCon.c	if (INTCONbits.INT0IF) {
002126   a2f2     btfss   0xf2, 0x1, 0x0   	BTFSS	_INTCONbits, 1
002128   d004     bra     0x002132         	BRA	_00113_DS_
                                           ;	.line	184; stepperCon.c	state = STEP ;
00212a   0e06     movlw   0x06             	MOVLW	0x06
00212c   0102     movlb   0x2              	BANKSEL	_state
00212e   6f94     movwf   0x94, 0x1        	MOVWF	_state, B
                                           ;	.line	185; stepperCon.c	INTCONbits.INT0IF = 0 ;     // clear 'step' interrupt
002130   92f2     bcf     0xf2, 0x1, 0x0   	BCF	_INTCONbits, 1
                                           _00113_DS_:
                                           ;	.line	189; stepperCon.c	if (PIR2bits.C1IF && PIE2bits.C1IE) {
002132   aca1     btfss   0xa1, 0x6, 0x0   	BTFSS	_PIR2bits, 6
002134   d00b     bra     0x00214c         	BRA	_00117_DS_
002136   aca0     btfss   0xa0, 0x6, 0x0   	BTFSS	_PIE2bits, 6
002138   d009     bra     0x00214c         	BRA	_00117_DS_
                                           ;	.line	190; stepperCon.c	if (CM1CON0bits.C1OUT) {
00213a   ac79     btfss   0x79, 0x6, 0x0   	BTFSS	_CM1CON0bits, 6
00213c   d006     bra     0x00214a         	BRA	_00115_DS_
                                           ;	.line	191; stepperCon.c	ADCON0bits.CHS = 0b0001 ; 
00213e   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
002140   0b83     andlw   0x83             	ANDLW	0x83
002142   0904     iorlw   0x04             	IORLW	0x04
002144   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
                                           ;	.line	192; stepperCon.c	ADCON0bits.GO = 1 ;
002146   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           ;	.line	193; stepperCon.c	PIE2bits.C1IE = 0 ;
002148   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           _00115_DS_:
                                           ;	.line	196; stepperCon.c	PIR2bits.C1IF = 0 ;        
00214a   9ca1     bcf     0xa1, 0x6, 0x0   	BCF	_PIR2bits, 6
                                           _00117_DS_:
                                           ;	.line	200; stepperCon.c	if (PIR2bits.C2IF && PIE2bits.C2IE) {
00214c   aaa1     btfss   0xa1, 0x5, 0x0   	BTFSS	_PIR2bits, 5
00214e   d00a     bra     0x002164         	BRA	_00124_DS_
002150   aaa0     btfss   0xa0, 0x5, 0x0   	BTFSS	_PIE2bits, 5
002152   d008     bra     0x002164         	BRA	_00124_DS_
                                           ;	.line	201; stepperCon.c	if (CM2CON0bits.C2OUT) {
002154   ac78     btfss   0x78, 0x6, 0x0   	BTFSS	_CM2CON0bits, 6
002156   d005     bra     0x002162         	BRA	_00120_DS_
                                           ;	.line	202; stepperCon.c	ADCON0bits.CHS = 0b0000 ; 
002158   50c2     movf    0xc2, 0x0, 0x0   	MOVF	_ADCON0bits, W
00215a   0b83     andlw   0x83             	ANDLW	0x83
00215c   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0bits
                                           ;	.line	203; stepperCon.c	ADCON0bits.GO = 1 ;
00215e   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           ;	.line	204; stepperCon.c	PIE2bits.C2IE = 0 ;
002160   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           _00120_DS_:
                                           ;	.line	207; stepperCon.c	PIR2bits.C2IF = 0 ;        
002162   9aa1     bcf     0xa1, 0x5, 0x0   	BCF	_PIR2bits, 5
                                           _00124_DS_:
                                           ;	.line	209; stepperCon.c	}
002164   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002166   f000
002168   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00216a   ffd9
00216c   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
00216e   fffb
002170   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
002172   fffa
002174   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
002176   ffea
002178   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
00217a   ffe9
00217c   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
00217e   fff4
002180   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
002182   fff3
002184   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002186   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
002188   ffe0
00218a   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
00218c   ffd8
00218e   0010     retfie  0x0              	RETFIE	



                                           ; Statistics:
                                           ; code size:	 3368 (0x0d28) bytes ( 2.57%)
                                           ;           	 1684 (0x0694) words
                                           ; udata size:	  182 (0x00b6) bytes ( 4.95%)
                                           ; access size:	   20 (0x0014) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.2 #10526 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_ioSetup
                                           	global	_pwmSetup
                                           	global	_compsSetup
                                           	global	_intSetup
                                           	global	_adc_setup
                                           	global	_resetCheck

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_sc_setup__resetCheck	code
                                           _resetCheck:
                                           ;	.line	200; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void resetCheck(void) {
002492   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002494   ffe5
002496   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002498   ffd9
00249a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00249c   ffe5
00249e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0024a0   ffe5
                                           ;	.line	204; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(!RCONbits.TO || !RCONbits.PD || !RCONbits.BOR) {
0024a2   a6d0     btfss   0xd0, 0x3, 0x0   	BTFSS	_RCONbits, 3
0024a4   d004     bra     0x0024ae         	BRA	_00133_DS_
0024a6   a4d0     btfss   0xd0, 0x2, 0x0   	BTFSS	_RCONbits, 2
0024a8   d002     bra     0x0024ae         	BRA	_00133_DS_
0024aa   b0d0     btfsc   0xd0, 0x0, 0x0   	BTFSC	_RCONbits, 0
0024ac   d007     bra     0x0024bc         	BRA	_00134_DS_
                                           _00133_DS_:
                                           ;	.line	206; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.TO = 1 ;
0024ae   86d0     bsf     0xd0, 0x3, 0x0   	BSF	_RCONbits, 3
                                           ;	.line	207; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.PD = 1 ;
0024b0   84d0     bsf     0xd0, 0x2, 0x0   	BSF	_RCONbits, 2
                                           ;	.line	208; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.BOR = 0 ;
0024b2   90d0     bcf     0xd0, 0x0, 0x0   	BCF	_RCONbits, 0
                                           ;	.line	209; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.POR = 0 ;
0024b4   92d0     bcf     0xd0, 0x1, 0x0   	BCF	_RCONbits, 1
                                           ;	.line	211; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
0024b6   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	212; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
0024b8   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           _00131_DS_:
                                           ;	.line	214; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(1) ; 
0024ba   d7ff     bra     0x0024ba         	BRA	_00131_DS_
                                           _00134_DS_:
                                           ;	.line	218; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(STKPTRbits.STKFUL || STKPTRbits.STKUNF) {
0024bc   befc     btfsc   0xfc, 0x7, 0x0   	BTFSC	_STKPTRbits, 7
0024be   d002     bra     0x0024c4         	BRA	_00145_DS_
0024c0   acfc     btfss   0xfc, 0x6, 0x0   	BTFSS	_STKPTRbits, 6
0024c2   d031     bra     0x002526         	BRA	_00148_DS_
                                           _00145_DS_:
                                           ;	.line	220; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKFUL = 0 ;
0024c4   9efc     bcf     0xfc, 0x7, 0x0   	BCF	_STKPTRbits, 7
                                           ;	.line	221; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKUNF = 0 ;
0024c6   9cfc     bcf     0xfc, 0x6, 0x0   	BCF	_STKPTRbits, 6
                                           ;	.line	223; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
0024c8   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	224; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
0024ca   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           ;	.line	227; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1CS = 0 ;      // Timer1 to Fosc/4
0024cc   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
0024ce   0b3f     andlw   0x3f             	ANDLW	0x3f
0024d0   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	228; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
0024d2   0e78     movlw   0x78             	MOVLW	0x78
0024d4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00143_DS_:
                                           ;	.line	231; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 0 ;
0024d6   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	232; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR1bits.TMR1IF = 0 ;
0024d8   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	233; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.T1CKPS = 3 ;      // Timer1 1:8 prescale
0024da   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
0024dc   0bcf     andlw   0xcf             	ANDLW	0xcf
0024de   0930     iorlw   0x30             	IORLW	0x30
0024e0   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	234; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1H = TMR_10MS >> 8 ;
0024e2   0eb1     movlw   0xb1             	MOVLW	0xb1
0024e4   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	235; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1L = TMR_10MS ;
0024e6   0edf     movlw   0xdf             	MOVLW	0xdf
0024e8   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	236; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 1 ;
0024ea   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00137_DS_:
                                           ;	.line	238; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(!PIR1bits.TMR1IF) ;
0024ec   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
0024ee   d7fe     bra     0x0024ec         	BRA	_00137_DS_
                                           ;	.line	240; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if (--i == 0) {
0024f0   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
0024f2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0024f4   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
0024f6   f000
0024f8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0024fa   e1ed     bnz     0x0024d6         	BNZ	_00143_DS_
                                           ;	.line	241; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC5 = !LATCbits.LATC5 ;
0024fc   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0024fe   ba8b     btfsc   0x8b, 0x5, 0x0   	BTFSC	_LATCbits, 5
002500   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
002502   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002504   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
002506   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
002508   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00250a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00250c   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
00250e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002510   0b01     andlw   0x01             	ANDLW	0x01
002512   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
002514   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
002516   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
002518   508b     movf    0x8b, 0x0, 0x0   	MOVF	_LATCbits, W
00251a   0bdf     andlw   0xdf             	ANDLW	0xdf
00251c   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00251e   6e8b     movwf   0x8b, 0x0        	MOVWF	_LATCbits
                                           ;	.line	242; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
002520   0e78     movlw   0x78             	MOVLW	0x78
002522   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002524   d7d8     bra     0x0024d6         	BRA	_00143_DS_
                                           _00148_DS_:
                                           ;	.line	246; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002526   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002528   f001
00252a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00252c   f000
00252e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002530   ffd9
002532   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__adc_setup	code
                                           _adc_setup:
                                           ;	.line	177; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void adc_setup(void) {
002b0c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b0e   ffe5
002b10   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b12   ffd9
                                           ;	.line	178; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON0bits.ADON = 0 ;      // ADC Off
002b14   90c2     bcf     0xc2, 0x0, 0x0   	BCF	_ADCON0bits, 0
                                           ;	.line	180; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON2bits.ADCS = 0b110 ;  // ADC clock = Fosc/64 = 1us
002b16   50c0     movf    0xc0, 0x0, 0x0   	MOVF	_ADCON2bits, W
002b18   0bf8     andlw   0xf8             	ANDLW	0xf8
002b1a   0906     iorlw   0x06             	IORLW	0x06
002b1c   6ec0     movwf   0xc0, 0x0        	MOVWF	_ADCON2bits
                                           ;	.line	181; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON2bits.ACQT = 0b101 ;  // 12 Tad acquisition time
002b1e   50c0     movf    0xc0, 0x0, 0x0   	MOVF	_ADCON2bits, W
002b20   0bc7     andlw   0xc7             	ANDLW	0xc7
002b22   0928     iorlw   0x28             	IORLW	0x28
002b24   6ec0     movwf   0xc0, 0x0        	MOVWF	_ADCON2bits
                                           ;	.line	182; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON2bits.ADFM = 1 ; 
002b26   8ec0     bsf     0xc0, 0x7, 0x0   	BSF	_ADCON2bits, 7
                                           ;	.line	184; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON1bits.PVCFG = 0b00 ;  // Pos. Ref. voltage = AVdd
002b28   50c1     movf    0xc1, 0x0, 0x0   	MOVF	_ADCON1bits, W
002b2a   0bf3     andlw   0xf3             	ANDLW	0xf3
002b2c   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1bits
                                           ;	.line	185; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON1bits.NVCFG = 0b00 ;  // Nrg. Ref. voltage = AVss
002b2e   50c1     movf    0xc1, 0x0, 0x0   	MOVF	_ADCON1bits, W
002b30   0bfc     andlw   0xfc             	ANDLW	0xfc
002b32   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1bits
                                           ;	.line	186; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON1bits.TRIGSEL = 1  ;  // Set GO trigger to CCP5
002b34   8ec1     bsf     0xc1, 0x7, 0x0   	BSF	_ADCON1bits, 7
                                           ;	.line	188; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA0 = 1 ;
002b36   8092     bsf     0x92, 0x0, 0x0   	BSF	_TRISAbits, 0
002b38   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	189; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA0 = 1 ;     // Enable RA0 as analog input
002b3a   8138     bsf     0x38, 0x0, 0x1   	BSF	_ANSELAbits, 0, B
                                           ;	.line	191; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA1 = 1 ;
002b3c   8292     bsf     0x92, 0x1, 0x0   	BSF	_TRISAbits, 1
002b3e   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	192; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA1 = 1 ;     // Enable RA1 as analog input
002b40   8338     bsf     0x38, 0x1, 0x1   	BSF	_ANSELAbits, 1, B
                                           ;	.line	194; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR1bits.ADIF = 0 ;        // Reset ADC interrupt 
002b42   9c9e     bcf     0x9e, 0x6, 0x0   	BCF	_PIR1bits, 6
                                           ;	.line	195; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIE1bits.ADIE = 0 ;        // Disable ADC interrupt
002b44   9c9d     bcf     0x9d, 0x6, 0x0   	BCF	_PIE1bits, 6
                                           ;	.line	197; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ADCON0bits.ADON = 1 ;      // ADC On
002b46   80c2     bsf     0xc2, 0x0, 0x0   	BSF	_ADCON0bits, 0
                                           ;	.line	198; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002b48   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b4a   ffd9
002b4c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__intSetup	code
                                           _intSetup:
                                           ;	.line	156; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void intSetup(void) {
002c72   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c74   ffe5
002c76   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c78   ffd9
                                           ;	.line	157; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 0 ;   // Disable interrupts
002c7a   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	158; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 0 ;
002c7c   9cf2     bcf     0xf2, 0x6, 0x0   	BCF	_INTCONbits, 6
                                           ;	.line	160; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.IPEN = 1 ;         // Enable interrupts priority
002c7e   8ed0     bsf     0xd0, 0x7, 0x0   	BSF	_RCONbits, 7
                                           ;	.line	162; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.RBPU = 1 ;      // Disable Port B pull-ups
002c80   8ef1     bsf     0xf1, 0x7, 0x0   	BSF	_INTCON2bits, 7
                                           ;	.line	163; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.INTEDG0 = 1 ;   // 'step' interrupt on rising edge
002c82   8cf1     bsf     0xf1, 0x6, 0x0   	BSF	_INTCON2bits, 6
                                           ;	.line	165; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON3bits.INT2IP = 0 ;    // Low priority to 'dir' interrupt
002c84   9ef0     bcf     0xf0, 0x7, 0x0   	BCF	_INTCON3bits, 7
                                           ;	.line	166; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.ADIP = 1 ;         // ADC High priority interrupt
002c86   8c9f     bsf     0x9f, 0x6, 0x0   	BSF	_IPR1bits, 6
                                           ;	.line	167; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.SSP1IP = 0 ;       // Low priority to I2C interrupt
002c88   969f     bcf     0x9f, 0x3, 0x0   	BCF	_IPR1bits, 3
                                           ;	.line	169; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C1IP = 1 ;         // Set comparators interrupts to high priority
002c8a   8ca2     bsf     0xa2, 0x6, 0x0   	BSF	_IPR2bits, 6
                                           ;	.line	170; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C2IP = 1 ;
002c8c   8aa2     bsf     0xa2, 0x5, 0x0   	BSF	_IPR2bits, 5
                                           ;	.line	172; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 1 ;   // Enable interrupts
002c8e   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	173; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 1 ;
002c90   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
                                           ;	.line	174; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002c92   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c94   ffd9
002c96   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__compsSetup	code
                                           _compsSetup:
                                           ;	.line	132; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void compsSetup(void) {
002b8a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b8c   ffe5
002b8e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b90   ffd9
                                           ;	.line	134; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1CH = 0b01 ;       // C12N1- input to C1-
002b92   5079     movf    0x79, 0x0, 0x0   	MOVF	_CM1CON0bits, W
002b94   0bfc     andlw   0xfc             	ANDLW	0xfc
002b96   0901     iorlw   0x01             	IORLW	0x01
002b98   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0bits
                                           ;	.line	135; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1R = 0 ;           // C1+ to RA3
002b9a   9479     bcf     0x79, 0x2, 0x0   	BCF	_CM1CON0bits, 2
                                           ;	.line	136; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C1RSEL = 0 ;        // Use DAC as Vref
002b9c   9a77     bcf     0x77, 0x5, 0x0   	BCF	_CM2CON1bits, 5
                                           ;	.line	137; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1POL = 1 ;         // Invert logic
002b9e   8879     bsf     0x79, 0x4, 0x0   	BSF	_CM1CON0bits, 4
                                           ;	.line	138; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1SP = 1 ;          // Normal power, high speed mode
002ba0   8679     bsf     0x79, 0x3, 0x0   	BSF	_CM1CON0bits, 3
                                           ;	.line	139; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C1HYS = 0 ;         // Enable hysteresis
002ba2   9677     bcf     0x77, 0x3, 0x0   	BCF	_CM2CON1bits, 3
                                           ;	.line	142; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2CH = 0b00 ;       // C12N0- input to C2-
002ba4   5078     movf    0x78, 0x0, 0x0   	MOVF	_CM2CON0bits, W
002ba6   0bfc     andlw   0xfc             	ANDLW	0xfc
002ba8   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0bits
                                           ;	.line	143; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2R = 0 ;           // C2+ to RA2
002baa   9478     bcf     0x78, 0x2, 0x0   	BCF	_CM2CON0bits, 2
                                           ;	.line	144; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C2RSEL = 0 ;        // Use DAC as Vref
002bac   9877     bcf     0x77, 0x4, 0x0   	BCF	_CM2CON1bits, 4
                                           ;	.line	145; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2POL = 1 ;         // Invert logic
002bae   8878     bsf     0x78, 0x4, 0x0   	BSF	_CM2CON0bits, 4
                                           ;	.line	146; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2SP = 1 ;          // Normal power, high speed mode
002bb0   8678     bsf     0x78, 0x3, 0x0   	BSF	_CM2CON0bits, 3
                                           ;	.line	147; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C2HYS = 0 ;         // Enable hysteresis
002bb2   9477     bcf     0x77, 0x2, 0x0   	BCF	_CM2CON1bits, 2
                                           ;	.line	149; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR2bits.C1IF = 0 ;             // Clear any pending interrupts 
002bb4   9ca1     bcf     0xa1, 0x6, 0x0   	BCF	_PIR2bits, 6
                                           ;	.line	150; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR2bits.C2IF = 0 ; 
002bb6   9aa1     bcf     0xa1, 0x5, 0x0   	BCF	_PIR2bits, 5
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0bits.C1ON = 1 ;          // Enable comparator 1
002bb8   8e79     bsf     0x79, 0x7, 0x0   	BSF	_CM1CON0bits, 7
                                           ;	.line	153; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0bits.C2ON = 1 ;          // Enable comparator 2
002bba   8e78     bsf     0x78, 0x7, 0x0   	BSF	_CM2CON0bits, 7
                                           ;	.line	154; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002bbc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002bbe   ffd9
002bc0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__pwmSetup	code
                                           _pwmSetup:
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void pwmSetup(uint8_t db_time) {
001b20   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001b22   ffe5
001b24   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001b26   ffd9
001b28   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001b2a   ffe5
001b2c   0e02     movlw   0x02             	MOVLW	0x02
001b2e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001b30   f000
                                           ;	.line	64; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC0 = 1 ;          // Disable port drivers for setup
001b32   8094     bsf     0x94, 0x0, 0x0   	BSF	_TRISCbits, 0
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC1 = 1 ;
001b34   8294     bsf     0x94, 0x1, 0x0   	BSF	_TRISCbits, 1
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC2 = 1 ;
001b36   8494     bsf     0x94, 0x2, 0x0   	BSF	_TRISCbits, 2
                                           ;	.line	67; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD5 = 1 ;
001b38   8a95     bsf     0x95, 0x5, 0x0   	BSF	_TRISDbits, 5
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 1 ;
001b3a   8295     bsf     0x95, 0x1, 0x0   	BSF	_TRISDbits, 1
                                           ;	.line	69; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 1 ;
001b3c   8496     bsf     0x96, 0x2, 0x0   	BSF	_TRISEbits, 2
001b3e   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	71; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C2TSEL = 0b10 ;    // Timer6 to ECCP2
001b40   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
001b42   0be7     andlw   0xe7             	ANDLW	0xe7
001b44   0910     iorlw   0x10             	IORLW	0x10
001b46   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
001b48   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
001b4a   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C1TSEL = 0b10 ;    // Timer6 to ECCP1  
001b4c   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
001b4e   0bfc     andlw   0xfc             	ANDLW	0xfc
001b50   0902     iorlw   0x02             	IORLW	0x02
001b52   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
001b54   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
001b56   010f     movlb   0xf              	BANKSEL	_CCPTMRS1bits
                                           ;	.line	73; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS1bits.C5TSEL = 0b01 ;    // Timer4 to CCP5
001b58   5148     movf    0x48, 0x0, 0x1   	MOVF	_CCPTMRS1bits, W, B
001b5a   0bf3     andlw   0xf3             	ANDLW	0xf3
001b5c   0904     iorlw   0x04             	IORLW	0x04
001b5e   010f     movlb   0xf              	BANKSEL	_CCPTMRS1bits
001b60   6f48     movwf   0x48, 0x1        	MOVWF	_CCPTMRS1bits, B
001b62   010f     movlb   0xf              	BANKSEL	_CCPTMRS1bits
                                           ;	.line	74; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS1bits.C4TSEL = 0b01 ;    // Timer4 to CCP4
001b64   5148     movf    0x48, 0x0, 0x1   	MOVF	_CCPTMRS1bits, W, B
001b66   0bfc     andlw   0xfc             	ANDLW	0xfc
001b68   0901     iorlw   0x01             	IORLW	0x01
001b6a   010f     movlb   0xf              	BANKSEL	_CCPTMRS1bits
001b6c   6f48     movwf   0x48, 0x1        	MOVWF	_CCPTMRS1bits, B
001b6e   010f     movlb   0xf              	BANKSEL	_T6CONbits
                                           ;	.line	76; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T6CONbits.TMR6ON = 0 ;          // Turn Timer6 off
001b70   954a     bcf     0x4a, 0x2, 0x1   	BCF	_T6CONbits, 2, B
                                           ;	.line	77; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PR6 = 0xff ;                    // Set Timer6 for 15.625kHz @64MHz, 10-bit res
001b72   0eff     movlw   0xff             	MOVLW	0xff
001b74   010f     movlb   0xf              	BANKSEL	_PR6
001b76   6f4b     movwf   0x4b, 0x1        	MOVWF	_PR6, B
001b78   010f     movlb   0xf              	BANKSEL	_T6CONbits
                                           ;	.line	78; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T6CONbits.T6CKPS = 0b01 ;       // Set prescaler to 1:4
001b7a   514a     movf    0x4a, 0x0, 0x1   	MOVF	_T6CONbits, W, B
001b7c   0bfc     andlw   0xfc             	ANDLW	0xfc
001b7e   0901     iorlw   0x01             	IORLW	0x01
001b80   010f     movlb   0xf              	BANKSEL	_T6CONbits
001b82   6f4a     movwf   0x4a, 0x1        	MOVWF	_T6CONbits, B
001b84   010f     movlb   0xf              	BANKSEL	_T4CONbits
                                           ;	.line	80; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T4CONbits.TMR4ON = 0 ;          // Turn Timer4 off
001b86   9551     bcf     0x51, 0x2, 0x1   	BCF	_T4CONbits, 2, B
                                           ;	.line	81; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PR4 = 0xff ;                    // Set Timer4 for 62.5kHz @64MHz, 10-bit res
001b88   0eff     movlw   0xff             	MOVLW	0xff
001b8a   010f     movlb   0xf              	BANKSEL	_PR4
001b8c   6f52     movwf   0x52, 0x1        	MOVWF	_PR4, B
001b8e   010f     movlb   0xf              	BANKSEL	_T4CONbits
                                           ;	.line	82; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T4CONbits.T4CKPS = 0b00 ;       // Set prescaler to 1:1
001b90   5151     movf    0x51, 0x0, 0x1   	MOVF	_T4CONbits, W, B
001b92   0bfc     andlw   0xfc             	ANDLW	0xfc
001b94   010f     movlb   0xf              	BANKSEL	_T4CONbits
001b96   6f51     movwf   0x51, 0x1        	MOVWF	_T4CONbits, B
                                           ;	.line	84; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.PSS2AC = 0b00  ;    // Pin A1 set to '0' at shutdown
001b98   5064     movf    0x64, 0x0, 0x0   	MOVF	_ECCP2ASbits, W
001b9a   0bf3     andlw   0xf3             	ANDLW	0xf3
001b9c   6e64     movwf   0x64, 0x0        	MOVWF	_ECCP2ASbits
                                           ;	.line	85; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.PSS2BD = 0b00  ;    // Pin A2 set to '0' at shutdown
001b9e   5064     movf    0x64, 0x0, 0x0   	MOVF	_ECCP2ASbits, W
001ba0   0bfc     andlw   0xfc             	ANDLW	0xfc
001ba2   6e64     movwf   0x64, 0x0        	MOVWF	_ECCP2ASbits
                                           ;	.line	86; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.PSS1AC = 0b00  ;    // Pin B1 set to '0' at shutdown
001ba4   50b6     movf    0xb6, 0x0, 0x0   	MOVF	_ECCP1ASbits, W
001ba6   0bf3     andlw   0xf3             	ANDLW	0xf3
001ba8   6eb6     movwf   0xb6, 0x0        	MOVWF	_ECCP1ASbits
                                           ;	.line	87; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.PSS1BD = 0b00  ;    // Pin B2 set to '0' at shutdown
001baa   50b6     movf    0xb6, 0x0, 0x0   	MOVF	_ECCP1ASbits, W
001bac   0bfc     andlw   0xfc             	ANDLW	0xfc
001bae   6eb6     movwf   0xb6, 0x0        	MOVWF	_ECCP1ASbits
                                           ;	.line	89; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.CCP2AS = 0x00  ;    // Disable auto-shutdown
001bb0   5064     movf    0x64, 0x0, 0x0   	MOVF	_ECCP2ASbits, W
001bb2   0b8f     andlw   0x8f             	ANDLW	0x8f
001bb4   6e64     movwf   0x64, 0x0        	MOVWF	_ECCP2ASbits
                                           ;	.line	90; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.CCP1AS = 0x00  ;    
001bb6   50b6     movf    0xb6, 0x0, 0x0   	MOVF	_ECCP1ASbits, W
001bb8   0b8f     andlw   0x8f             	ANDLW	0x8f
001bba   6eb6     movwf   0xb6, 0x0        	MOVWF	_ECCP1ASbits
                                           ;	.line	92; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.CCP2ASE = 1    ;    // Force shutdown
001bbc   8e64     bsf     0x64, 0x7, 0x0   	BSF	_ECCP2ASbits, 7
                                           ;	.line	93; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.CCP1ASE = 1    ;    
001bbe   8eb6     bsf     0xb6, 0x7, 0x0   	BSF	_ECCP1ASbits, 7
                                           ;	.line	95; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.P2M = 0b10 ;
001bc0   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
001bc2   0b3f     andlw   0x3f             	ANDLW	0x3f
001bc4   0980     iorlw   0x80             	IORLW	0x80
001bc6   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	96; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.CCP2M = 0b1111 ;    // Phase A Half-bridge mode
001bc8   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
001bca   0bf0     andlw   0xf0             	ANDLW	0xf0
001bcc   090f     iorlw   0x0f             	IORLW	0x0f
001bce   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	97; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.P1M = 0b10 ;
001bd0   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
001bd2   0b3f     andlw   0x3f             	ANDLW	0x3f
001bd4   0980     iorlw   0x80             	IORLW	0x80
001bd6   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	98; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.CCP1M = 0b1111 ;    // Phase B Half-bridge mode
001bd8   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
001bda   0bf0     andlw   0xf0             	ANDLW	0xf0
001bdc   090f     iorlw   0x0f             	IORLW	0x0f
001bde   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
001be0   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
                                           ;	.line	100; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP5CONbits.CCP5M = 0b1100 ;    // A Ref PWM
001be2   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
001be4   0bf0     andlw   0xf0             	ANDLW	0xf0
001be6   090c     iorlw   0x0c             	IORLW	0x0c
001be8   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
001bea   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
001bec   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
                                           ;	.line	101; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP4CONbits.CCP4M = 0b1100 ;    // B Ref PWM
001bee   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
001bf0   0bf0     andlw   0xf0             	ANDLW	0xf0
001bf2   090c     iorlw   0x0c             	IORLW	0x0c
001bf4   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
001bf6   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	103; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PWM2CONbits.P2DC = db_time ;    // 16 * 4 * Tosc = 1us dead-band
001bf8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001bfa   0b7f     andlw   0x7f             	ANDLW	0x7f
001bfc   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001bfe   5065     movf    0x65, 0x0, 0x0   	MOVF	_PWM2CONbits, W
001c00   0b80     andlw   0x80             	ANDLW	0x80
001c02   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
001c04   6e65     movwf   0x65, 0x0        	MOVWF	_PWM2CONbits
                                           ;	.line	104; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PWM1CONbits.P1DC = db_time ; 
001c06   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c08   0b7f     andlw   0x7f             	ANDLW	0x7f
001c0a   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001c0c   50b7     movf    0xb7, 0x0, 0x0   	MOVF	_PWM1CONbits, W
001c0e   0b80     andlw   0x80             	ANDLW	0x80
001c10   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
001c12   6eb7     movwf   0xb7, 0x0        	MOVWF	_PWM1CONbits
                                           ;	.line	106; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC0 = 0 ;          // Enable port drivers
001c14   9094     bcf     0x94, 0x0, 0x0   	BCF	_TRISCbits, 0
                                           ;	.line	107; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC1 = 0 ;
001c16   9294     bcf     0x94, 0x1, 0x0   	BCF	_TRISCbits, 1
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.TRISC2 = 0 ;
001c18   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
                                           ;	.line	109; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD5 = 0 ;
001c1a   9a95     bcf     0x95, 0x5, 0x0   	BCF	_TRISDbits, 5
                                           ;	.line	110; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 0 ;
001c1c   9295     bcf     0x95, 0x1, 0x0   	BCF	_TRISDbits, 1
                                           ;	.line	111; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 0 ;
001c1e   9496     bcf     0x96, 0x2, 0x0   	BCF	_TRISEbits, 2
                                           ;	.line	113; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPR2L = 128 ;
001c20   0e80     movlw   0x80             	MOVLW	0x80
001c22   6e67     movwf   0x67, 0x0        	MOVWF	_CCPR2L
                                           ;	.line	114; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.DC2B = 0 ;
001c24   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
001c26   0bcf     andlw   0xcf             	ANDLW	0xcf
001c28   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	116; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPR1L = 128 ;
001c2a   0e80     movlw   0x80             	MOVLW	0x80
001c2c   6ebe     movwf   0xbe, 0x0        	MOVWF	_CCPR1L
                                           ;	.line	117; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.DC1B = 0 ;
001c2e   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
001c30   0bcf     andlw   0xcf             	ANDLW	0xcf
001c32   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	119; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPR5L = 32 ;
001c34   0e20     movlw   0x20             	MOVLW	0x20
001c36   010f     movlb   0xf              	BANKSEL	_CCPR5L
001c38   6f55     movwf   0x55, 0x1        	MOVWF	_CCPR5L, B
001c3a   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
                                           ;	.line	120; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP5CONbits.DC5B = 0 ;
001c3c   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
001c3e   0bcf     andlw   0xcf             	ANDLW	0xcf
001c40   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
001c42   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ;	.line	122; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPR4L = 32 ;
001c44   0e20     movlw   0x20             	MOVLW	0x20
001c46   010f     movlb   0xf              	BANKSEL	_CCPR4L
001c48   6f58     movwf   0x58, 0x1        	MOVWF	_CCPR4L, B
001c4a   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
                                           ;	.line	123; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP4CONbits.DC4B = 0 ;
001c4c   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
001c4e   0bcf     andlw   0xcf             	ANDLW	0xcf
001c50   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
001c52   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
001c54   010f     movlb   0xf              	BANKSEL	_T6CONbits
                                           ;	.line	125; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T6CONbits.TMR6ON = 1 ;          // Start PWM timer
001c56   854a     bsf     0x4a, 0x2, 0x1   	BSF	_T6CONbits, 2, B
001c58   010f     movlb   0xf              	BANKSEL	_T4CONbits
                                           ;	.line	126; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T4CONbits.TMR4ON = 1 ;          // Start PWM timer
001c5a   8551     bsf     0x51, 0x2, 0x1   	BSF	_T4CONbits, 2, B
                                           ;	.line	128; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP2ASbits.CCP2ASE = 0    ;    // Enable PWM
001c5c   9e64     bcf     0x64, 0x7, 0x0   	BCF	_ECCP2ASbits, 7
                                           ;	.line	129; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ECCP1ASbits.CCP1ASE = 0    ;    
001c5e   9eb6     bcf     0xb6, 0x7, 0x0   	BCF	_ECCP1ASbits, 7
                                           ;	.line	130; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
001c60   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001c62   f000
001c64   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001c66   ffd9
001c68   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__ioSetup	code
                                           _ioSetup:
                                           ;	.line	31; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void ioSetup(void) {
002b4e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b50   ffe5
002b52   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b54   ffd9
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB4 = 0 ;     // Start with a cleared 'fault' signal
002b56   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	33; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 0 ;
002b58   9881     bcf     0x81, 0x4, 0x0   	BCF	_PORTBbits, 4
002b5a   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD2 = 0 ;
002b5c   953b     bcf     0x3b, 0x2, 0x1   	BCF	_ANSELDbits, 2, B
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.RD2 = 0 ;     // Start with blue LED off
002b5e   9495     bcf     0x95, 0x2, 0x0   	BCF	_TRISDbits, 2
                                           ;	.line	37; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTDbits.RD2 = 0 ;
002b60   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
002b62   010f     movlb   0xf              	BANKSEL	_ANSELC
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELC = 0x00 ;         // Disable Port-C as analog input
002b64   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC5 = 0 ;     // Start with red LED off
002b66   9a94     bcf     0x94, 0x5, 0x0   	BCF	_TRISCbits, 5
                                           ;	.line	42; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 0 ;
002b68   9a82     bcf     0x82, 0x5, 0x0   	BCF	_PORTCbits, 5
                                           ;	.line	44; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA4 = 0 ;
002b6a   9892     bcf     0x92, 0x4, 0x0   	BCF	_TRISAbits, 4
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA4 = 0 ;
002b6c   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
002b6e   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	47; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA5 = 0 ;
002b70   9b38     bcf     0x38, 0x5, 0x1   	BCF	_ANSELAbits, 5, B
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA5 = 0 ;
002b72   9a92     bcf     0x92, 0x5, 0x0   	BCF	_TRISAbits, 5
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA5 = 0 ;
002b74   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
002b76   010f     movlb   0xf              	BANKSEL	_ANSELB
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELB = 0x00 ;         // Disable port B analog input
002b78   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
002b7a   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD5 = 0 ;  
002b7c   9b3b     bcf     0x3b, 0x5, 0x1   	BCF	_ANSELDbits, 5, B
                                           ;	.line	55; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB0 = 1 ;     // 'step', 'dir' and 'enable' as inputs
002b7e   8093     bsf     0x93, 0x0, 0x0   	BSF	_TRISBbits, 0
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB2 = 1 ;
002b80   8493     bsf     0x93, 0x2, 0x0   	BSF	_TRISBbits, 2
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB3 = 1 ;
002b82   8693     bsf     0x93, 0x3, 0x0   	BSF	_TRISBbits, 3
                                           ;	.line	58; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002b84   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b86   ffd9
002b88   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  712 (0x02c8) bytes ( 0.54%)
                                           ;           	  356 (0x0164) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.2 #10526 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_read_regs
                                           	global	_store_regs

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_registers__store_regs	code
                                           _store_regs:
                                           ;	.line	43; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void store_regs(uint8_t * i2c_regs, uint8_t num_regs) {
002190   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002192   ffe5
002194   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002196   ffd9
002198   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00219a   ffe5
00219c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00219e   ffe5
0021a0   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0021a2   ffe5
0021a4   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0021a6   ffe5
0021a8   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0021aa   ffe5
0021ac   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0021ae   ffe5
0021b0   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0021b2   ffe5
0021b4   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0021b6   ffe5
0021b8   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0021ba   ffe5
0021bc   0e02     movlw   0x02             	MOVLW	0x02
0021be   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0021c0   f000
0021c2   0e03     movlw   0x03             	MOVLW	0x03
0021c4   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0021c6   f001
0021c8   0e04     movlw   0x04             	MOVLW	0x04
0021ca   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0021cc   f002
0021ce   0e05     movlw   0x05             	MOVLW	0x05
0021d0   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0021d2   f003
                                           ;	.line	46; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
0021d4   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
0021d6   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00129_DS_:
0021d8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0021da   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
0021dc   e22a     bc      0x002232         	BC	_00131_DS_
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ; 
0021de   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
0021e0   ffa9
                                           ;	.line	50; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
0021e2   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
0021e4   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	52; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
0021e6   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	val = EEDATA ;
0021e8   cfa8     movff   0xfa8, 0x005     	MOVFF	_EEDATA, r0x05
0021ea   f005
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	if (val != i2c_regs[i]) {
0021ec   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0021ee   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0021f0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0021f2   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0021f4   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0021f6   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0021f8   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0021fa   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0021fc   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0021fe   c006     movff   0x006, 0xfe9     	MOVFF	r0x06, FSR0L
002200   ffe9
002202   c007     movff   0x007, 0xff3     	MOVFF	r0x07, PRODL
002204   fff3
002206   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
002208   ec94     call    0x002d28, 0x0    	CALL	__gptrget1
00220a   f016
00220c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00220e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
002210   1806     xorwf   0x06, 0x0, 0x0   	XORWF	r0x06, W
002212   e00d     bz      0x00222e         	BZ	_00130_DS_
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEDATA = i2c_regs[i] ;      // Prepare data
002214   c006     movff   0x006, 0xfa8     	MOVFF	r0x06, _EEDATA
002216   ffa8
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
002218   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
00221a   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 1 ;       // Allow write cycle
00221c   84a6     bsf     0xa6, 0x2, 0x0   	BSF	_EECON1bits, 2
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 0 ;        // Disable interrupts
00221e   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0x55 ;             // "magic" sequence for write
002220   0e55     movlw   0x55             	MOVLW	0x55
002222   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0xaa ;
002224   0eaa     movlw   0xaa             	MOVLW	0xaa
002226   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WR = 1 ;         // Initiate write
002228   82a6     bsf     0xa6, 0x1, 0x0   	BSF	_EECON1bits, 1
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 1 ;        // Enable interrupts
00222a   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 0 ;       // Prevent write cycle
00222c   94a6     bcf     0xa6, 0x2, 0x0   	BCF	_EECON1bits, 2
                                           _00130_DS_:
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
00222e   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
002230   d7d3     bra     0x0021d8         	BRA	_00129_DS_
                                           _00131_DS_:
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
002232   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
002234   f008
002236   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002238   f007
00223a   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
00223c   f006
00223e   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002240   f005
002242   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002244   f004
002246   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002248   f003
00224a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00224c   f002
00224e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002250   f001
002252   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002254   f000
002256   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002258   ffd9
00225a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_registers__read_regs	code
                                           _read_regs:
                                           ;	.line	29; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void read_regs(uint8_t * i2c_regs, uint8_t num_regs) {
002534   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002536   ffe5
002538   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00253a   ffd9
00253c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00253e   ffe5
002540   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002542   ffe5
002544   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002546   ffe5
002548   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00254a   ffe5
00254c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00254e   ffe5
002550   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002552   ffe5
002554   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002556   ffe5
002558   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00255a   ffe5
00255c   0e02     movlw   0x02             	MOVLW	0x02
00255e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002560   f000
002562   0e03     movlw   0x03             	MOVLW	0x03
002564   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002566   f001
002568   0e04     movlw   0x04             	MOVLW	0x04
00256a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00256c   f002
00256e   0e05     movlw   0x05             	MOVLW	0x05
002570   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002572   f003
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
002574   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
002576   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00107_DS_:
002578   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00257a   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
00257c   e219     bc      0x0025b0         	BC	_00109_DS_
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ;              // Read I2C address from 00 location
00257e   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
002580   ffa9
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
002582   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	37; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
002584   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
002586   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	i2c_regs[i] = EEDATA ;
002588   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00258a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00258c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00258e   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002590   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002592   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002594   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002596   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002598   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00259a   cfa8     movff   0xfa8, 0xfe5     	MOVFF	_EEDATA, POSTDEC1
00259c   ffe5
00259e   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0025a0   ffe9
0025a2   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0025a4   fff3
0025a6   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0025a8   ecd9     call    0x002db2, 0x0    	CALL	__gptrput1
0025aa   f016
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
0025ac   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0025ae   d7e4     bra     0x002578         	BRA	_00107_DS_
                                           _00109_DS_:
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
0025b0   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0025b2   f007
0025b4   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0025b6   f006
0025b8   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0025ba   f005
0025bc   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0025be   f004
0025c0   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0025c2   f003
0025c4   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0025c6   f002
0025c8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0025ca   f001
0025cc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0025ce   f000
0025d0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0025d2   ffd9
0025d4   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  366 (0x016e) bytes ( 0.28%)
                                           ;           	  183 (0x00b7) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    9 (0x0009) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.7.2 #10526 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_mult_uint8
                                           	global	_mult_int8
                                           	global	_mult_uint16
                                           	global	_mult_int16
                                           	global	_set_max_out
                                           	global	_set_min_out
                                           	global	_init_result
                                           	global	_calc_pi
                                           	global	_a16_
                                           	global	_res_
                                           	global	__max_out
                                           	global	__min_out
                                           	global	__integ_sat

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput2
                                           	extern	__gptrget2
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1


                                           bank0	udata
                                           _a_	res	1
                                           _b_	res	1
                                           _a16_	res	2
                                           _b16_	res	2
                                           _res_	res	4

                                           udata_pi_controller_0	udata
                                           __max_out	res	2

                                           udata_pi_controller_1	udata
                                           __integ_sat	res	2

                                           udata_pi_controller_2	udata
                                           __min_out	res	2

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_pi_controller__calc_pi	code
                                           _calc_pi:
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	void calc_pi(pi_result_t * result, int16_t measured, int16_t setpoint) {
0005fa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0005fc   ffe5
0005fe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000600   ffd9
000602   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000604   ffe5
000606   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000608   ffe5
00060a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00060c   ffe5
00060e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000610   ffe5
000612   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000614   ffe5
000616   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000618   ffe5
00061a   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00061c   ffe5
00061e   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
000620   ffe5
000622   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
000624   ffe5
000626   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
000628   ffe5
00062a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00062c   ffe5
00062e   c00b     movff   0x00b, 0xfe5     	MOVFF	r0x0b, POSTDEC1
000630   ffe5
000632   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
000634   ffe5
000636   c00d     movff   0x00d, 0xfe5     	MOVFF	r0x0d, POSTDEC1
000638   ffe5
00063a   c00e     movff   0x00e, 0xfe5     	MOVFF	r0x0e, POSTDEC1
00063c   ffe5
00063e   c00f     movff   0x00f, 0xfe5     	MOVFF	r0x0f, POSTDEC1
000640   ffe5
000642   c010     movff   0x010, 0xfe5     	MOVFF	r0x10, POSTDEC1
000644   ffe5
000646   0e02     movlw   0x02             	MOVLW	0x02
000648   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00064a   f000
00064c   0e03     movlw   0x03             	MOVLW	0x03
00064e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000650   f001
000652   0e04     movlw   0x04             	MOVLW	0x04
000654   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
000656   f002
000658   0e05     movlw   0x05             	MOVLW	0x05
00065a   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
00065c   f003
00065e   0e06     movlw   0x06             	MOVLW	0x06
000660   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
000662   f004
000664   0e07     movlw   0x07             	MOVLW	0x07
000666   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
000668   f005
00066a   0e08     movlw   0x08             	MOVLW	0x08
00066c   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
00066e   f006
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	error = setpoint - measured ;
000670   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000672   5c05     subwf   0x05, 0x0, 0x0   	SUBWF	r0x05, W
000674   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000676   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000678   5806     subwfb  0x06, 0x0, 0x0   	SUBWFB	r0x06, W
00067a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
                                           ;	.line	58; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	output = mult_int16(result->kp, error) >> 4 ;
00067c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00067e   0f04     addlw   0x04             	ADDLW	0x04
000680   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000682   0e00     movlw   0x00             	MOVLW	0x00
000684   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
000686   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000688   0e00     movlw   0x00             	MOVLW	0x00
00068a   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
00068c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00068e   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
000690   ffe9
000692   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
000694   fff3
000696   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000698   ecf9     call    0x002bf2, 0x0    	CALL	__gptrget2
00069a   f015
00069c   0100     movlb   0x0              	BANKSEL	_a16_
00069e   6f19     movwf   0x19, 0x1        	MOVWF	_a16_, B
0006a0   cff3     movff   0xff3, 0x01a     	MOVFF	PRODL, (_a16_ + 1)
0006a2   f01a
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	b16_ = b ;
0006a4   c003     movff   0x003, 0x01b     	MOVFF	r0x03, _b16_
0006a6   f01b
0006a8   c004     movff   0x004, 0x01c     	MOVFF	r0x04, (_b16_ + 1)
0006aa   f01c
0006ac   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0006ae   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
0006b0   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
0006b2   f01e
0006b4   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
0006b6   f01d
0006b8   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0006ba   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
0006bc   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
0006be   f020
0006c0   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
0006c2   f01f
0006c4   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0006c6   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
0006c8   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
0006ca   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
0006cc   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
0006ce   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
0006d0   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
0006d2   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
0006d4   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0006d6   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
0006d8   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
0006da   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
0006dc   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
0006de   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
0006e0   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
0006e2   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
0006e4   ae1c     btfss   0x1c, 0x7, 0x0   	btfss	(_b16_ + 1), 7
0006e6   d004     bra     0x0006f0         	bra	$+10
0006e8   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0006ea   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0006ec   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0006ee   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
0006f0   ae1a     btfss   0x1a, 0x7, 0x0   	btfss	(_a16_ + 1), 7
0006f2   d004     bra     0x0006fc         	bra	$+10
0006f4   501b     movf    0x1b, 0x0, 0x0   	movf	_b16_, W
0006f6   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0006f8   501c     movf    0x1c, 0x0, 0x0   	movf	(_b16_ + 1), W
0006fa   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
                                           	
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
0006fc   c01d     movff   0x01d, 0x008     	MOVFF	_res_, r0x08
0006fe   f008
000700   c01e     movff   0x01e, 0x009     	MOVFF	(_res_ + 1), r0x09
000702   f009
000704   c01f     movff   0x01f, 0x00a     	MOVFF	(_res_ + 2), r0x0a
000706   f00a
000708   c020     movff   0x020, 0x00b     	MOVFF	(_res_ + 3), r0x0b
00070a   f00b
                                           ;	.line	58; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	output = mult_int16(result->kp, error) >> 4 ;
00070c   0ef0     movlw   0xf0             	MOVLW	0xf0
00070e   1608     andwf   0x08, 0x1, 0x0   	ANDWF	r0x08, F
000710   3a08     swapf   0x08, 0x1, 0x0   	SWAPF	r0x08, F
000712   3a09     swapf   0x09, 0x1, 0x0   	SWAPF	r0x09, F
000714   1409     andwf   0x09, 0x0, 0x0   	ANDWF	r0x09, W
000716   1a09     xorwf   0x09, 0x1, 0x0   	XORWF	r0x09, F
000718   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00071a   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00071c   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00071e   0bf0     andlw   0xf0             	ANDLW	0xf0
000720   1209     iorwf   0x09, 0x1, 0x0   	IORWF	r0x09, F
000722   0ef0     movlw   0xf0             	MOVLW	0xf0
000724   160a     andwf   0x0a, 0x1, 0x0   	ANDWF	r0x0a, F
000726   3a0a     swapf   0x0a, 0x1, 0x0   	SWAPF	r0x0a, F
000728   3a0b     swapf   0x0b, 0x1, 0x0   	SWAPF	r0x0b, F
00072a   140b     andwf   0x0b, 0x0, 0x0   	ANDWF	r0x0b, W
00072c   1a0b     xorwf   0x0b, 0x1, 0x0   	XORWF	r0x0b, F
00072e   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
000730   0ef0     movlw   0xf0             	MOVLW	0xf0
000732   b60b     btfsc   0x0b, 0x3, 0x0   	BTFSC	r0x0b, 3
000734   260b     addwf   0x0b, 0x1, 0x0   	ADDWF	r0x0b, F
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	if(result->kp != 0) {
000736   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
000738   ffe9
00073a   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
00073c   fff3
00073e   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000740   ecf9     call    0x002bf2, 0x0    	CALL	__gptrget2
000742   f015
000744   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000746   cff3     movff   0xff3, 0x006     	MOVFF	PRODL, r0x06
000748   f006
00074a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00074c   1006     iorwf   0x06, 0x0, 0x0   	IORWF	r0x06, W
00074e   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
000750   d0d4     bra     0x0008fa         	BRA	_00146_DS_
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->out_integ += mult_int16(result->ki, error) >> 9 ;
000752   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000754   0f02     addlw   0x02             	ADDLW	0x02
000756   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000758   0e00     movlw   0x00             	MOVLW	0x00
00075a   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
00075c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00075e   0e00     movlw   0x00             	MOVLW	0x00
000760   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
000762   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
000764   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
000766   ffe9
000768   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
00076a   fff3
00076c   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00076e   ecf9     call    0x002bf2, 0x0    	CALL	__gptrget2
000770   f015
000772   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
000774   cff3     movff   0xff3, 0x00d     	MOVFF	PRODL, r0x0d
000776   f00d
000778   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00077a   0f06     addlw   0x06             	ADDLW	0x06
00077c   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
00077e   0e00     movlw   0x00             	MOVLW	0x00
000780   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
000782   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
000784   0e00     movlw   0x00             	MOVLW	0x00
000786   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
000788   6e10     movwf   0x10, 0x0        	MOVWF	r0x10
00078a   c00e     movff   0x00e, 0xfe9     	MOVFF	r0x0e, FSR0L
00078c   ffe9
00078e   c00f     movff   0x00f, 0xff3     	MOVFF	r0x0f, PRODL
000790   fff3
000792   5010     movf    0x10, 0x0, 0x0   	MOVF	r0x10, W
000794   ecf9     call    0x002bf2, 0x0    	CALL	__gptrget2
000796   f015
000798   0100     movlb   0x0              	BANKSEL	_a16_
00079a   6f19     movwf   0x19, 0x1        	MOVWF	_a16_, B
00079c   cff3     movff   0xff3, 0x01a     	MOVFF	PRODL, (_a16_ + 1)
00079e   f01a
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	b16_ = b ;
0007a0   c003     movff   0x003, 0x01b     	MOVFF	r0x03, _b16_
0007a2   f01b
0007a4   c004     movff   0x004, 0x01c     	MOVFF	r0x04, (_b16_ + 1)
0007a6   f01c
0007a8   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0007aa   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
0007ac   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
0007ae   f01e
0007b0   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
0007b2   f01d
0007b4   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0007b6   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
0007b8   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
0007ba   f020
0007bc   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
0007be   f01f
0007c0   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0007c2   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
0007c4   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
0007c6   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
0007c8   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
0007ca   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
0007cc   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
0007ce   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
0007d0   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0007d2   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
0007d4   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
0007d6   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
0007d8   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
0007da   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
0007dc   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
0007de   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
0007e0   ae1c     btfss   0x1c, 0x7, 0x0   	btfss	(_b16_ + 1), 7
0007e2   d004     bra     0x0007ec         	bra	$+10
0007e4   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0007e6   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0007e8   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0007ea   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
0007ec   ae1a     btfss   0x1a, 0x7, 0x0   	btfss	(_a16_ + 1), 7
0007ee   d004     bra     0x0007f8         	bra	$+10
0007f0   501b     movf    0x1b, 0x0, 0x0   	movf	_b16_, W
0007f2   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0007f4   501c     movf    0x1c, 0x0, 0x0   	movf	(_b16_ + 1), W
0007f6   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
                                           	
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
0007f8   c01d     movff   0x01d, 0x003     	MOVFF	_res_, r0x03
0007fa   f003
0007fc   c01e     movff   0x01e, 0x004     	MOVFF	(_res_ + 1), r0x04
0007fe   f004
000800   c01f     movff   0x01f, 0x00e     	MOVFF	(_res_ + 2), r0x0e
000802   f00e
000804   c020     movff   0x020, 0x00f     	MOVFF	(_res_ + 3), r0x0f
000806   f00f
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->out_integ += mult_int16(result->ki, error) >> 9 ;
000808   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00080a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00080c   500e     movf    0x0e, 0x0, 0x0   	MOVF	r0x0e, W
00080e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000810   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
000812   6e0e     movwf   0x0e, 0x0        	MOVWF	r0x0e
000814   340f     rlcf    0x0f, 0x0, 0x0   	RLCF	r0x0f, W
000816   6a0f     clrf    0x0f, 0x0        	CLRF	r0x0f
000818   be0e     btfsc   0x0e, 0x7, 0x0   	BTFSC	r0x0e, 7
00081a   680f     setf    0x0f, 0x0        	SETF	r0x0f
00081c   320e     rrcf    0x0e, 0x1, 0x0   	RRCF	r0x0e, F
00081e   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000820   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
000822   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000824   260c     addwf   0x0c, 0x1, 0x0   	ADDWF	r0x0c, F
000826   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000828   220d     addwfc  0x0d, 0x1, 0x0   	ADDWFC	r0x0d, F
00082a   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
00082c   ffe5
00082e   c00d     movff   0x00d, 0xff4     	MOVFF	r0x0d, PRODH
000830   fff4
000832   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
000834   ffe9
000836   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
000838   fff3
00083a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00083c   ecc0     call    0x002d80, 0x0    	CALL	__gptrput2
00083e   f016
000840   0102     movlb   0x2              	BANKSEL	(__integ_sat + 1)
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	if (result->out_integ > _integ_sat) result->out_integ = _integ_sat ;
000842   518b     movf    0x8b, 0x0, 0x1   	MOVF	(__integ_sat + 1), W, B
000844   0f80     addlw   0x80             	ADDLW	0x80
000846   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
000848   500d     movf    0x0d, 0x0, 0x0   	MOVF	r0x0d, W
00084a   0f80     addlw   0x80             	ADDLW	0x80
00084c   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
00084e   e103     bnz     0x000856         	BNZ	_00176_DS_
000850   500c     movf    0x0c, 0x0, 0x0   	MOVF	r0x0c, W
000852   0102     movlb   0x2              	BANKSEL	__integ_sat
000854   5d8a     subwf   0x8a, 0x0, 0x1   	SUBWF	__integ_sat, W, B
                                           _00176_DS_:
000856   e20b     bc      0x00086e         	BC	_00142_DS_
000858   c28a     movff   0x28a, 0xfe5     	MOVFF	__integ_sat, POSTDEC1
00085a   ffe5
00085c   c28b     movff   0x28b, 0xff4     	MOVFF	(__integ_sat + 1), PRODH
00085e   fff4
000860   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
000862   ffe9
000864   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
000866   fff3
000868   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00086a   ecc0     call    0x002d80, 0x0    	CALL	__gptrput2
00086c   f016
                                           _00142_DS_:
                                           ;	.line	64; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	if (result->out_integ < -_integ_sat) result->out_integ = -_integ_sat ;
00086e   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
000870   ffe9
000872   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
000874   fff3
000876   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000878   ecf9     call    0x002bf2, 0x0    	CALL	__gptrget2
00087a   f015
00087c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00087e   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000880   f004
000882   0102     movlb   0x2              	BANKSEL	(__integ_sat + 1)
000884   1d8b     comf    0x8b, 0x0, 0x1   	COMF	(__integ_sat + 1), W, B
000886   6e0d     movwf   0x0d, 0x0        	MOVWF	r0x0d
000888   0102     movlb   0x2              	BANKSEL	__integ_sat
00088a   1d8a     comf    0x8a, 0x0, 0x1   	COMF	__integ_sat, W, B
00088c   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
00088e   4a0c     infsnz  0x0c, 0x1, 0x0   	INFSNZ	r0x0c, F
000890   2a0d     incf    0x0d, 0x1, 0x0   	INCF	r0x0d, F
000892   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000894   0f80     addlw   0x80             	ADDLW	0x80
000896   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
000898   500d     movf    0x0d, 0x0, 0x0   	MOVF	r0x0d, W
00089a   0f80     addlw   0x80             	ADDLW	0x80
00089c   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
00089e   e102     bnz     0x0008a4         	BNZ	_00178_DS_
0008a0   500c     movf    0x0c, 0x0, 0x0   	MOVF	r0x0c, W
0008a2   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
                                           _00178_DS_:
0008a4   e213     bc      0x0008cc         	BC	_00144_DS_
0008a6   0102     movlb   0x2              	BANKSEL	(__integ_sat + 1)
0008a8   1d8b     comf    0x8b, 0x0, 0x1   	COMF	(__integ_sat + 1), W, B
0008aa   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0008ac   0102     movlb   0x2              	BANKSEL	__integ_sat
0008ae   1d8a     comf    0x8a, 0x0, 0x1   	COMF	__integ_sat, W, B
0008b0   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0008b2   4a03     infsnz  0x03, 0x1, 0x0   	INFSNZ	r0x03, F
0008b4   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0008b6   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0008b8   ffe5
0008ba   c004     movff   0x004, 0xff4     	MOVFF	r0x04, PRODH
0008bc   fff4
0008be   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0008c0   ffe9
0008c2   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0008c4   fff3
0008c6   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0008c8   ecc0     call    0x002d80, 0x0    	CALL	__gptrput2
0008ca   f016
                                           _00144_DS_:
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	output += result->out_integ ;
0008cc   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0008ce   ffe9
0008d0   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0008d2   fff3
0008d4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0008d6   ecf9     call    0x002bf2, 0x0    	CALL	__gptrget2
0008d8   f015
0008da   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0008dc   cff3     movff   0xff3, 0x006     	MOVFF	PRODL, r0x06
0008de   f006
0008e0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0008e2   be06     btfsc   0x06, 0x7, 0x0   	BTFSC	r0x06, 7
0008e4   0eff     movlw   0xff             	MOVLW	0xff
0008e6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0008e8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0008ea   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0008ec   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
0008ee   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0008f0   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
0008f2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0008f4   220a     addwfc  0x0a, 0x1, 0x0   	ADDWFC	r0x0a, F
0008f6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0008f8   220b     addwfc  0x0b, 0x1, 0x0   	ADDWFC	r0x0b, F
                                           _00146_DS_:
                                           ;	.line	71; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	if (output > _max_out) output = _max_out ;
0008fa   c288     movff   0x288, 0x003     	MOVFF	__max_out, r0x03
0008fc   f003
0008fe   c289     movff   0x289, 0x004     	MOVFF	(__max_out + 1), r0x04
000900   f004
000902   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
000904   0102     movlb   0x2              	BANKSEL	(__max_out + 1)
000906   bf89     btfsc   0x89, 0x7, 0x1   	BTFSC	(__max_out + 1), 7
000908   0eff     movlw   0xff             	MOVLW	0xff
00090a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00090c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00090e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000910   0f80     addlw   0x80             	ADDLW	0x80
000912   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
000914   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
000916   0f80     addlw   0x80             	ADDLW	0x80
000918   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
00091a   e108     bnz     0x00092c         	BNZ	_00180_DS_
00091c   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
00091e   5c05     subwf   0x05, 0x0, 0x0   	SUBWF	r0x05, W
000920   e105     bnz     0x00092c         	BNZ	_00180_DS_
000922   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
000924   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
000926   e102     bnz     0x00092c         	BNZ	_00180_DS_
000928   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00092a   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
                                           _00180_DS_:
00092c   e20b     bc      0x000944         	BC	_00150_DS_
00092e   c288     movff   0x288, 0x008     	MOVFF	__max_out, r0x08
000930   f008
000932   c289     movff   0x289, 0x009     	MOVFF	(__max_out + 1), r0x09
000934   f009
000936   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
000938   0102     movlb   0x2              	BANKSEL	(__max_out + 1)
00093a   bf89     btfsc   0x89, 0x7, 0x1   	BTFSC	(__max_out + 1), 7
00093c   0eff     movlw   0xff             	MOVLW	0xff
00093e   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
000940   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
000942   d024     bra     0x00098c         	BRA	_00151_DS_
                                           _00150_DS_:
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	else if (output < _min_out) output = _min_out ;
000944   c28c     movff   0x28c, 0x003     	MOVFF	__min_out, r0x03
000946   f003
000948   c28d     movff   0x28d, 0x004     	MOVFF	(__min_out + 1), r0x04
00094a   f004
00094c   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
00094e   0102     movlb   0x2              	BANKSEL	(__min_out + 1)
000950   bf8d     btfsc   0x8d, 0x7, 0x1   	BTFSC	(__min_out + 1), 7
000952   0eff     movlw   0xff             	MOVLW	0xff
000954   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000956   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000958   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
00095a   0f80     addlw   0x80             	ADDLW	0x80
00095c   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
00095e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000960   0f80     addlw   0x80             	ADDLW	0x80
000962   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
000964   e108     bnz     0x000976         	BNZ	_00181_DS_
000966   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000968   5c0a     subwf   0x0a, 0x0, 0x0   	SUBWF	r0x0a, W
00096a   e105     bnz     0x000976         	BNZ	_00181_DS_
00096c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00096e   5c09     subwf   0x09, 0x0, 0x0   	SUBWF	r0x09, W
000970   e102     bnz     0x000976         	BNZ	_00181_DS_
000972   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000974   5c08     subwf   0x08, 0x0, 0x0   	SUBWF	r0x08, W
                                           _00181_DS_:
000976   e20a     bc      0x00098c         	BC	_00151_DS_
000978   c28c     movff   0x28c, 0x008     	MOVFF	__min_out, r0x08
00097a   f008
00097c   c28d     movff   0x28d, 0x009     	MOVFF	(__min_out + 1), r0x09
00097e   f009
000980   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
000982   0102     movlb   0x2              	BANKSEL	(__min_out + 1)
000984   bf8d     btfsc   0x8d, 0x7, 0x1   	BTFSC	(__min_out + 1), 7
000986   0eff     movlw   0xff             	MOVLW	0xff
000988   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00098a   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
                                           _00151_DS_:
                                           ;	.line	74; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->output = output ;  
00098c   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00098e   ffe5
000990   c009     movff   0x009, 0xff4     	MOVFF	r0x09, PRODH
000992   fff4
000994   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000996   ffe9
000998   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00099a   fff3
00099c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00099e   ecc0     call    0x002d80, 0x0    	CALL	__gptrput2
0009a0   f016
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	}
0009a2   cfe4     movff   0xfe4, 0x010     	MOVFF	PREINC1, r0x10
0009a4   f010
0009a6   cfe4     movff   0xfe4, 0x00f     	MOVFF	PREINC1, r0x0f
0009a8   f00f
0009aa   cfe4     movff   0xfe4, 0x00e     	MOVFF	PREINC1, r0x0e
0009ac   f00e
0009ae   cfe4     movff   0xfe4, 0x00d     	MOVFF	PREINC1, r0x0d
0009b0   f00d
0009b2   cfe4     movff   0xfe4, 0x00c     	MOVFF	PREINC1, r0x0c
0009b4   f00c
0009b6   cfe4     movff   0xfe4, 0x00b     	MOVFF	PREINC1, r0x0b
0009b8   f00b
0009ba   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
0009bc   f00a
0009be   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
0009c0   f009
0009c2   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
0009c4   f008
0009c6   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0009c8   f007
0009ca   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0009cc   f006
0009ce   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0009d0   f005
0009d2   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0009d4   f004
0009d6   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0009d8   f003
0009da   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0009dc   f002
0009de   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0009e0   f001
0009e2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0009e4   f000
0009e6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0009e8   ffd9
0009ea   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__init_result	code
                                           _init_result:
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	void init_result(pi_result_t * result, int16_t kp, int16_t ki) {
001ec0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001ec2   ffe5
001ec4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001ec6   ffd9
001ec8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001eca   ffe5
001ecc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001ece   ffe5
001ed0   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001ed2   ffe5
001ed4   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001ed6   ffe5
001ed8   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001eda   ffe5
001edc   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001ede   ffe5
001ee0   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001ee2   ffe5
001ee4   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001ee6   ffe5
001ee8   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001eea   ffe5
001eec   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
001eee   ffe5
001ef0   0e02     movlw   0x02             	MOVLW	0x02
001ef2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001ef4   f000
001ef6   0e03     movlw   0x03             	MOVLW	0x03
001ef8   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001efa   f001
001efc   0e04     movlw   0x04             	MOVLW	0x04
001efe   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001f00   f002
001f02   0e05     movlw   0x05             	MOVLW	0x05
001f04   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
001f06   f003
001f08   0e06     movlw   0x06             	MOVLW	0x06
001f0a   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
001f0c   f004
001f0e   0e07     movlw   0x07             	MOVLW	0x07
001f10   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
001f12   f005
001f14   0e08     movlw   0x08             	MOVLW	0x08
001f16   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
001f18   f006
                                           ;	.line	46; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->out_integ = 0 ;
001f1a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f1c   0f02     addlw   0x02             	ADDLW	0x02
001f1e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001f20   0e00     movlw   0x00             	MOVLW	0x00
001f22   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001f24   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001f26   0e00     movlw   0x00             	MOVLW	0x00
001f28   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001f2a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001f2c   0e00     movlw   0x00             	MOVLW	0x00
001f2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f30   0e00     movlw   0x00             	MOVLW	0x00
001f32   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001f34   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001f36   ffe9
001f38   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001f3a   fff3
001f3c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001f3e   ecc0     call    0x002d80, 0x0    	CALL	__gptrput2
001f40   f016
                                           ;	.line	47; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->output = 0 ;
001f42   0e00     movlw   0x00             	MOVLW	0x00
001f44   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f46   0e00     movlw   0x00             	MOVLW	0x00
001f48   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001f4a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001f4c   ffe9
001f4e   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001f50   fff3
001f52   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001f54   ecc0     call    0x002d80, 0x0    	CALL	__gptrput2
001f56   f016
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->kp = kp ;
001f58   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f5a   0f04     addlw   0x04             	ADDLW	0x04
001f5c   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001f5e   0e00     movlw   0x00             	MOVLW	0x00
001f60   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001f62   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001f64   0e00     movlw   0x00             	MOVLW	0x00
001f66   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001f68   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001f6a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001f6c   ffe5
001f6e   c004     movff   0x004, 0xff4     	MOVFF	r0x04, PRODH
001f70   fff4
001f72   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001f74   ffe9
001f76   c008     movff   0x008, 0xff3     	MOVFF	r0x08, PRODL
001f78   fff3
001f7a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001f7c   ecc0     call    0x002d80, 0x0    	CALL	__gptrput2
001f7e   f016
                                           ;	.line	50; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	result->ki = ki ;
001f80   0e06     movlw   0x06             	MOVLW	0x06
001f82   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001f84   0e00     movlw   0x00             	MOVLW	0x00
001f86   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001f88   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001f8a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001f8c   ffe5
001f8e   c006     movff   0x006, 0xff4     	MOVFF	r0x06, PRODH
001f90   fff4
001f92   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001f94   ffe9
001f96   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001f98   fff3
001f9a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001f9c   ecc0     call    0x002d80, 0x0    	CALL	__gptrput2
001f9e   f016
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	}
001fa0   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
001fa2   f009
001fa4   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
001fa6   f008
001fa8   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001faa   f007
001fac   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001fae   f006
001fb0   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001fb2   f005
001fb4   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001fb6   f004
001fb8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001fba   f003
001fbc   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001fbe   f002
001fc0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001fc2   f001
001fc4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001fc6   f000
001fc8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001fca   ffd9
001fcc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__set_min_out	code
                                           _set_min_out:
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	void set_min_out(int16_t min_out_val) {
002d66   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d68   ffe5
002d6a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d6c   ffd9
002d6e   0e02     movlw   0x02             	MOVLW	0x02
002d70   cfdb     movff   0xfdb, 0x28c     	MOVFF	PLUSW2, __min_out
002d72   f28c
002d74   0e03     movlw   0x03             	MOVLW	0x03
002d76   cfdb     movff   0xfdb, 0x28d     	MOVFF	PLUSW2, (__min_out + 1)
002d78   f28d
                                           ;	.line	43; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	}
002d7a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d7c   ffd9
002d7e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__set_max_out	code
                                           _set_max_out:
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	void set_max_out(int16_t max_out_val) {
002326   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002328   ffe5
00232a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00232c   ffd9
00232e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002330   ffe5
002332   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002334   ffe5
002336   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002338   ffe5
00233a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00233c   ffe5
00233e   0e02     movlw   0x02             	MOVLW	0x02
002340   cfdb     movff   0xfdb, 0x288     	MOVFF	PLUSW2, __max_out
002342   f288
002344   0e03     movlw   0x03             	MOVLW	0x03
002346   cfdb     movff   0xfdb, 0x289     	MOVFF	PLUSW2, (__max_out + 1)
002348   f289
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	_integ_sat = mult_int16(2, _max_out) ;
00234a   c288     movff   0x288, 0x000     	MOVFF	__max_out, r0x00
00234c   f000
00234e   c289     movff   0x289, 0x001     	MOVFF	(__max_out + 1), r0x01
002350   f001
                                           ;	.line	107; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ = a ;
002352   0e02     movlw   0x02             	MOVLW	0x02
002354   0100     movlb   0x0              	BANKSEL	_a16_
002356   6f19     movwf   0x19, 0x1        	MOVWF	_a16_, B
002358   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
00235a   6b1a     clrf    0x1a, 0x1        	CLRF	(_a16_ + 1), B
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	b16_ = b ;
00235c   c000     movff   0x000, 0x01b     	MOVFF	r0x00, _b16_
00235e   f01b
002360   c001     movff   0x001, 0x01c     	MOVFF	r0x01, (_b16_ + 1)
002362   f01c
002364   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
002366   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
002368   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
00236a   f01e
00236c   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
00236e   f01d
002370   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
002372   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
002374   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
002376   f020
002378   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
00237a   f01f
00237c   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
00237e   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
002380   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
002382   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
002384   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
002386   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
002388   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
00238a   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
00238c   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
00238e   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
002390   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
002392   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
002394   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
002396   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
002398   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
00239a   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
00239c   ae1c     btfss   0x1c, 0x7, 0x0   	btfss	(_b16_ + 1), 7
00239e   d004     bra     0x0023a8         	bra	$+10
0023a0   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0023a2   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0023a4   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0023a6   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
0023a8   ae1a     btfss   0x1a, 0x7, 0x0   	btfss	(_a16_ + 1), 7
0023aa   d004     bra     0x0023b4         	bra	$+10
0023ac   501b     movf    0x1b, 0x0, 0x0   	movf	_b16_, W
0023ae   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
0023b0   501c     movf    0x1c, 0x0, 0x0   	movf	(_b16_ + 1), W
0023b2   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
                                           	
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
0023b4   c01d     movff   0x01d, 0x000     	MOVFF	_res_, r0x00
0023b6   f000
0023b8   c01e     movff   0x01e, 0x001     	MOVFF	(_res_ + 1), r0x01
0023ba   f001
0023bc   c01f     movff   0x01f, 0x002     	MOVFF	(_res_ + 2), r0x02
0023be   f002
0023c0   c020     movff   0x020, 0x003     	MOVFF	(_res_ + 3), r0x03
0023c2   f003
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	_integ_sat = mult_int16(2, _max_out) ;
0023c4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023c6   0102     movlb   0x2              	BANKSEL	__integ_sat
0023c8   6f8a     movwf   0x8a, 0x1        	MOVWF	__integ_sat, B
0023ca   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023cc   0102     movlb   0x2              	BANKSEL	(__integ_sat + 1)
0023ce   6f8b     movwf   0x8b, 0x1        	MOVWF	(__integ_sat + 1), B
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/pi_controller.c	}
0023d0   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0023d2   f003
0023d4   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0023d6   f002
0023d8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0023da   f001
0023dc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0023de   f000
0023e0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0023e2   ffd9
0023e4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__mult_int16	code
                                           _mult_int16:
                                           ;	.line	106; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	inline int32_t mult_int16(int16_t a, int16_t b) {
002706   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002708   ffe5
00270a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00270c   ffd9
00270e   0e02     movlw   0x02             	MOVLW	0x02
002710   cfdb     movff   0xfdb, 0x019     	MOVFF	PLUSW2, _a16_
002712   f019
002714   0e03     movlw   0x03             	MOVLW	0x03
002716   cfdb     movff   0xfdb, 0x01a     	MOVFF	PLUSW2, (_a16_ + 1)
002718   f01a
00271a   0e04     movlw   0x04             	MOVLW	0x04
00271c   cfdb     movff   0xfdb, 0x01b     	MOVFF	PLUSW2, _b16_
00271e   f01b
002720   0e05     movlw   0x05             	MOVLW	0x05
002722   cfdb     movff   0xfdb, 0x01c     	MOVFF	PLUSW2, (_b16_ + 1)
002724   f01c
002726   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
002728   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
00272a   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
00272c   f01e
00272e   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
002730   f01d
002732   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
002734   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
002736   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
002738   f020
00273a   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
00273c   f01f
00273e   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
002740   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
002742   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
002744   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
002746   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
002748   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
00274a   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
00274c   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
00274e   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
002750   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
002752   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
002754   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
002756   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
002758   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
00275a   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
00275c   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
00275e   ae1c     btfss   0x1c, 0x7, 0x0   	btfss	(_b16_ + 1), 7
002760   d004     bra     0x00276a         	bra	$+10
002762   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
002764   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
002766   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
002768   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
00276a   ae1a     btfss   0x1a, 0x7, 0x0   	btfss	(_a16_ + 1), 7
00276c   d004     bra     0x002776         	bra	$+10
00276e   501b     movf    0x1b, 0x0, 0x0   	movf	_b16_, W
002770   5e1f     subwf   0x1f, 0x1, 0x0   	subwf	(_res_ + 2), 1
002772   501c     movf    0x1c, 0x0, 0x0   	movf	(_b16_ + 1), W
002774   5a20     subwfb  0x20, 0x1, 0x0   	subwfb	(_res_ + 3), 1
                                           	
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
002776   c020     movff   0x020, 0xfe9     	MOVFF	(_res_ + 3), FSR0L
002778   ffe9
00277a   c01f     movff   0x01f, 0xff4     	MOVFF	(_res_ + 2), PRODH
00277c   fff4
00277e   c01e     movff   0x01e, 0xff3     	MOVFF	(_res_ + 1), PRODL
002780   fff3
002782   0100     movlb   0x0              	BANKSEL	_res_
002784   511d     movf    0x1d, 0x0, 0x1   	MOVF	_res_, W, B
                                           ;	.line	153; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	}
002786   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002788   ffd9
00278a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__mult_uint16	code
                                           _mult_uint16:
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	inline uint32_t mult_uint16(uint16_t a, uint16_t b) {
002972   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002974   ffe5
002976   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002978   ffd9
00297a   0e02     movlw   0x02             	MOVLW	0x02
00297c   cfdb     movff   0xfdb, 0x019     	MOVFF	PLUSW2, _a16_
00297e   f019
002980   0e03     movlw   0x03             	MOVLW	0x03
002982   cfdb     movff   0xfdb, 0x01a     	MOVFF	PLUSW2, (_a16_ + 1)
002984   f01a
002986   0e04     movlw   0x04             	MOVLW	0x04
002988   cfdb     movff   0xfdb, 0x01b     	MOVFF	PLUSW2, _b16_
00298a   f01b
00298c   0e05     movlw   0x05             	MOVLW	0x05
00298e   cfdb     movff   0xfdb, 0x01c     	MOVFF	PLUSW2, (_b16_ + 1)
002990   f01c
002992   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
002994   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
002996   cff4     movff   0xff4, 0x01e     	movff	PRODH, (_res_ + 1)
002998   f01e
00299a   cff3     movff   0xff3, 0x01d     	movff	PRODL, _res_
00299c   f01d
00299e   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0029a0   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
0029a2   cff4     movff   0xff4, 0x020     	movff	PRODH, (_res_ + 3)
0029a4   f020
0029a6   cff3     movff   0xff3, 0x01f     	movff	PRODL, (_res_ + 2)
0029a8   f01f
0029aa   5019     movf    0x19, 0x0, 0x0   	movf	_a16_, W
0029ac   021c     mulwf   0x1c, 0x0        	mulwf	(_b16_ + 1)
0029ae   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
0029b0   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
0029b2   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
0029b4   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
0029b6   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
0029b8   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
0029ba   501a     movf    0x1a, 0x0, 0x0   	movf	(_a16_ + 1), W
0029bc   021b     mulwf   0x1b, 0x0        	mulwf	_b16_
0029be   50f3     movf    0xf3, 0x0, 0x0   	movf	PRODL, W
0029c0   261e     addwf   0x1e, 0x1, 0x0   	addwf	(_res_ + 1), F
0029c2   50f4     movf    0xf4, 0x0, 0x0   	movf	PRODH, W
0029c4   221f     addwfc  0x1f, 0x1, 0x0   	addwfc	(_res_ + 2), F
0029c6   6ae8     clrf    0xe8, 0x0        	clrf	_WREG
0029c8   2220     addwfc  0x20, 0x1, 0x0   	addwfc	(_res_ + 3), F
                                           	
                                           ;	.line	101; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(res_) ;
0029ca   c020     movff   0x020, 0xfe9     	MOVFF	(_res_ + 3), FSR0L
0029cc   ffe9
0029ce   c01f     movff   0x01f, 0xff4     	MOVFF	(_res_ + 2), PRODH
0029d0   fff4
0029d2   c01e     movff   0x01e, 0xff3     	MOVFF	(_res_ + 1), PRODL
0029d4   fff3
0029d6   0100     movlb   0x0              	BANKSEL	_res_
0029d8   511d     movf    0x1d, 0x0, 0x1   	MOVF	_res_, W, B
                                           ;	.line	103; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	}
0029da   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0029dc   ffd9
0029de   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__mult_int8	code
                                           _mult_int8:
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	inline int16_t mult_int8(int8_t a, int8_t b) {
002a4a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a4c   ffe5
002a4e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a50   ffd9
002a52   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002a54   ffe5
002a56   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002a58   ffe5
002a5a   0e02     movlw   0x02             	MOVLW	0x02
002a5c   cfdb     movff   0xfdb, 0x017     	MOVFF	PLUSW2, _a_
002a5e   f017
002a60   0e03     movlw   0x03             	MOVLW	0x03
002a62   cfdb     movff   0xfdb, 0x018     	MOVFF	PLUSW2, _b_
002a64   f018
002a66   5017     movf    0x17, 0x0, 0x0   	movf	_a_, W
002a68   0218     mulwf   0x18, 0x0        	mulwf	_b_
002a6a   be18     btfsc   0x18, 0x7, 0x0   	btfsc	_b_, 7
002a6c   5ef4     subwf   0xf4, 0x1, 0x0   	subwf	PRODH, F
002a6e   5018     movf    0x18, 0x0, 0x0   	movf	_b_, W
002a70   be17     btfsc   0x17, 0x7, 0x0   	btfsc	_a_, 7
002a72   5ef4     subwf   0xf4, 0x1, 0x0   	subwf	PRODH, F
                                           	
                                           ;	.line	62; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ = PRODH ;
002a74   cff4     movff   0xff4, 0x019     	MOVFF	_PRODH, _a16_
002a76   f019
002a78   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002a7a   6b1a     clrf    0x1a, 0x1        	CLRF	(_a16_ + 1), B
002a7c   0100     movlb   0x0              	BANKSEL	_a16_
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ <<= 8 ;
002a7e   5119     movf    0x19, 0x0, 0x1   	MOVF	_a16_, W, B
002a80   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002a82   6f1a     movwf   0x1a, 0x1        	MOVWF	(_a16_ + 1), B
002a84   0100     movlb   0x0              	BANKSEL	_a16_
002a86   6b19     clrf    0x19, 0x1        	CLRF	_a16_, B
                                           ;	.line	64; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ += PRODL ;
002a88   cff3     movff   0xff3, 0x000     	MOVFF	_PRODL, r0x00
002a8a   f000
002a8c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002a8e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002a90   0100     movlb   0x0              	BANKSEL	_a16_
002a92   2719     addwf   0x19, 0x1, 0x1   	ADDWF	_a16_, F, B
002a94   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002a96   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002a98   231a     addwfc  0x1a, 0x1, 0x1   	ADDWFC	(_a16_ + 1), F, B
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(a16_) ;
002a9a   c01a     movff   0x01a, 0xff3     	MOVFF	(_a16_ + 1), PRODL
002a9c   fff3
002a9e   0100     movlb   0x0              	BANKSEL	_a16_
002aa0   5119     movf    0x19, 0x0, 0x1   	MOVF	_a16_, W, B
                                           ;	.line	67; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	}
002aa2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002aa4   f001
002aa6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002aa8   f000
002aaa   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002aac   ffd9
002aae   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_pi_controller__mult_uint8	code
                                           _mult_uint8:
                                           ;	.line	31; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	inline uint16_t mult_uint8(uint8_t a, uint8_t b) {
002ab0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002ab2   ffe5
002ab4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002ab6   ffd9
002ab8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002aba   ffe5
002abc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002abe   ffe5
002ac0   0e02     movlw   0x02             	MOVLW	0x02
002ac2   cfdb     movff   0xfdb, 0x017     	MOVFF	PLUSW2, _a_
002ac4   f017
002ac6   0e03     movlw   0x03             	MOVLW	0x03
002ac8   cfdb     movff   0xfdb, 0x018     	MOVFF	PLUSW2, _b_
002aca   f018
002acc   5017     movf    0x17, 0x0, 0x0   	movf	_a_, W
002ace   0218     mulwf   0x18, 0x0        	mulwf	_b_
                                           	
                                           ;	.line	40; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ = PRODH ;
002ad0   cff4     movff   0xff4, 0x019     	MOVFF	_PRODH, _a16_
002ad2   f019
002ad4   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002ad6   6b1a     clrf    0x1a, 0x1        	CLRF	(_a16_ + 1), B
002ad8   0100     movlb   0x0              	BANKSEL	_a16_
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ <<= 8 ;
002ada   5119     movf    0x19, 0x0, 0x1   	MOVF	_a16_, W, B
002adc   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002ade   6f1a     movwf   0x1a, 0x1        	MOVWF	(_a16_ + 1), B
002ae0   0100     movlb   0x0              	BANKSEL	_a16_
002ae2   6b19     clrf    0x19, 0x1        	CLRF	_a16_, B
                                           ;	.line	42; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	a16_ += PRODL ;
002ae4   cff3     movff   0xff3, 0x000     	MOVFF	_PRODL, r0x00
002ae6   f000
002ae8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002aea   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002aec   0100     movlb   0x0              	BANKSEL	_a16_
002aee   2719     addwf   0x19, 0x1, 0x1   	ADDWF	_a16_, F, B
002af0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002af2   0100     movlb   0x0              	BANKSEL	(_a16_ + 1)
002af4   231a     addwfc  0x1a, 0x1, 0x1   	ADDWFC	(_a16_ + 1), F, B
                                           ;	.line	44; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	return(a16_) ;
002af6   c01a     movff   0x01a, 0xff3     	MOVFF	(_a16_ + 1), PRODL
002af8   fff3
002afa   0100     movlb   0x0              	BANKSEL	_a16_
002afc   5119     movf    0x19, 0x0, 0x1   	MOVF	_a16_, W, B
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/fast_mult.h	}
002afe   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002b00   f001
002b02   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002b04   f000
002b06   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002b08   ffd9
002b0a   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	 1910 (0x0776) bytes ( 1.46%)
                                           ;           	  955 (0x03bb) words
                                           ; udata size:	   16 (0x0010) bytes ( 0.43%)
                                           ; access size:	   17 (0x0011) bytes


                                           	end
