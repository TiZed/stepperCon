gplink-1.5.2 #1312 (Dec  8 2017)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 08/12/17  14:25:15


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.9 #10186 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec
                                           	CONFIG	FOSC=HSHP
                                           	CONFIG	PLLCFG=ON
                                           	CONFIG	WDTEN=SWON
                                           	CONFIG	XINST=OFF
                                           	CONFIG	CCP3MX=PORTE0
                                           	CONFIG	P2BMX=PORTC0
                                           	CONFIG	MCLRE=EXTMCLR


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_state
                                           	global	_skip
                                           	global	_set_amp
                                           	global	_max_amp
                                           	global	_a_decay
                                           	global	_b_decay
                                           	global	_t_off
                                           	global	_t_blank_low
                                           	global	_t_blank_high
                                           	global	_step_a
                                           	global	_step_b
                                           	global	_pol_a
                                           	global	_pol_b
                                           	global	_dir
                                           	global	_pwm_lu
                                           	global	_zero_cross
                                           	global	_i2c_address
                                           	global	_i2c_counter
                                           	global	_i2c_reg_addr
                                           	global	_i2c_regs
                                           	global	_i2c_dirty
                                           	global	_a_state
                                           	global	_b_state
                                           	global	_i2cSetup
                                           	global	_activeInts
                                           	global	_idleInts
                                           	global	_prep_pwm_lu
                                           	global	_set_op_vars
                                           	global	_delay_ms
                                           	global	_main
                                           	global	___EEPROM

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__moduchar
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	___fs2uint
                                           	extern	_read_regs
                                           	extern	_store_regs
                                           	extern	_compsSetup
                                           	extern	_ioSetup
                                           	extern	_pwmSetup
                                           	extern	_intSetup
                                           	extern	_phTimersSetup
                                           	extern	_resetCheck
                                           	extern	___uint2fs
                                           	extern	___fsdiv
                                           	extern	___sint2fs
                                           	extern	___fsmul
                                           	extern	___fsadd

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           	idata
                                           _pwm_base	db	0x00, 0x00, 0x32, 0x00, 0x64, 0x00, 0x94, 0x00, 0xc4, 0x00, 0xf1, 0x00
                                           	db	0x1c, 0x01, 0x44, 0x01, 0x6a, 0x01, 0x8b, 0x01, 0xa9, 0x01, 0xc3, 0x01
                                           	db	0xd9, 0x01, 0xe9, 0x01, 0xf6, 0x01, 0xfd, 0x01, 0x00, 0x02, 0xfd, 0x01
                                           	db	0xf6, 0x01, 0xe9, 0x01, 0xd9, 0x01, 0xc3, 0x01, 0xa9, 0x01, 0x8b, 0x01
                                           	db	0x6a, 0x01, 0x44, 0x01, 0x1c, 0x01, 0xf1, 0x00, 0xc4, 0x00, 0x94, 0x00
                                           	db	0x64, 0x00, 0x32, 0x00, 0x00, 0x00, 0xce, 0xff, 0x9c, 0xff, 0x6c, 0xff
                                           	db	0x3c, 0xff, 0x0f, 0xff, 0xe4, 0xfe, 0xbc, 0xfe, 0x96, 0xfe, 0x75, 0xfe
                                           	db	0x57, 0xfe, 0x3d, 0xfe, 0x27, 0xfe, 0x17, 0xfe, 0x0a, 0xfe, 0x03, 0xfe
                                           	db	0x00, 0xfe, 0x03, 0xfe, 0x0a, 0xfe, 0x17, 0xfe, 0x27, 0xfe, 0x3d, 0xfe
                                           	db	0x57, 0xfe, 0x75, 0xfe, 0x96, 0xfe, 0xbc, 0xfe, 0xe4, 0xfe, 0x0f, 0xff
                                           	db	0x3c, 0xff, 0x6c, 0xff, 0x9c, 0xff, 0xce, 0xff


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1

                                           udata_stepperCon_0	udata
                                           _state	res	1

                                           udata_stepperCon_1	udata
                                           _dir	res	1

                                           udata_stepperCon_2	udata
                                           _t_blank_high	res	1

                                           udata_stepperCon_3	udata
                                           _t_blank_low	res	1

                                           udata_stepperCon_4	udata
                                           _a_state	res	1

                                           udata_stepperCon_5	udata
                                           _t_off	res	1

                                           udata_stepperCon_6	udata
                                           _b_state	res	1

                                           udata_stepperCon_7	udata
                                           _a_decay	res	1

                                           udata_stepperCon_8	udata
                                           _pol_a	res	1

                                           udata_stepperCon_9	udata
                                           _b_decay	res	1

                                           udata_stepperCon_10	udata
                                           _pol_b	res	1

                                           udata_stepperCon_11	udata
                                           _i2c_counter	res	1

                                           udata_stepperCon_12	udata
                                           _i2c_reg_addr	res	1

                                           udata_stepperCon_13	udata
                                           _i2c_dirty	res	1

                                           udata_stepperCon_14	udata
                                           _i2c_regs	res	9

                                           udata_stepperCon_15	udata
                                           _i2c_address	res	1

                                           udata_stepperCon_16	udata
                                           _zero_cross	res	2

                                           udata_stepperCon_17	udata
                                           _set_amp	res	2

                                           udata_stepperCon_18	udata
                                           _max_amp	res	2

                                           udata_stepperCon_19	udata
                                           _pwm_lu	res	128

                                           udata_stepperCon_20	udata
                                           _skip	res	1

                                           udata_stepperCon_21	udata
                                           _step_a	res	1

                                           udata_stepperCon_22	udata
                                           _step_b	res	1

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x1_highInt	code	0X000008
                                           ivec_0x1_highInt:
000008   ef4a     goto    0x001694         	GOTO	_highInt
00000a   f00b

                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_stepperCon_ivec_0x2_lowInt	code	0X000018
                                           ivec_0x2_lowInt:
000018   efe6     goto    0x0017cc         	GOTO	_lowInt
00001a   f00b

                                           ; ; Starting pCode block for absolute Ival
                                           S_stepperCon____EEPROM	code	0XF00000
                                           ___EEPROM:
                                           	DB	0x40, 0x02, 0xdc, 0x05, 0x74, 0x0e, 0x14, 0x0a, 0x01





                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stepperCon__main	code
                                           _main:
                                           ;	.line	426; stepperCon.c	uint8_t pwm_a_l = 0, pwm_a_h = 0, pwm_b_l = 0, pwm_b_h = 0 ;
00001c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
00001e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000020   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000022   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           ;	.line	428; stepperCon.c	ioSetup() ;                 // Setup IO ports
000024   ecb1     call    0x002162, 0x0    	CALL	_ioSetup
000026   f010
                                           ;	.line	431; stepperCon.c	if(RCONbits.POR) {
000028   a2d0     btfss   0xd0, 0x1, 0x0   	BTFSS	_RCONbits, 1
00002a   d002     bra     0x000030         	BRA	_00299_DS_
                                           ;	.line	432; stepperCon.c	resetCheck() ;
00002c   ec77     call    0x001cee, 0x0    	CALL	_resetCheck
00002e   f00e
                                           _00299_DS_:
                                           ;	.line	437; stepperCon.c	RCONbits.POR = 1 ;
000030   82d0     bsf     0xd0, 0x1, 0x0   	BSF	_RCONbits, 1
                                           ;	.line	438; stepperCon.c	RCONbits.BOR = 1 ;
000032   80d0     bsf     0xd0, 0x0, 0x0   	BSF	_RCONbits, 0
                                           ;	.line	440; stepperCon.c	read_regs(i2c_regs, sizeof(i2c_regs)) ;  // Populate I2C registers from EEPROM
000034   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
000036   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000038   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
00003a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00003c   0e80     movlw   0x80             	MOVLW	0x80
00003e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000040   0e09     movlw   0x09             	MOVLW	0x09
000042   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000044   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000046   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000048   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00004a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00004c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00004e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000050   ecc8     call    0x001d90, 0x0    	CALL	_read_regs
000052   f00e
000054   0e04     movlw   0x04             	MOVLW	0x04
000056   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	441; stepperCon.c	set_op_vars() ;             // Set operation variables from I2C registers
000058   ec25     call    0x001c4a, 0x0    	CALL	_set_op_vars
00005a   f00e
00005c   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	442; stepperCon.c	i2c_dirty = 0 ;             // Clear I2C dirty flag
00005e   6b31     clrf    0x31, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	444; stepperCon.c	i2cSetup() ;                // Setup I2C I/F
000060   ec2e     call    0x00225c, 0x0    	CALL	_i2cSetup
000062   f011
                                           ;	.line	445; stepperCon.c	intSetup() ;                // Interrupts setup
000064   ec42     call    0x002284, 0x0    	CALL	_intSetup
000066   f011
                                           ;	.line	446; stepperCon.c	compsSetup() ;              // Comparators setup
000068   ec15     call    0x00222a, 0x0    	CALL	_compsSetup
00006a   f011
                                           ;	.line	447; stepperCon.c	idleInts() ;                // Set interrupts to 'idle' state
00006c   ec56     call    0x0022ac, 0x0    	CALL	_idleInts
00006e   f011
000070   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	450; stepperCon.c	state = IDLE ;              // Start in 'idle' state
000072   6b24     clrf    0x24, 0x1        	CLRF	_state, B
                                           ;	.line	452; stepperCon.c	phTimersSetup() ;
000074   ec83     call    0x002106, 0x0    	CALL	_phTimersSetup
000076   f010
                                           ;	.line	455; stepperCon.c	PORTDbits.RD2 = 1 ;     // Turn blue LED on
000078   8483     bsf     0x83, 0x2, 0x0   	BSF	_PORTDbits, 2
                                           ;	.line	456; stepperCon.c	delay_ms(300) ;    
00007a   0e01     movlw   0x01             	MOVLW	0x01
00007c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00007e   0e2c     movlw   0x2c             	MOVLW	0x2c
000080   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000082   ec16     call    0x00202c, 0x0    	CALL	_delay_ms
000084   f010
000086   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000088   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	457; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
00008a   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
                                           ;	.line	459; stepperCon.c	WDTCON = 1 ;        // Enable watchdog timer
00008c   0e01     movlw   0x01             	MOVLW	0x01
00008e   6ed1     movwf   0xd1, 0x0        	MOVWF	_WDTCON
                                           _00437_DS_:
000090   0004     clrwdt                   	clrwdt	
000092   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	465; stepperCon.c	switch(state) {
000094   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
000096   e102     bnz     0x00009c         	BNZ	_00610_DS_
000098   ef4e     goto    0x00069c         	GOTO	_00430_DS_
00009a   f003
                                           _00610_DS_:
00009c   010f     movlb   0xf              	BANKSEL	_state
00009e   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000a0   0a01     xorlw   0x01             	XORLW	0x01
0000a2   e012     bz      0x0000c8         	BZ	_00300_DS_
                                           _00612_DS_:
0000a4   010f     movlb   0xf              	BANKSEL	_state
0000a6   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000a8   0a02     xorlw   0x02             	XORLW	0x02
0000aa   e102     bnz     0x0000b0         	BNZ	_00614_DS_
0000ac   ef0c     goto    0x000618         	GOTO	_00409_DS_
0000ae   f003
                                           _00614_DS_:
0000b0   010f     movlb   0xf              	BANKSEL	_state
0000b2   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000b4   0a04     xorlw   0x04             	XORLW	0x04
0000b6   e101     bnz     0x0000ba         	BNZ	_00616_DS_
0000b8   d14a     bra     0x00034e         	BRA	_00348_DS_
                                           _00616_DS_:
0000ba   010f     movlb   0xf              	BANKSEL	_state
0000bc   5124     movf    0x24, 0x0, 0x1   	MOVF	_state, W, B
0000be   0a06     xorlw   0x06             	XORLW	0x06
0000c0   e102     bnz     0x0000c6         	BNZ	_00618_DS_
0000c2   ef2c     goto    0x000458         	GOTO	_00381_DS_
0000c4   f002
                                           _00618_DS_:
0000c6   d7e4     bra     0x000090         	BRA	_00437_DS_
                                           _00300_DS_:
                                           ;	.line	467; stepperCon.c	LATDbits.LATD2 = !LATDbits.LATD2 ;
0000c8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0000ca   b48c     btfsc   0x8c, 0x2, 0x0   	BTFSC	_LATDbits, 2
0000cc   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0000ce   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000d0   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0000d2   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0000d4   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0000d6   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0000d8   3604     rlcf    0x04, 0x1, 0x0   	RLCF	r0x04, F
0000da   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000dc   0b01     andlw   0x01             	ANDLW	0x01
0000de   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0000e0   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0000e2   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0000e4   508c     movf    0x8c, 0x0, 0x0   	MOVF	_LATDbits, W
0000e6   0bfb     andlw   0xfb             	ANDLW	0xfb
0000e8   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
0000ea   6e8c     movwf   0x8c, 0x0        	MOVWF	_LATDbits
0000ec   010f     movlb   0xf              	BANKSEL	_skip
                                           ;	.line	471; stepperCon.c	if (skip == STEP_1) step_a = STEPS / 2 ;
0000ee   5133     movf    0x33, 0x0, 0x1   	MOVF	_skip, W, B
0000f0   0a10     xorlw   0x10             	XORLW	0x10
0000f2   e104     bnz     0x0000fc         	BNZ	_00302_DS_
0000f4   0e08     movlw   0x08             	MOVLW	0x08
0000f6   010f     movlb   0xf              	BANKSEL	_step_a
0000f8   6f34     movwf   0x34, 0x1        	MOVWF	_step_a, B
0000fa   d002     bra     0x000100         	BRA	_00303_DS_
                                           _00302_DS_:
0000fc   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	472; stepperCon.c	else step_a = 0 ;
0000fe   6b34     clrf    0x34, 0x1        	CLRF	_step_a, B
                                           _00303_DS_:
000100   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	475; stepperCon.c	step_b = step_a + STEPS ;
000102   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
000104   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000106   0e10     movlw   0x10             	MOVLW	0x10
000108   2404     addwf   0x04, 0x0, 0x0   	ADDWF	r0x04, W
00010a   010f     movlb   0xf              	BANKSEL	_step_b
00010c   6f35     movwf   0x35, 0x1        	MOVWF	_step_b, B
                                           ;	.line	478; stepperCon.c	CCPR1H = 0 ;
00010e   6abf     clrf    0xbf, 0x0        	CLRF	_CCPR1H
                                           ;	.line	479; stepperCon.c	CCPR1L = t_off ;
000110   cf29     movff   0xf29, 0xfbe     	MOVFF	_t_off, _CCPR1L
000112   ffbe
                                           ;	.line	481; stepperCon.c	CCPR2H = 0 ;
000114   6a68     clrf    0x68, 0x0        	CLRF	_CCPR2H
                                           ;	.line	482; stepperCon.c	CCPR2L = t_off ;
000116   cf29     movff   0xf29, 0xf67     	MOVFF	_t_off, _CCPR2L
000118   ff67
                                           ;	.line	484; stepperCon.c	if (step_a > THREE_QUARTERS) a_decay = FAST_DECAY ;
00011a   0e31     movlw   0x31             	MOVLW	0x31
00011c   010f     movlb   0xf              	BANKSEL	_step_a
00011e   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
000120   e304     bnc     0x00012a         	BNC	_00311_DS_
000122   0e01     movlw   0x01             	MOVLW	0x01
000124   010f     movlb   0xf              	BANKSEL	_a_decay
000126   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
000128   d011     bra     0x00014c         	BRA	_00312_DS_
                                           _00311_DS_:
                                           ;	.line	485; stepperCon.c	else if (step_a >= HALF_CYCLE) a_decay = SLOW_DECAY ;
00012a   0e20     movlw   0x20             	MOVLW	0x20
00012c   010f     movlb   0xf              	BANKSEL	_step_a
00012e   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
000130   e303     bnc     0x000138         	BNC	_00308_DS_
000132   010f     movlb   0xf              	BANKSEL	_a_decay
000134   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
000136   d00a     bra     0x00014c         	BRA	_00312_DS_
                                           _00308_DS_:
                                           ;	.line	486; stepperCon.c	else if (step_a > STEPS) a_decay = FAST_DECAY ;
000138   0e11     movlw   0x11             	MOVLW	0x11
00013a   010f     movlb   0xf              	BANKSEL	_step_a
00013c   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
00013e   e304     bnc     0x000148         	BNC	_00305_DS_
000140   0e01     movlw   0x01             	MOVLW	0x01
000142   010f     movlb   0xf              	BANKSEL	_a_decay
000144   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
000146   d002     bra     0x00014c         	BRA	_00312_DS_
                                           _00305_DS_:
000148   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	487; stepperCon.c	else a_decay = SLOW_DECAY ;
00014a   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
                                           _00312_DS_:
                                           ;	.line	489; stepperCon.c	if (step_b > THREE_QUARTERS) b_decay = FAST_DECAY ;
00014c   0e31     movlw   0x31             	MOVLW	0x31
00014e   010f     movlb   0xf              	BANKSEL	_step_b
000150   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
000152   e304     bnc     0x00015c         	BNC	_00320_DS_
000154   0e01     movlw   0x01             	MOVLW	0x01
000156   010f     movlb   0xf              	BANKSEL	_b_decay
000158   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
00015a   d011     bra     0x00017e         	BRA	_00321_DS_
                                           _00320_DS_:
                                           ;	.line	490; stepperCon.c	else if (step_b >= HALF_CYCLE) b_decay = SLOW_DECAY ;
00015c   0e20     movlw   0x20             	MOVLW	0x20
00015e   010f     movlb   0xf              	BANKSEL	_step_b
000160   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
000162   e303     bnc     0x00016a         	BNC	_00317_DS_
000164   010f     movlb   0xf              	BANKSEL	_b_decay
000166   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
000168   d00a     bra     0x00017e         	BRA	_00321_DS_
                                           _00317_DS_:
                                           ;	.line	491; stepperCon.c	else if (step_b > STEPS) b_decay = FAST_DECAY ;
00016a   0e11     movlw   0x11             	MOVLW	0x11
00016c   010f     movlb   0xf              	BANKSEL	_step_b
00016e   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
000170   e304     bnc     0x00017a         	BNC	_00314_DS_
000172   0e01     movlw   0x01             	MOVLW	0x01
000174   010f     movlb   0xf              	BANKSEL	_b_decay
000176   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
000178   d002     bra     0x00017e         	BRA	_00321_DS_
                                           _00314_DS_:
00017a   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	492; stepperCon.c	else b_decay = SLOW_DECAY ;
00017c   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
                                           _00321_DS_:
                                           ;	.line	494; stepperCon.c	prep_pwm_lu() ;         // prepare PWM lookup table
00017e   ec95     call    0x00132a, 0x0    	CALL	_prep_pwm_lu
000180   f009
                                           ;	.line	496; stepperCon.c	pwmSetup() ;            // Activate PWM
000182   ecd7     call    0x0021ae, 0x0    	CALL	_pwmSetup
000184   f010
                                           ;	.line	497; stepperCon.c	activeInts() ;          // Set active state interrupts
000186   ecfa     call    0x0021f4, 0x0    	CALL	_activeInts
000188   f010
                                           ;	.line	499; stepperCon.c	T1CONbits.TMR1ON = 0 ;          // Toff timer off
00018a   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	500; stepperCon.c	TMR1L = 0 ;                     // Clear off timer
00018c   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	501; stepperCon.c	TMR1H = 0 ;
00018e   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
                                           ;	.line	503; stepperCon.c	T3CONbits.TMR3ON = 0 ;  // Toff timer off
000190   90b1     bcf     0xb1, 0x0, 0x0   	BCF	_T3CONbits, 0
                                           ;	.line	504; stepperCon.c	TMR3L = 0 ;             // Clear off timer 
000192   6ab2     clrf    0xb2, 0x0        	CLRF	_TMR3L
                                           ;	.line	505; stepperCon.c	TMR3H = 0 ;
000194   6ab3     clrf    0xb3, 0x0        	CLRF	_TMR3H
                                           ;	.line	507; stepperCon.c	a_state = T_DRIVE ;
000196   0e02     movlw   0x02             	MOVLW	0x02
000198   010f     movlb   0xf              	BANKSEL	_a_state
00019a   6f28     movwf   0x28, 0x1        	MOVWF	_a_state, B
                                           ;	.line	508; stepperCon.c	b_state = T_DRIVE ;
00019c   0e02     movlw   0x02             	MOVLW	0x02
00019e   010f     movlb   0xf              	BANKSEL	_b_state
0001a0   6f2a     movwf   0x2a, 0x1        	MOVWF	_b_state, B
0001a2   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	511; stepperCon.c	if (step_a == HALF_CYCLE || step_a == 0) pol_a = 2 ;
0001a4   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0001a6   0a20     xorlw   0x20             	XORLW	0x20
0001a8   e003     bz      0x0001b0         	BZ	_00325_DS_
                                           _00628_DS_:
0001aa   010f     movlb   0xf              	BANKSEL	_step_a
0001ac   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0001ae   e104     bnz     0x0001b8         	BNZ	_00326_DS_
                                           _00325_DS_:
0001b0   0e02     movlw   0x02             	MOVLW	0x02
0001b2   010f     movlb   0xf              	BANKSEL	_pol_a
0001b4   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
0001b6   d00a     bra     0x0001cc         	BRA	_00327_DS_
                                           _00326_DS_:
                                           ;	.line	512; stepperCon.c	else if (step_a > HALF_CYCLE) pol_a = 0 ;
0001b8   0e21     movlw   0x21             	MOVLW	0x21
0001ba   010f     movlb   0xf              	BANKSEL	_step_a
0001bc   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
0001be   e303     bnc     0x0001c6         	BNC	_00323_DS_
0001c0   010f     movlb   0xf              	BANKSEL	_pol_a
0001c2   6b2c     clrf    0x2c, 0x1        	CLRF	_pol_a, B
0001c4   d003     bra     0x0001cc         	BRA	_00327_DS_
                                           _00323_DS_:
                                           ;	.line	513; stepperCon.c	else pol_a = 1 ;
0001c6   0e01     movlw   0x01             	MOVLW	0x01
0001c8   010f     movlb   0xf              	BANKSEL	_pol_a
0001ca   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
                                           _00327_DS_:
0001cc   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	515; stepperCon.c	if (step_b == HALF_CYCLE || step_b == 0) pol_b = 2 ;
0001ce   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0001d0   0a20     xorlw   0x20             	XORLW	0x20
0001d2   e003     bz      0x0001da         	BZ	_00332_DS_
                                           _00631_DS_:
0001d4   010f     movlb   0xf              	BANKSEL	_step_b
0001d6   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0001d8   e104     bnz     0x0001e2         	BNZ	_00333_DS_
                                           _00332_DS_:
0001da   0e02     movlw   0x02             	MOVLW	0x02
0001dc   010f     movlb   0xf              	BANKSEL	_pol_b
0001de   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
0001e0   d00a     bra     0x0001f6         	BRA	_00334_DS_
                                           _00333_DS_:
                                           ;	.line	516; stepperCon.c	else if (step_b > HALF_CYCLE) pol_b = 0 ;
0001e2   0e21     movlw   0x21             	MOVLW	0x21
0001e4   010f     movlb   0xf              	BANKSEL	_step_b
0001e6   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0001e8   e303     bnc     0x0001f0         	BNC	_00330_DS_
0001ea   010f     movlb   0xf              	BANKSEL	_pol_b
0001ec   6b2e     clrf    0x2e, 0x1        	CLRF	_pol_b, B
0001ee   d003     bra     0x0001f6         	BRA	_00334_DS_
                                           _00330_DS_:
                                           ;	.line	517; stepperCon.c	else pol_b = 1 ;
0001f0   0e01     movlw   0x01             	MOVLW	0x01
0001f2   010f     movlb   0xf              	BANKSEL	_pol_b
0001f4   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
                                           _00334_DS_:
                                           ;	.line	519; stepperCon.c	CM1CON0 = 0x09 ;
0001f6   0e09     movlw   0x09             	MOVLW	0x09
0001f8   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           ;	.line	520; stepperCon.c	CM2CON0 = 0x08 ;
0001fa   0e08     movlw   0x08             	MOVLW	0x08
0001fc   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
0001fe   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	522; stepperCon.c	if (pol_a == 2) {
000200   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
000202   0a02     xorlw   0x02             	XORLW	0x02
000204   e103     bnz     0x00020c         	BNZ	_00340_DS_
                                           ;	.line	523; stepperCon.c	LATCbits.LATC1 = 0 ;
000206   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	524; stepperCon.c	LATCbits.LATC0 = 0 ;
000208   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
00020a   d00c     bra     0x000224         	BRA	_00341_DS_
                                           _00340_DS_:
00020c   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	526; stepperCon.c	else if (pol_a) {               // Forward current, Phase-A
00020e   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
000210   e005     bz      0x00021c         	BZ	_00337_DS_
                                           ;	.line	527; stepperCon.c	LATCbits.LATC1 = 0 ;
000212   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	528; stepperCon.c	LATCbits.LATC0 = 1 ;
000214   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
                                           ;	.line	529; stepperCon.c	CM1CON0 = 0x99 ; 
000216   0e99     movlw   0x99             	MOVLW	0x99
000218   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
00021a   d004     bra     0x000224         	BRA	_00341_DS_
                                           _00337_DS_:
                                           ;	.line	532; stepperCon.c	LATCbits.LATC0 = 0 ;
00021c   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	533; stepperCon.c	LATCbits.LATC1 = 1 ;
00021e   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
                                           ;	.line	534; stepperCon.c	CM1CON0 = 0x89 ; 
000220   0e89     movlw   0x89             	MOVLW	0x89
000222   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           _00341_DS_:
000224   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	537; stepperCon.c	if(pol_b == 2) {
000226   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000228   0a02     xorlw   0x02             	XORLW	0x02
00022a   e103     bnz     0x000232         	BNZ	_00346_DS_
                                           ;	.line	538; stepperCon.c	LATCbits.LATC2 = 0 ;
00022c   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	539; stepperCon.c	LATDbits.LATD5 = 0 ;
00022e   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
000230   d00c     bra     0x00024a         	BRA	_00347_DS_
                                           _00346_DS_:
000232   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	541; stepperCon.c	else if (pol_b) {               // Forward current, Phase-B
000234   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000236   e005     bz      0x000242         	BZ	_00343_DS_
                                           ;	.line	542; stepperCon.c	LATCbits.LATC2 = 0 ;
000238   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	543; stepperCon.c	LATDbits.LATD5 = 1 ;
00023a   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
                                           ;	.line	544; stepperCon.c	CM2CON0 = 0x98 ;
00023c   0e98     movlw   0x98             	MOVLW	0x98
00023e   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
000240   d004     bra     0x00024a         	BRA	_00347_DS_
                                           _00343_DS_:
                                           ;	.line	547; stepperCon.c	LATDbits.LATD5 = 0 ;
000242   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	548; stepperCon.c	LATCbits.LATC2 = 1 ;
000244   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
                                           ;	.line	549; stepperCon.c	CM2CON0 = 0x88 ;
000246   0e88     movlw   0x88             	MOVLW	0x88
000248   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
                                           _00347_DS_:
00024a   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	553; stepperCon.c	CCP5CONbits.DC5B = 0x0c + (pwm_lu[step_a] & 0x3) << 4 ;
00024c   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
00024e   0d02     mullw   0x02             	MULLW	0x02
000250   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000252   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000254   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000256   f004
000258   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00025a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00025c   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
00025e   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000260   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000262   ffe9
000264   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000266   ffea
000268   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00026a   f004
00026c   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
00026e   f005
000270   0e03     movlw   0x03             	MOVLW	0x03
000272   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
000274   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
000276   0bf0     andlw   0xf0             	ANDLW	0xf0
000278   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00027a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00027c   0b03     andlw   0x03             	ANDLW	0x03
00027e   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000280   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000282   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
000284   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
000286   0bcf     andlw   0xcf             	ANDLW	0xcf
000288   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00028a   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
00028c   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
00028e   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	554; stepperCon.c	CCPR5L = pwm_lu[step_a] >> 2 ;
000290   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
000292   0d02     mullw   0x02             	MULLW	0x02
000294   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000296   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000298   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
00029a   f004
00029c   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00029e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002a0   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0002a2   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0002a4   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0002a6   ffe9
0002a8   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0002aa   ffea
0002ac   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0002ae   f004
0002b0   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0002b2   f005
0002b4   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002b6   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0002b8   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0002ba   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0002bc   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0002be   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0002c0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0002c2   010f     movlb   0xf              	BANKSEL	_CCPR5L
0002c4   6f55     movwf   0x55, 0x1        	MOVWF	_CCPR5L, B
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
0002c6   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	556; stepperCon.c	CCP4CONbits.DC4B = 0x0c + (pwm_lu[step_b] & 0x3) << 4 ;
0002c8   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0002ca   0d02     mullw   0x02             	MULLW	0x02
0002cc   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0002ce   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0002d0   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0002d2   f004
0002d4   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0002d6   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002d8   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0002da   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0002dc   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0002de   ffe9
0002e0   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0002e2   ffea
0002e4   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0002e6   f004
0002e8   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0002ea   f005
0002ec   0e03     movlw   0x03             	MOVLW	0x03
0002ee   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
0002f0   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
0002f2   0bf0     andlw   0xf0             	ANDLW	0xf0
0002f4   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0002f6   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0002f8   0b03     andlw   0x03             	ANDLW	0x03
0002fa   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
0002fc   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0002fe   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000300   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
000302   0bcf     andlw   0xcf             	ANDLW	0xcf
000304   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000306   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000308   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
00030a   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	557; stepperCon.c	CCPR4L = pwm_lu[step_b] >> 2 ;
00030c   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
00030e   0d02     mullw   0x02             	MULLW	0x02
000310   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000312   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000314   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000316   f004
000318   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
00031a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00031c   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
00031e   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000320   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000322   ffe9
000324   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000326   ffea
000328   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00032a   f004
00032c   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
00032e   f005
000330   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000332   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
000334   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000336   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000338   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
00033a   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
00033c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00033e   010f     movlb   0xf              	BANKSEL	_CCPR4L
000340   6f58     movwf   0x58, 0x1        	MOVWF	_CCPR4L, B
                                           ;	.line	559; stepperCon.c	PORTAbits.RA4 = 1 ;
000342   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
                                           ;	.line	560; stepperCon.c	PORTAbits.RA5 = 1 ; 
000344   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
                                           ;	.line	562; stepperCon.c	state = NEXT_STEP ;
000346   0e06     movlw   0x06             	MOVLW	0x06
000348   010f     movlb   0xf              	BANKSEL	_state
00034a   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	563; stepperCon.c	break ;
00034c   d6a1     bra     0x000090         	BRA	_00437_DS_
                                           _00348_DS_:
                                           ;	.line	566; stepperCon.c	CM1CON0 = 0x09 ;
00034e   0e09     movlw   0x09             	MOVLW	0x09
000350   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           ;	.line	567; stepperCon.c	CM2CON0 = 0x08 ;
000352   0e08     movlw   0x08             	MOVLW	0x08
000354   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           ;	.line	569; stepperCon.c	CCP5CONbits.DC5B = pwm_a_l ;             // Set PWM duty cycle, Phase-A
000356   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000358   0b03     andlw   0x03             	ANDLW	0x03
00035a   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00035c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
00035e   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
000360   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
000362   0bcf     andlw   0xcf             	ANDLW	0xcf
000364   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000366   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
000368   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
                                           ;	.line	570; stepperCon.c	CCPR5L = pwm_a_h ;
00036a   c001     movff   0x001, 0xf55     	MOVFF	r0x01, _CCPR5L
00036c   ff55
                                           ;	.line	572; stepperCon.c	CCP4CONbits.DC4B = pwm_b_l ;             // Set PWM duty cycle, Phase-B
00036e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000370   0b03     andlw   0x03             	ANDLW	0x03
000372   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000374   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000376   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000378   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
00037a   0bcf     andlw   0xcf             	ANDLW	0xcf
00037c   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
00037e   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
000380   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	573; stepperCon.c	CCPR4L = pwm_b_h ;
000382   c003     movff   0x003, 0xf58     	MOVFF	r0x03, _CCPR4L
000384   ff58
                                           ;	.line	575; stepperCon.c	if (step_a > THREE_QUARTERS && step_a < (FULL_CYCLE - 1)) {
000386   0e31     movlw   0x31             	MOVLW	0x31
000388   010f     movlb   0xf              	BANKSEL	_step_a
00038a   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
00038c   e309     bnc     0x0003a0         	BNC	_00356_DS_
00038e   0e3f     movlw   0x3f             	MOVLW	0x3f
000390   010f     movlb   0xf              	BANKSEL	_step_a
000392   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
000394   e205     bc      0x0003a0         	BC	_00356_DS_
                                           ;	.line	576; stepperCon.c	a_decay = FAST_DECAY ;
000396   0e01     movlw   0x01             	MOVLW	0x01
000398   010f     movlb   0xf              	BANKSEL	_a_decay
00039a   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
                                           ;	.line	577; stepperCon.c	PORTAbits.RA4 = 1 ;
00039c   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
00039e   d012     bra     0x0003c4         	BRA	_00357_DS_
                                           _00356_DS_:
                                           ;	.line	579; stepperCon.c	else if (step_a >= HALF_CYCLE) a_decay = SLOW_DECAY ;
0003a0   0e20     movlw   0x20             	MOVLW	0x20
0003a2   010f     movlb   0xf              	BANKSEL	_step_a
0003a4   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
0003a6   e303     bnc     0x0003ae         	BNC	_00353_DS_
0003a8   010f     movlb   0xf              	BANKSEL	_a_decay
0003aa   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
0003ac   d00b     bra     0x0003c4         	BRA	_00357_DS_
                                           _00353_DS_:
                                           ;	.line	580; stepperCon.c	else if (step_a > STEPS) {
0003ae   0e11     movlw   0x11             	MOVLW	0x11
0003b0   010f     movlb   0xf              	BANKSEL	_step_a
0003b2   5d34     subwf   0x34, 0x0, 0x1   	SUBWF	_step_a, W, B
0003b4   e305     bnc     0x0003c0         	BNC	_00350_DS_
                                           ;	.line	581; stepperCon.c	a_decay = FAST_DECAY ;
0003b6   0e01     movlw   0x01             	MOVLW	0x01
0003b8   010f     movlb   0xf              	BANKSEL	_a_decay
0003ba   6f2b     movwf   0x2b, 0x1        	MOVWF	_a_decay, B
                                           ;	.line	582; stepperCon.c	PORTAbits.RA4 = 1 ;
0003bc   8880     bsf     0x80, 0x4, 0x0   	BSF	_PORTAbits, 4
0003be   d002     bra     0x0003c4         	BRA	_00357_DS_
                                           _00350_DS_:
0003c0   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	584; stepperCon.c	else a_decay = SLOW_DECAY ;
0003c2   6b2b     clrf    0x2b, 0x1        	CLRF	_a_decay, B
                                           _00357_DS_:
                                           ;	.line	586; stepperCon.c	if (step_b > THREE_QUARTERS && step_b < (FULL_CYCLE - 1)) {
0003c4   0e31     movlw   0x31             	MOVLW	0x31
0003c6   010f     movlb   0xf              	BANKSEL	_step_b
0003c8   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0003ca   e309     bnc     0x0003de         	BNC	_00366_DS_
0003cc   0e3f     movlw   0x3f             	MOVLW	0x3f
0003ce   010f     movlb   0xf              	BANKSEL	_step_b
0003d0   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0003d2   e205     bc      0x0003de         	BC	_00366_DS_
                                           ;	.line	587; stepperCon.c	b_decay = FAST_DECAY ;
0003d4   0e01     movlw   0x01             	MOVLW	0x01
0003d6   010f     movlb   0xf              	BANKSEL	_b_decay
0003d8   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
                                           ;	.line	588; stepperCon.c	PORTAbits.RA5 = 1 ;
0003da   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
0003dc   d012     bra     0x000402         	BRA	_00367_DS_
                                           _00366_DS_:
                                           ;	.line	590; stepperCon.c	else if (step_b >= HALF_CYCLE) b_decay = SLOW_DECAY ;
0003de   0e20     movlw   0x20             	MOVLW	0x20
0003e0   010f     movlb   0xf              	BANKSEL	_step_b
0003e2   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0003e4   e303     bnc     0x0003ec         	BNC	_00363_DS_
0003e6   010f     movlb   0xf              	BANKSEL	_b_decay
0003e8   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
0003ea   d00b     bra     0x000402         	BRA	_00367_DS_
                                           _00363_DS_:
                                           ;	.line	591; stepperCon.c	else if (step_b > STEPS) {
0003ec   0e11     movlw   0x11             	MOVLW	0x11
0003ee   010f     movlb   0xf              	BANKSEL	_step_b
0003f0   5d35     subwf   0x35, 0x0, 0x1   	SUBWF	_step_b, W, B
0003f2   e305     bnc     0x0003fe         	BNC	_00360_DS_
                                           ;	.line	592; stepperCon.c	b_decay = FAST_DECAY ;
0003f4   0e01     movlw   0x01             	MOVLW	0x01
0003f6   010f     movlb   0xf              	BANKSEL	_b_decay
0003f8   6f2d     movwf   0x2d, 0x1        	MOVWF	_b_decay, B
                                           ;	.line	593; stepperCon.c	PORTAbits.RA5 = 1 ;
0003fa   8a80     bsf     0x80, 0x5, 0x0   	BSF	_PORTAbits, 5
0003fc   d002     bra     0x000402         	BRA	_00367_DS_
                                           _00360_DS_:
0003fe   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	595; stepperCon.c	else b_decay = SLOW_DECAY ;
000400   6b2d     clrf    0x2d, 0x1        	CLRF	_b_decay, B
                                           _00367_DS_:
000402   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	597; stepperCon.c	if (pol_a == 2) {
000404   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
000406   0a02     xorlw   0x02             	XORLW	0x02
000408   e103     bnz     0x000410         	BNZ	_00373_DS_
                                           ;	.line	598; stepperCon.c	LATCbits.LATC1 = 0 ;
00040a   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	599; stepperCon.c	LATCbits.LATC0 = 0 ;
00040c   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
00040e   d00c     bra     0x000428         	BRA	_00374_DS_
                                           _00373_DS_:
000410   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	601; stepperCon.c	else if (pol_a) {               // Forward current, Phase-A
000412   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
000414   e005     bz      0x000420         	BZ	_00370_DS_
                                           ;	.line	602; stepperCon.c	LATCbits.LATC1 = 0 ;
000416   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	603; stepperCon.c	LATCbits.LATC0 = 1 ;
000418   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
                                           ;	.line	604; stepperCon.c	CM1CON0 = 0x99 ; 
00041a   0e99     movlw   0x99             	MOVLW	0x99
00041c   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
00041e   d004     bra     0x000428         	BRA	_00374_DS_
                                           _00370_DS_:
                                           ;	.line	607; stepperCon.c	LATCbits.LATC0 = 0 ;
000420   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	608; stepperCon.c	LATCbits.LATC1 = 1 ;
000422   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
                                           ;	.line	609; stepperCon.c	CM1CON0 = 0x89 ; 
000424   0e89     movlw   0x89             	MOVLW	0x89
000426   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           _00374_DS_:
000428   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	612; stepperCon.c	if(pol_b == 2) {
00042a   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
00042c   0a02     xorlw   0x02             	XORLW	0x02
00042e   e103     bnz     0x000436         	BNZ	_00379_DS_
                                           ;	.line	613; stepperCon.c	LATCbits.LATC2 = 0 ;
000430   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	614; stepperCon.c	LATDbits.LATD5 = 0 ;
000432   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
000434   d00c     bra     0x00044e         	BRA	_00380_DS_
                                           _00379_DS_:
000436   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	616; stepperCon.c	else if (pol_b) {               // Forward current, Phase-B
000438   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
00043a   e005     bz      0x000446         	BZ	_00376_DS_
                                           ;	.line	617; stepperCon.c	LATCbits.LATC2 = 0 ;
00043c   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	618; stepperCon.c	LATDbits.LATD5 = 1 ;
00043e   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
                                           ;	.line	619; stepperCon.c	CM2CON0 = 0x98 ;
000440   0e98     movlw   0x98             	MOVLW	0x98
000442   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
000444   d004     bra     0x00044e         	BRA	_00380_DS_
                                           _00376_DS_:
                                           ;	.line	622; stepperCon.c	LATDbits.LATD5 = 0 ;
000446   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	623; stepperCon.c	LATCbits.LATC2 = 1 ;
000448   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
                                           ;	.line	624; stepperCon.c	CM2CON0 = 0x88 ;
00044a   0e88     movlw   0x88             	MOVLW	0x88
00044c   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           _00380_DS_:
                                           ;	.line	627; stepperCon.c	state = NEXT_STEP ;
00044e   0e06     movlw   0x06             	MOVLW	0x06
000450   010f     movlb   0xf              	BANKSEL	_state
000452   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	628; stepperCon.c	break ;
000454   ef48     goto    0x000090         	GOTO	_00437_DS_
000456   f000
                                           _00381_DS_:
                                           ;	.line	631; stepperCon.c	state = RUNNING ;
000458   0e02     movlw   0x02             	MOVLW	0x02
00045a   010f     movlb   0xf              	BANKSEL	_state
00045c   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
00045e   010f     movlb   0xf              	BANKSEL	_dir
                                           ;	.line	634; stepperCon.c	if (dir == 1) {
000460   5125     movf    0x25, 0x0, 0x1   	MOVF	_dir, W, B
000462   0a01     xorlw   0x01             	XORLW	0x01
000464   e113     bnz     0x00048c         	BNZ	_00391_DS_
                                           ;	.line	635; stepperCon.c	if (step_a++ == FULL_CYCLE - 1) step_a = 0 ;
000466   cf34     movff   0xf34, 0x004     	MOVFF	_step_a, r0x04
000468   f004
00046a   010f     movlb   0xf              	BANKSEL	_step_a
00046c   2b34     incf    0x34, 0x1, 0x1   	INCF	_step_a, F, B
00046e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000470   0a3f     xorlw   0x3f             	XORLW	0x3f
000472   e102     bnz     0x000478         	BNZ	_00383_DS_
                                           _00654_DS_:
000474   010f     movlb   0xf              	BANKSEL	_step_a
000476   6b34     clrf    0x34, 0x1        	CLRF	_step_a, B
                                           _00383_DS_:
                                           ;	.line	636; stepperCon.c	if (step_b++ == FULL_CYCLE - 1) step_b = 0 ;
000478   cf35     movff   0xf35, 0x004     	MOVFF	_step_b, r0x04
00047a   f004
00047c   010f     movlb   0xf              	BANKSEL	_step_b
00047e   2b35     incf    0x35, 0x1, 0x1   	INCF	_step_b, F, B
000480   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000482   0a3f     xorlw   0x3f             	XORLW	0x3f
000484   e115     bnz     0x0004b0         	BNZ	_00392_DS_
                                           _00656_DS_:
000486   010f     movlb   0xf              	BANKSEL	_step_b
000488   6b35     clrf    0x35, 0x1        	CLRF	_step_b, B
00048a   d012     bra     0x0004b0         	BRA	_00392_DS_
                                           _00391_DS_:
                                           ;	.line	640; stepperCon.c	if (step_a-- == 0) step_a = FULL_CYCLE - 1 ;
00048c   cf34     movff   0xf34, 0x004     	MOVFF	_step_a, r0x04
00048e   f004
000490   010f     movlb   0xf              	BANKSEL	_step_a
000492   0734     decf    0x34, 0x1, 0x1   	DECF	_step_a, F, B
000494   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000496   e103     bnz     0x00049e         	BNZ	_00387_DS_
000498   0e3f     movlw   0x3f             	MOVLW	0x3f
00049a   010f     movlb   0xf              	BANKSEL	_step_a
00049c   6f34     movwf   0x34, 0x1        	MOVWF	_step_a, B
                                           _00387_DS_:
                                           ;	.line	641; stepperCon.c	if (step_b-- == 0) step_b = FULL_CYCLE - 1 ;
00049e   cf35     movff   0xf35, 0x004     	MOVFF	_step_b, r0x04
0004a0   f004
0004a2   010f     movlb   0xf              	BANKSEL	_step_b
0004a4   0735     decf    0x35, 0x1, 0x1   	DECF	_step_b, F, B
0004a6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004a8   e103     bnz     0x0004b0         	BNZ	_00392_DS_
0004aa   0e3f     movlw   0x3f             	MOVLW	0x3f
0004ac   010f     movlb   0xf              	BANKSEL	_step_b
0004ae   6f35     movwf   0x35, 0x1        	MOVWF	_step_b, B
                                           _00392_DS_:
0004b0   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	645; stepperCon.c	if (step_a == HALF_CYCLE || step_a == 0 || pwm_lu[step_a] == zero_cross) pol_a = 2 ;
0004b2   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0004b4   0a20     xorlw   0x20             	XORLW	0x20
0004b6   e01f     bz      0x0004f6         	BZ	_00396_DS_
                                           _00658_DS_:
0004b8   010f     movlb   0xf              	BANKSEL	_step_a
0004ba   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0004bc   e01c     bz      0x0004f6         	BZ	_00396_DS_
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
0004be   010f     movlb   0xf              	BANKSEL	_step_a
0004c0   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
0004c2   0d02     mullw   0x02             	MULLW	0x02
0004c4   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0004c6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0004c8   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0004ca   f004
0004cc   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0004ce   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0004d0   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0004d2   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0004d4   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0004d6   ffe9
0004d8   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0004da   ffea
0004dc   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0004de   f004
0004e0   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0004e2   f005
0004e4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004e6   0100     movlb   0x0              	BANKSEL	_zero_cross
0004e8   19fe     xorwf   0xfe, 0x0, 0x1   	XORWF	_zero_cross, W, B
0004ea   e104     bnz     0x0004f4         	BNZ	_00659_DS_
0004ec   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0004ee   0100     movlb   0x0              	BANKSEL	(_zero_cross + 1)
0004f0   19ff     xorwf   0xff, 0x0, 0x1   	XORWF	(_zero_cross + 1), W, B
0004f2   e001     bz      0x0004f6         	BZ	_00396_DS_
                                           _00659_DS_:
0004f4   d004     bra     0x0004fe         	BRA	_00397_DS_
                                           _00396_DS_:
0004f6   0e02     movlw   0x02             	MOVLW	0x02
0004f8   010f     movlb   0xf              	BANKSEL	_pol_a
0004fa   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
0004fc   d00e     bra     0x00051a         	BRA	_00398_DS_
                                           _00397_DS_:
0004fe   0100     movlb   0x0              	BANKSEL	(_zero_cross + 1)
                                           ;	.line	646; stepperCon.c	else if (pwm_lu[step_a] < zero_cross) pol_a = 0 ;
000500   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_zero_cross + 1), W, B
000502   5c05     subwf   0x05, 0x0, 0x0   	SUBWF	r0x05, W
000504   e103     bnz     0x00050c         	BNZ	_00661_DS_
000506   0100     movlb   0x0              	BANKSEL	_zero_cross
000508   51fe     movf    0xfe, 0x0, 0x1   	MOVF	_zero_cross, W, B
00050a   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00661_DS_:
00050c   e203     bc      0x000514         	BC	_00394_DS_
00050e   010f     movlb   0xf              	BANKSEL	_pol_a
000510   6b2c     clrf    0x2c, 0x1        	CLRF	_pol_a, B
000512   d003     bra     0x00051a         	BRA	_00398_DS_
                                           _00394_DS_:
                                           ;	.line	647; stepperCon.c	else pol_a = 1 ;
000514   0e01     movlw   0x01             	MOVLW	0x01
000516   010f     movlb   0xf              	BANKSEL	_pol_a
000518   6f2c     movwf   0x2c, 0x1        	MOVWF	_pol_a, B
                                           _00398_DS_:
00051a   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	649; stepperCon.c	if (step_b == HALF_CYCLE || step_b == 0 || pwm_lu[step_b] == zero_cross) pol_b = 2 ;
00051c   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
00051e   0a20     xorlw   0x20             	XORLW	0x20
000520   e01f     bz      0x000560         	BZ	_00404_DS_
                                           _00663_DS_:
000522   010f     movlb   0xf              	BANKSEL	_step_b
000524   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
000526   e01c     bz      0x000560         	BZ	_00404_DS_
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
000528   010f     movlb   0xf              	BANKSEL	_step_b
00052a   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
00052c   0d02     mullw   0x02             	MULLW	0x02
00052e   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000530   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000532   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000534   f004
000536   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
000538   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00053a   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
00053c   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00053e   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000540   ffe9
000542   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000544   ffea
000546   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000548   f004
00054a   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
00054c   f005
00054e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000550   0100     movlb   0x0              	BANKSEL	_zero_cross
000552   19fe     xorwf   0xfe, 0x0, 0x1   	XORWF	_zero_cross, W, B
000554   e104     bnz     0x00055e         	BNZ	_00664_DS_
000556   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000558   0100     movlb   0x0              	BANKSEL	(_zero_cross + 1)
00055a   19ff     xorwf   0xff, 0x0, 0x1   	XORWF	(_zero_cross + 1), W, B
00055c   e001     bz      0x000560         	BZ	_00404_DS_
                                           _00664_DS_:
00055e   d004     bra     0x000568         	BRA	_00405_DS_
                                           _00404_DS_:
000560   0e02     movlw   0x02             	MOVLW	0x02
000562   010f     movlb   0xf              	BANKSEL	_pol_b
000564   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
000566   d00e     bra     0x000584         	BRA	_00406_DS_
                                           _00405_DS_:
000568   0100     movlb   0x0              	BANKSEL	(_zero_cross + 1)
                                           ;	.line	650; stepperCon.c	else if (pwm_lu[step_b] < zero_cross) pol_b = 0 ;
00056a   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_zero_cross + 1), W, B
00056c   5c05     subwf   0x05, 0x0, 0x0   	SUBWF	r0x05, W
00056e   e103     bnz     0x000576         	BNZ	_00666_DS_
000570   0100     movlb   0x0              	BANKSEL	_zero_cross
000572   51fe     movf    0xfe, 0x0, 0x1   	MOVF	_zero_cross, W, B
000574   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00666_DS_:
000576   e203     bc      0x00057e         	BC	_00402_DS_
000578   010f     movlb   0xf              	BANKSEL	_pol_b
00057a   6b2e     clrf    0x2e, 0x1        	CLRF	_pol_b, B
00057c   d003     bra     0x000584         	BRA	_00406_DS_
                                           _00402_DS_:
                                           ;	.line	651; stepperCon.c	else pol_b = 1 ;
00057e   0e01     movlw   0x01             	MOVLW	0x01
000580   010f     movlb   0xf              	BANKSEL	_pol_b
000582   6f2e     movwf   0x2e, 0x1        	MOVWF	_pol_b, B
                                           ; ;multiply lit val:0x02 by variable _step_a and store in r0x04
                                           _00406_DS_:
000584   010f     movlb   0xf              	BANKSEL	_step_a
                                           ;	.line	654; stepperCon.c	pwm_a_l = 0x0c + (pwm_lu[step_a] & 0x3) << 4 ;
000586   5134     movf    0x34, 0x0, 0x1   	MOVF	_step_a, W, B
000588   0d02     mullw   0x02             	MULLW	0x02
00058a   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00058c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00058e   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
000590   f004
000592   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
000594   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000596   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
000598   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00059a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00059c   ffe9
00059e   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0005a0   ffea
0005a2   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0005a4   f004
0005a6   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0005a8   f005
0005aa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005ac   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0005ae   0e03     movlw   0x03             	MOVLW	0x03
0005b0   1606     andwf   0x06, 0x1, 0x0   	ANDWF	r0x06, F
0005b2   0e0c     movlw   0x0c             	MOVLW	0x0c
0005b4   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
0005b6   3806     swapf   0x06, 0x0, 0x0   	SWAPF	r0x06, W
0005b8   0bf0     andlw   0xf0             	ANDLW	0xf0
0005ba   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	655; stepperCon.c	pwm_a_h = pwm_lu[step_a] >> 2 ;
0005bc   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0005be   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0005c0   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0005c2   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0005c4   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0005c6   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0005c8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005ca   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ; ;multiply lit val:0x02 by variable _step_b and store in r0x04
0005cc   010f     movlb   0xf              	BANKSEL	_step_b
                                           ;	.line	657; stepperCon.c	pwm_b_l = 0x0c + (pwm_lu[step_b] & 0x3) << 4 ;
0005ce   5135     movf    0x35, 0x0, 0x1   	MOVF	_step_b, W, B
0005d0   0d02     mullw   0x02             	MULLW	0x02
0005d2   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0005d4   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0005d6   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0005d8   f004
0005da   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0005dc   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0005de   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0005e0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0005e2   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0005e4   ffe9
0005e6   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0005e8   ffea
0005ea   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0005ec   f004
0005ee   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0005f0   f005
0005f2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005f4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0005f6   0e03     movlw   0x03             	MOVLW	0x03
0005f8   1606     andwf   0x06, 0x1, 0x0   	ANDWF	r0x06, F
0005fa   0e0c     movlw   0x0c             	MOVLW	0x0c
0005fc   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
0005fe   3806     swapf   0x06, 0x0, 0x0   	SWAPF	r0x06, W
000600   0bf0     andlw   0xf0             	ANDLW	0xf0
000602   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           ;	.line	658; stepperCon.c	pwm_b_h = pwm_lu[step_b] >> 2 ;
000604   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000606   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
000608   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
00060a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00060c   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
00060e   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
000610   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000612   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           ;	.line	660; stepperCon.c	break ;
000614   ef48     goto    0x000090         	GOTO	_00437_DS_
000616   f000
                                           _00409_DS_:
                                           ;	.line	663; stepperCon.c	if(CM1CON0bits.C1OUT && a_state == T_DRIVE) {
000618   ac79     btfss   0x79, 0x6, 0x0   	BTFSS	_CM1CON0bits, 6
00061a   d016     bra     0x000648         	BRA	_00417_DS_
00061c   010f     movlb   0xf              	BANKSEL	_a_state
00061e   5128     movf    0x28, 0x0, 0x1   	MOVF	_a_state, W, B
000620   0a02     xorlw   0x02             	XORLW	0x02
000622   e112     bnz     0x000648         	BNZ	_00417_DS_
                                           _00670_DS_:
000624   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	664; stepperCon.c	if (a_decay == FAST_DECAY) {            
000626   512b     movf    0x2b, 0x0, 0x1   	MOVF	_a_decay, W, B
000628   0a01     xorlw   0x01             	XORLW	0x01
00062a   e109     bnz     0x00063e         	BNZ	_00414_DS_
                                           _00672_DS_:
00062c   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	665; stepperCon.c	if (pol_a) {                    // Forward current, Phase-A
00062e   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
000630   e003     bz      0x000638         	BZ	_00411_DS_
                                           ;	.line	666; stepperCon.c	LATCbits.LATC0 = 0 ;
000632   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	667; stepperCon.c	LATCbits.LATC1 = 1 ;  
000634   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
000636   d004     bra     0x000640         	BRA	_00415_DS_
                                           _00411_DS_:
                                           ;	.line	670; stepperCon.c	LATCbits.LATC1 = 0 ;
000638   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	671; stepperCon.c	LATCbits.LATC0 = 1 ;
00063a   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
00063c   d001     bra     0x000640         	BRA	_00415_DS_
                                           _00414_DS_:
                                           ;	.line	674; stepperCon.c	else PORTAbits.RA4 = 0 ;
00063e   9880     bcf     0x80, 0x4, 0x0   	BCF	_PORTAbits, 4
                                           _00415_DS_:
                                           ;	.line	676; stepperCon.c	a_state = PH_OFF ;
000640   0e01     movlw   0x01             	MOVLW	0x01
000642   010f     movlb   0xf              	BANKSEL	_a_state
000644   6f28     movwf   0x28, 0x1        	MOVWF	_a_state, B
                                           ;	.line	677; stepperCon.c	T1CONbits.TMR1ON = 1 ;
000646   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00417_DS_:
                                           ;	.line	680; stepperCon.c	if(CM2CON0bits.C2OUT && b_state == T_DRIVE) {
000648   ac78     btfss   0x78, 0x6, 0x0   	BTFSS	_CM2CON0bits, 6
00064a   d016     bra     0x000678         	BRA	_00426_DS_
00064c   010f     movlb   0xf              	BANKSEL	_b_state
00064e   512a     movf    0x2a, 0x0, 0x1   	MOVF	_b_state, W, B
000650   0a02     xorlw   0x02             	XORLW	0x02
000652   e112     bnz     0x000678         	BNZ	_00426_DS_
                                           _00674_DS_:
000654   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	681; stepperCon.c	if (b_decay == FAST_DECAY) {
000656   512d     movf    0x2d, 0x0, 0x1   	MOVF	_b_decay, W, B
000658   0a01     xorlw   0x01             	XORLW	0x01
00065a   e109     bnz     0x00066e         	BNZ	_00423_DS_
                                           _00676_DS_:
00065c   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	682; stepperCon.c	if (pol_b) {                    // Forward current, Phase-B
00065e   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
000660   e003     bz      0x000668         	BZ	_00420_DS_
                                           ;	.line	683; stepperCon.c	LATDbits.LATD5 = 0 ;
000662   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	684; stepperCon.c	LATCbits.LATC2 = 1 ;
000664   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
000666   d004     bra     0x000670         	BRA	_00424_DS_
                                           _00420_DS_:
                                           ;	.line	687; stepperCon.c	LATCbits.LATC2 = 0 ;
000668   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	688; stepperCon.c	LATDbits.LATD5 = 1 ;
00066a   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
00066c   d001     bra     0x000670         	BRA	_00424_DS_
                                           _00423_DS_:
                                           ;	.line	691; stepperCon.c	else PORTAbits.RA5 = 0 ;
00066e   9a80     bcf     0x80, 0x5, 0x0   	BCF	_PORTAbits, 5
                                           _00424_DS_:
                                           ;	.line	693; stepperCon.c	b_state = PH_OFF ;
000670   0e01     movlw   0x01             	MOVLW	0x01
000672   010f     movlb   0xf              	BANKSEL	_b_state
000674   6f2a     movwf   0x2a, 0x1        	MOVWF	_b_state, B
                                           ;	.line	694; stepperCon.c	T3CONbits.TMR3ON = 1 ;
000676   80b1     bsf     0xb1, 0x0, 0x0   	BSF	_T3CONbits, 0
                                           _00426_DS_:
                                           ;	.line	698; stepperCon.c	if (!PORTBbits.RB3) {
000678   b681     btfsc   0x81, 0x3, 0x0   	BTFSC	_PORTBbits, 3
00067a   ef48     goto    0x000090         	GOTO	_00437_DS_
00067c   f000
                                           ;	.line	699; stepperCon.c	INTCONbits.GIE = 0 ;
00067e   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	700; stepperCon.c	idleInts() ;
000680   ec56     call    0x0022ac, 0x0    	CALL	_idleInts
000682   f011
                                           ;	.line	702; stepperCon.c	CM1CON0bits.C1ON = 0 ;
000684   9e79     bcf     0x79, 0x7, 0x0   	BCF	_CM1CON0bits, 7
                                           ;	.line	703; stepperCon.c	CM2CON0bits.C2ON = 0 ;
000686   9e78     bcf     0x78, 0x7, 0x0   	BCF	_CM2CON0bits, 7
                                           ;	.line	705; stepperCon.c	CM1CON0bits.C1ON = 0 ; 
000688   9e79     bcf     0x79, 0x7, 0x0   	BCF	_CM1CON0bits, 7
                                           ;	.line	706; stepperCon.c	CM2CON0bits.C2OE = 0 ;
00068a   9a78     bcf     0x78, 0x5, 0x0   	BCF	_CM2CON0bits, 5
                                           ;	.line	708; stepperCon.c	LATAbits.LATA4 = 0 ;    // Shut phases down
00068c   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	709; stepperCon.c	LATAbits.LATA5 = 0 ; 
00068e   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
                                           ;	.line	711; stepperCon.c	PORTDbits.RD2 = 0 ;     // Turn blue LED off
000690   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
000692   010f     movlb   0xf              	BANKSEL	_state
                                           ;	.line	712; stepperCon.c	state = IDLE ;
000694   6b24     clrf    0x24, 0x1        	CLRF	_state, B
                                           ;	.line	713; stepperCon.c	INTCONbits.GIE = 1 ;
000696   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	715; stepperCon.c	break ;
000698   ef48     goto    0x000090         	GOTO	_00437_DS_
00069a   f000
                                           _00430_DS_:
                                           ;	.line	719; stepperCon.c	if (PORTBbits.RB3) state = START ;
00069c   a681     btfss   0x81, 0x3, 0x0   	BTFSS	_PORTBbits, 3
00069e   d003     bra     0x0006a6         	BRA	_00432_DS_
0006a0   0e01     movlw   0x01             	MOVLW	0x01
0006a2   010f     movlb   0xf              	BANKSEL	_state
0006a4   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           _00432_DS_:
0006a6   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	722; stepperCon.c	if (i2c_dirty) {
0006a8   5131     movf    0x31, 0x0, 0x1   	MOVF	_i2c_dirty, W, B
0006aa   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
0006ac   ef48     goto    0x000090         	GOTO	_00437_DS_
0006ae   f000
                                           ;	.line	723; stepperCon.c	store_regs(i2c_regs, sizeof(i2c_regs)) ;
0006b0   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
0006b2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0006b4   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
0006b6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0006b8   0e80     movlw   0x80             	MOVLW	0x80
0006ba   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0006bc   0e09     movlw   0x09             	MOVLW	0x09
0006be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006c0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0006c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006c4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0006c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006c8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0006ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006cc   ec69     call    0x001ad2, 0x0    	CALL	_store_regs
0006ce   f00d
0006d0   0e04     movlw   0x04             	MOVLW	0x04
0006d2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0006d4   010f     movlb   0xf              	BANKSEL	_i2c_dirty
                                           ;	.line	724; stepperCon.c	i2c_dirty = 0 ;
0006d6   6b31     clrf    0x31, 0x1        	CLRF	_i2c_dirty, B
                                           ;	.line	725; stepperCon.c	set_op_vars() ; 
0006d8   ec25     call    0x001c4a, 0x0    	CALL	_set_op_vars
0006da   f00e
                                           ;	.line	729; stepperCon.c	}
0006dc   ef48     goto    0x000090         	GOTO	_00437_DS_
0006de   f000
                                           ;	.line	731; stepperCon.c	}
0006e0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__delay_ms	code
                                           _delay_ms:
                                           ;	.line	406; stepperCon.c	void delay_ms(uint16_t time) {
00202c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00202e   ffe5
002030   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002032   ffd9
002034   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002036   ffe5
002038   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00203a   ffe5
00203c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00203e   ffe5
002040   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002042   ffe5
002044   0e02     movlw   0x02             	MOVLW	0x02
002046   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002048   f000
00204a   0e03     movlw   0x03             	MOVLW	0x03
00204c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00204e   f001
                                           ;	.line	409; stepperCon.c	T0CON = 0x02 ;
002050   0e02     movlw   0x02             	MOVLW	0x02
002052   6ed5     movwf   0xd5, 0x0        	MOVWF	_T0CON
                                           _00290_DS_:
                                           ;	.line	411; stepperCon.c	while(--i) {
002054   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002056   0fff     addlw   0xff             	ADDLW	0xff
002058   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00205a   0eff     movlw   0xff             	MOVLW	0xff
00205c   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
00205e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002060   c002     movff   0x002, 0x000     	MOVFF	r0x02, r0x00
002062   f000
002064   c003     movff   0x003, 0x001     	MOVFF	r0x03, r0x01
002066   f001
002068   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00206a   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
00206c   e00a     bz      0x002082         	BZ	_00292_DS_
                                           ;	.line	412; stepperCon.c	T0CONbits.TMR0ON = 0 ;
00206e   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	413; stepperCon.c	INTCONbits.TMR0IF = 0 ;
002070   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	414; stepperCon.c	TMR0H = TMR_1MS >> 8 ;
002072   0ef8     movlw   0xf8             	MOVLW	0xf8
002074   6ed7     movwf   0xd7, 0x0        	MOVWF	_TMR0H
                                           ;	.line	415; stepperCon.c	TMR0L = TMR_1MS ;
002076   0e30     movlw   0x30             	MOVLW	0x30
002078   6ed6     movwf   0xd6, 0x0        	MOVWF	_TMR0L
                                           ;	.line	416; stepperCon.c	T0CONbits.TMR0ON = 1 ;
00207a   8ed5     bsf     0xd5, 0x7, 0x0   	BSF	_T0CONbits, 7
                                           _00287_DS_:
                                           ;	.line	418; stepperCon.c	while(!INTCONbits.TMR0IF) ;
00207c   b4f2     btfsc   0xf2, 0x2, 0x0   	BTFSC	_INTCONbits, 2
00207e   d7ea     bra     0x002054         	BRA	_00290_DS_
002080   d7fd     bra     0x00207c         	BRA	_00287_DS_
                                           _00292_DS_:
                                           ;	.line	421; stepperCon.c	T0CONbits.TMR0ON = 0 ;
002082   9ed5     bcf     0xd5, 0x7, 0x0   	BCF	_T0CONbits, 7
                                           ;	.line	422; stepperCon.c	INTCONbits.TMR0IF = 0 ;
002084   94f2     bcf     0xf2, 0x2, 0x0   	BCF	_INTCONbits, 2
                                           ;	.line	423; stepperCon.c	}
002086   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002088   f003
00208a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00208c   f002
00208e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002090   f001
002092   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002094   f000
002096   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002098   ffd9
00209a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__set_op_vars	code
                                           _set_op_vars:
                                           ;	.line	394; stepperCon.c	void set_op_vars(void) {
001c4a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001c4c   ffe5
001c4e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001c50   ffd9
001c52   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001c54   ffe5
001c56   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001c58   ffe5
001c5a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001c5c   ffe5
001c5e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001c60   ffe5
                                           ;	.line	395; stepperCon.c	i2c_address = i2c_regs[0x00] ;
001c62   c0e1     movff   0x0e1, 0xf32     	MOVFF	_i2c_regs, _i2c_address
001c64   ff32
                                           ;	.line	396; stepperCon.c	skip        = i2c_regs[0x01] ;
001c66   c0e2     movff   0x0e2, 0xf33     	MOVFF	(_i2c_regs + 1), _skip
001c68   ff33
                                           ;	.line	397; stepperCon.c	set_amp     = i2c_regs[0x02] ;
001c6a   c0e3     movff   0x0e3, 0xf20     	MOVFF	(_i2c_regs + 2), _set_amp
001c6c   ff20
001c6e   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
001c70   6b21     clrf    0x21, 0x1        	CLRF	(_set_amp + 1), B
                                           ;	.line	398; stepperCon.c	set_amp    += i2c_regs[0x03] << 8 ;
001c72   c0e4     movff   0x0e4, 0x000     	MOVFF	(_i2c_regs + 3), r0x00
001c74   f000
001c76   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c78   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c7a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001c7c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001c7e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001c80   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c82   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001c84   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c86   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c88   010f     movlb   0xf              	BANKSEL	_set_amp
001c8a   2720     addwf   0x20, 0x1, 0x1   	ADDWF	_set_amp, F, B
001c8c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c8e   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
001c90   2321     addwfc  0x21, 0x1, 0x1   	ADDWFC	(_set_amp + 1), F, B
                                           ;	.line	399; stepperCon.c	max_amp     = i2c_regs[0x04] ;
001c92   c0e5     movff   0x0e5, 0xf22     	MOVFF	(_i2c_regs + 4), _max_amp
001c94   ff22
001c96   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001c98   6b23     clrf    0x23, 0x1        	CLRF	(_max_amp + 1), B
                                           ;	.line	400; stepperCon.c	max_amp    += i2c_regs[0x05] << 8 ;
001c9a   c0e6     movff   0x0e6, 0x000     	MOVFF	(_i2c_regs + 5), r0x00
001c9c   f000
001c9e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001ca0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001ca2   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001ca4   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001ca6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001ca8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001caa   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001cac   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001cae   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001cb0   010f     movlb   0xf              	BANKSEL	_max_amp
001cb2   2722     addwf   0x22, 0x1, 0x1   	ADDWF	_max_amp, F, B
001cb4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001cb6   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001cb8   2323     addwfc  0x23, 0x1, 0x1   	ADDWFC	(_max_amp + 1), F, B
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 6) and store in _t_off
001cba   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 6)
                                           ;	.line	401; stepperCon.c	t_off       = i2c_regs[0x06] * 2 * TMR_500NS ;
001cbc   51e7     movf    0xe7, 0x0, 0x1   	MOVF	(_i2c_regs + 6), W, B
001cbe   0d02     mullw   0x02             	MULLW	0x02
001cc0   cff3     movff   0xff3, 0xf29     	MOVFF	PRODL, _t_off
001cc2   ff29
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 7) and store in _t_blank_low
001cc4   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 7)
                                           ;	.line	402; stepperCon.c	t_blank_low = i2c_regs[0x07] * 2 * TMR_500NS ;
001cc6   51e8     movf    0xe8, 0x0, 0x1   	MOVF	(_i2c_regs + 7), W, B
001cc8   0d02     mullw   0x02             	MULLW	0x02
001cca   cff3     movff   0xff3, 0xf27     	MOVFF	PRODL, _t_blank_low
001ccc   ff27
                                           ; ;multiply lit val:0x02 by variable (_i2c_regs + 8) and store in _t_blank_high
001cce   0100     movlb   0x0              	BANKSEL	(_i2c_regs + 8)
                                           ;	.line	403; stepperCon.c	t_blank_high= i2c_regs[0x08] * 2 * TMR_500NS ;
001cd0   51e9     movf    0xe9, 0x0, 0x1   	MOVF	(_i2c_regs + 8), W, B
001cd2   0d02     mullw   0x02             	MULLW	0x02
001cd4   cff3     movff   0xff3, 0xf26     	MOVFF	PRODL, _t_blank_high
001cd6   ff26
                                           ;	.line	404; stepperCon.c	}
001cd8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001cda   f003
001cdc   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001cde   f002
001ce0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001ce2   f001
001ce4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001ce6   f000
001ce8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001cea   ffd9
001cec   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__prep_pwm_lu	code
                                           _prep_pwm_lu:
                                           ;	.line	379; stepperCon.c	void prep_pwm_lu(void) {
00132a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00132c   ffe5
00132e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001330   ffd9
001332   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001334   ffe5
001336   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001338   ffe5
00133a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00133c   ffe5
00133e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001340   ffe5
001342   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001344   ffe5
001346   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001348   ffe5
00134a   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00134c   ffe5
00134e   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001350   ffe5
001352   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001354   ffe5
001356   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
001358   ffe5
00135a   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
00135c   ffe5
00135e   010f     movlb   0xf              	BANKSEL	(_set_amp + 1)
                                           ;	.line	383; stepperCon.c	ratio = (float)set_amp / (float)max_amp ;
001360   5121     movf    0x21, 0x0, 0x1   	MOVF	(_set_amp + 1), W, B
001362   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001364   010f     movlb   0xf              	BANKSEL	_set_amp
001366   5120     movf    0x20, 0x0, 0x1   	MOVF	_set_amp, W, B
001368   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00136a   ec4e     call    0x00209c, 0x0    	CALL	___uint2fs
00136c   f010
00136e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001370   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001372   f001
001374   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
001376   f002
001378   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
00137a   f003
00137c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00137e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001380   010f     movlb   0xf              	BANKSEL	(_max_amp + 1)
001382   5123     movf    0x23, 0x0, 0x1   	MOVF	(_max_amp + 1), W, B
001384   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001386   010f     movlb   0xf              	BANKSEL	_max_amp
001388   5122     movf    0x22, 0x0, 0x1   	MOVF	_max_amp, W, B
00138a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00138c   ec4e     call    0x00209c, 0x0    	CALL	___uint2fs
00138e   f010
001390   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001392   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001394   f005
001396   cff4     movff   0xff4, 0x006     	MOVFF	PRODH, r0x06
001398   f006
00139a   cfe9     movff   0xfe9, 0x007     	MOVFF	FSR0L, r0x07
00139c   f007
00139e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0013a0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0013a2   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0013a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013a6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0013a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013aa   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0013ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013ae   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0013b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013b2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0013b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013b6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0013b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013ba   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0013bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013be   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0013c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013c2   ecdf     call    0x000dbe, 0x0    	CALL	___fsdiv
0013c4   f006
0013c6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0013c8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0013ca   f001
0013cc   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
0013ce   f002
0013d0   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
0013d2   f003
0013d4   0e08     movlw   0x08             	MOVLW	0x08
0013d6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	386; stepperCon.c	zero_cross = __fs2uint(bias) ;
0013d8   0e43     movlw   0x43             	MOVLW	0x43
0013da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013dc   0eff     movlw   0xff             	MOVLW	0xff
0013de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013e0   0ec0     movlw   0xc0             	MOVLW	0xc0
0013e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013e4   0e00     movlw   0x00             	MOVLW	0x00
0013e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013e8   ec19     call    0x001e32, 0x0    	CALL	___fs2uint
0013ea   f00f
0013ec   0100     movlb   0x0              	BANKSEL	_zero_cross
0013ee   6ffe     movwf   0xfe, 0x1        	MOVWF	_zero_cross, B
0013f0   cff3     movff   0xff3, 0x0ff     	MOVFF	PRODL, (_zero_cross + 1)
0013f2   f0ff
0013f4   0e04     movlw   0x04             	MOVLW	0x04
0013f6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	388; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0013f8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           ; ;multiply lit val:0x02 by variable r0x04 and store in r0x05
                                           _00269_DS_:
                                           ;	.line	389; stepperCon.c	set = (float)pwm_base[i] * ratio + bias ;
0013fa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0013fc   0d02     mullw   0x02             	MULLW	0x02
0013fe   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001400   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001402   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001404   f005
001406   0e60     movlw   0x60             	MOVLW	LOW(_pwm_base)
001408   2405     addwf   0x05, 0x0, 0x0   	ADDWF	r0x05, W
00140a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00140c   0e00     movlw   0x00             	MOVLW	HIGH(_pwm_base)
00140e   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
001410   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001412   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
001414   ffe9
001416   c008     movff   0x008, 0xfea     	MOVFF	r0x08, FSR0H
001418   ffea
00141a   cfee     movff   0xfee, 0x007     	MOVFF	POSTINC0, r0x07
00141c   f007
00141e   cfef     movff   0xfef, 0x008     	MOVFF	INDF0, r0x08
001420   f008
001422   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001424   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001426   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001428   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00142a   eca2     call    0x001f44, 0x0    	CALL	___sint2fs
00142c   f00f
00142e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001430   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
001432   f008
001434   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
001436   f009
001438   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
00143a   f00a
00143c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00143e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001440   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001442   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001444   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001446   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001448   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00144a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00144c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00144e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001450   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
001452   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001454   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001456   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001458   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00145a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00145c   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00145e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001460   ec71     call    0x0006e2, 0x0    	CALL	___fsmul
001462   f003
001464   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001466   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
001468   f008
00146a   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
00146c   f009
00146e   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
001470   f00a
001472   0e08     movlw   0x08             	MOVLW	0x08
001474   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001476   0e43     movlw   0x43             	MOVLW	0x43
001478   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00147a   0eff     movlw   0xff             	MOVLW	0xff
00147c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00147e   0ec0     movlw   0xc0             	MOVLW	0xc0
001480   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001482   0e00     movlw   0x00             	MOVLW	0x00
001484   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001486   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
001488   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00148a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00148c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00148e   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001490   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001492   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001494   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001496   ec2d     call    0x000a5a, 0x0    	CALL	___fsadd
001498   f005
00149a   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00149c   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
00149e   f008
0014a0   cff4     movff   0xff4, 0x009     	MOVFF	PRODH, r0x09
0014a2   f009
0014a4   cfe9     movff   0xfe9, 0x00a     	MOVFF	FSR0L, r0x0a
0014a6   f00a
0014a8   0e08     movlw   0x08             	MOVLW	0x08
0014aa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	390; stepperCon.c	pwm_lu[i] = __fs2uint(set) ;
0014ac   0e00     movlw   0x00             	MOVLW	LOW(_pwm_lu)
0014ae   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
0014b0   0e02     movlw   0x02             	MOVLW	HIGH(_pwm_lu)
0014b2   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0014b4   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
0014b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014b8   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0014ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014bc   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0014be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014c0   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0014c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014c4   ec19     call    0x001e32, 0x0    	CALL	___fs2uint
0014c6   f00f
0014c8   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0014ca   cff3     movff   0xff3, 0x008     	MOVFF	PRODL, r0x08
0014cc   f008
0014ce   0e04     movlw   0x04             	MOVLW	0x04
0014d0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0014d2   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0014d4   ffe9
0014d6   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
0014d8   ffea
0014da   c007     movff   0x007, 0xfee     	MOVFF	r0x07, POSTINC0
0014dc   ffee
0014de   c008     movff   0x008, 0xfef     	MOVFF	r0x08, INDF0
0014e0   ffef
                                           ;	.line	388; stepperCon.c	for(i = 0 ; i < (sizeof(pwm_base) / sizeof(int16_t)) ; i++) {
0014e2   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0014e4   0e40     movlw   0x40             	MOVLW	0x40
0014e6   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
0014e8   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0014ea   d787     bra     0x0013fa         	BRA	_00269_DS_
                                           ;	.line	392; stepperCon.c	}
0014ec   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
0014ee   f00a
0014f0   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
0014f2   f009
0014f4   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
0014f6   f008
0014f8   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0014fa   f007
0014fc   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0014fe   f006
001500   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001502   f005
001504   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001506   f004
001508   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00150a   f003
00150c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00150e   f002
001510   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001512   f001
001514   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001516   f000
001518   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00151a   ffd9
00151c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__idleInts	code
                                           _idleInts:
                                           ;	.line	360; stepperCon.c	void idleInts(void) {
0022ac   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0022ae   ffe5
0022b0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0022b2   ffd9
                                           ;	.line	361; stepperCon.c	INTCONbits.INT0IE = 0 ;     // Disable 'step' interrupt
0022b4   98f2     bcf     0xf2, 0x4, 0x0   	BCF	_INTCONbits, 4
                                           ;	.line	362; stepperCon.c	INTCON3bits.INT2IE = 0 ;    // Disable 'dir' interrupt
0022b6   98f0     bcf     0xf0, 0x4, 0x0   	BCF	_INTCON3bits, 4
                                           ;	.line	364; stepperCon.c	PIE2bits.C1IE = 0 ;         // Disable Comparator C1 Interrupt
0022b8   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           ;	.line	365; stepperCon.c	PIE2bits.C2IE = 0 ;         // Disable Comparator C2 Interrupt
0022ba   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           ;	.line	367; stepperCon.c	PIE1bits.CCP1IE = 0 ;       // Disable CCP1 interrupt
0022bc   949d     bcf     0x9d, 0x2, 0x0   	BCF	_PIE1bits, 2
                                           ;	.line	368; stepperCon.c	PIE2bits.CCP2IE = 0 ;       // Disable CCP2 interrupt
0022be   90a0     bcf     0xa0, 0x0, 0x0   	BCF	_PIE2bits, 0
                                           ;	.line	370; stepperCon.c	PIE1bits.SSP1IE = 1 ;       // Enable I2C interrupt
0022c0   869d     bsf     0x9d, 0x3, 0x0   	BSF	_PIE1bits, 3
                                           ;	.line	371; stepperCon.c	PIE2bits.BCL1IE = 1 ;       // Enable I2C collision detection interrupt
0022c2   86a0     bsf     0xa0, 0x3, 0x0   	BSF	_PIE2bits, 3
                                           ;	.line	373; stepperCon.c	SSP1CON1bits.SSPOV = 0 ;
0022c4   9cc6     bcf     0xc6, 0x6, 0x0   	BCF	_SSP1CON1bits, 6
                                           ;	.line	374; stepperCon.c	PIR1bits.SSP1IF = 0 ;
0022c6   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	375; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
0022c8   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
                                           ;	.line	376; stepperCon.c	SSP1CON1bits.SSPEN = 1 ;    // Enable I2C port
0022ca   8ac6     bsf     0xc6, 0x5, 0x0   	BSF	_SSP1CON1bits, 5
                                           ;	.line	377; stepperCon.c	}
0022cc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0022ce   ffd9
0022d0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__activeInts	code
                                           _activeInts:
                                           ;	.line	335; stepperCon.c	void activeInts(void) {
0021f4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021f6   ffe5
0021f8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021fa   ffd9
                                           ;	.line	336; stepperCon.c	PIE1bits.SSP1IE = 0 ;       // Disable I2C interrupt
0021fc   969d     bcf     0x9d, 0x3, 0x0   	BCF	_PIE1bits, 3
                                           ;	.line	337; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;    // Disable I2C port
0021fe   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	338; stepperCon.c	PIE2bits.BCL1IE = 0 ;       // Disable I2C collision detection interrupt
002200   96a0     bcf     0xa0, 0x3, 0x0   	BCF	_PIE2bits, 3
                                           ;	.line	341; stepperCon.c	if(PORTBbits.RB2) { 
002202   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
002204   d005     bra     0x002210         	BRA	_00256_DS_
                                           ;	.line	342; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;
002206   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	343; stepperCon.c	dir = 1 ;
002208   0e01     movlw   0x01             	MOVLW	0x01
00220a   010f     movlb   0xf              	BANKSEL	_dir
00220c   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
00220e   d004     bra     0x002218         	BRA	_00257_DS_
                                           _00256_DS_:
                                           ;	.line	346; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
002210   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	347; stepperCon.c	dir = -1 ;
002212   0eff     movlw   0xff             	MOVLW	0xff
002214   010f     movlb   0xf              	BANKSEL	_dir
002216   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
                                           _00257_DS_:
                                           ;	.line	350; stepperCon.c	INTCONbits.INT0IE = 1 ;     // Enable 'step' interrupt
002218   88f2     bsf     0xf2, 0x4, 0x0   	BSF	_INTCONbits, 4
                                           ;	.line	351; stepperCon.c	INTCON3bits.INT2IE = 1 ;    // Enable 'dir' interrupt
00221a   88f0     bsf     0xf0, 0x4, 0x0   	BSF	_INTCON3bits, 4
                                           ;	.line	353; stepperCon.c	PIE2bits.C1IE = 0 ;         // Disable Comparator C1 Interrupt
00221c   9ca0     bcf     0xa0, 0x6, 0x0   	BCF	_PIE2bits, 6
                                           ;	.line	354; stepperCon.c	PIE2bits.C2IE = 0 ;         // Disable Comparator C2 Interrupt
00221e   9aa0     bcf     0xa0, 0x5, 0x0   	BCF	_PIE2bits, 5
                                           ;	.line	356; stepperCon.c	PIE1bits.CCP1IE = 1 ;       // Enable CCP1 interrupt
002220   849d     bsf     0x9d, 0x2, 0x0   	BSF	_PIE1bits, 2
                                           ;	.line	357; stepperCon.c	PIE2bits.CCP2IE = 1 ;       // Enable CCP2 interrupt
002222   80a0     bsf     0xa0, 0x0, 0x0   	BSF	_PIE2bits, 0
                                           ;	.line	358; stepperCon.c	}
002224   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002226   ffd9
002228   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__i2cSetup	code
                                           _i2cSetup:
                                           ;	.line	321; stepperCon.c	void i2cSetup(void) {
00225c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00225e   ffe5
002260   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002262   ffd9
                                           ;	.line	322; stepperCon.c	TRISCbits.TRISC3 = 1 ;      // Set I2C pins as input
002264   8694     bsf     0x94, 0x3, 0x0   	BSF	_TRISCbits, 3
                                           ;	.line	323; stepperCon.c	TRISCbits.TRISC4 = 1 ;
002266   8894     bsf     0x94, 0x4, 0x0   	BSF	_TRISCbits, 4
                                           ;	.line	325; stepperCon.c	SSP1CON1bits.SSPEN = 0 ;
002268   9ac6     bcf     0xc6, 0x5, 0x0   	BCF	_SSP1CON1bits, 5
                                           ;	.line	326; stepperCon.c	SSP1CON2bits.GCEN = 1 ;     // Enable general call on address 0x00
00226a   8ec5     bsf     0xc5, 0x7, 0x0   	BSF	_SSP1CON2bits, 7
                                           ;	.line	327; stepperCon.c	SSP1CON2bits.SEN = 1 ;      // Enable clock stretching
00226c   80c5     bsf     0xc5, 0x0, 0x0   	BSF	_SSP1CON2bits, 0
                                           ;	.line	328; stepperCon.c	SSP1ADD = i2c_address ;     // Set device I2C address
00226e   cf32     movff   0xf32, 0xfc8     	MOVFF	_i2c_address, _SSP1ADD
002270   ffc8
002272   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
                                           ;	.line	330; stepperCon.c	i2c_reg_addr = 0 ;
002274   6b30     clrf    0x30, 0x1        	CLRF	_i2c_reg_addr, B
                                           ;	.line	332; stepperCon.c	SSP1CON1bits.SSPM = 0x6 ;   // I2C Slave mode, 7-bit address
002276   50c6     movf    0xc6, 0x0, 0x0   	MOVF	_SSP1CON1bits, W
002278   0bf0     andlw   0xf0             	ANDLW	0xf0
00227a   0906     iorlw   0x06             	IORLW	0x06
00227c   6ec6     movwf   0xc6, 0x0        	MOVWF	_SSP1CON1bits
                                           ;	.line	333; stepperCon.c	}
00227e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002280   ffd9
002282   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stepperCon__lowInt	code
                                           _lowInt:
                                           ;	.line	279; stepperCon.c	static void lowInt(void) __interrupt(2) {
0017cc   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0017ce   ffe5
0017d0   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0017d2   ffe5
0017d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017d6   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0017d8   ffe5
0017da   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0017dc   ffe5
0017de   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0017e0   ffe5
0017e2   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0017e4   ffe5
0017e6   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0017e8   ffe5
0017ea   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0017ec   ffe5
0017ee   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0017f0   ffe5
0017f2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0017f4   ffd9
0017f6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0017f8   ffe5
0017fa   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0017fc   ffe5
0017fe   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001800   ffe5
                                           ;	.line	280; stepperCon.c	uint8_t i2c_buf = 0 ;
001802   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	283; stepperCon.c	if (PIR1bits.SSP1IF) {
001804   a69e     btfss   0x9e, 0x3, 0x0   	BTFSS	_PIR1bits, 3
001806   d054     bra     0x0018b0         	BRA	_00219_DS_
                                           ;	.line	284; stepperCon.c	if (SSP1STATbits.BF) i2c_buf = SSP1BUF ;    // Read data, clear BF
001808   a0c7     btfss   0xc7, 0x0, 0x0   	BTFSS	_SSP1STATbits, 0
00180a   d002     bra     0x001810         	BRA	_00204_DS_
00180c   cfc9     movff   0xfc9, 0x000     	MOVFF	_SSP1BUF, r0x00
00180e   f000
                                           _00204_DS_:
                                           ;	.line	287; stepperCon.c	if (!SSP1STATbits.D) {
001810   bac7     btfsc   0xc7, 0x5, 0x0   	BTFSC	_SSP1STATbits, 5
001812   d014     bra     0x00183c         	BRA	_00214_DS_
001814   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	288; stepperCon.c	i2c_counter = 0 ;                       // Reset counter
001816   6b2f     clrf    0x2f, 0x1        	CLRF	_i2c_counter, B
                                           ;	.line	289; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
001818   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
00181a   d03d     bra     0x001896         	BRA	_00215_DS_
                                           ;	.line	290; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
00181c   cf30     movff   0xf30, 0x001     	MOVFF	_i2c_reg_addr, r0x01
00181e   f001
001820   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
001822   2b30     incf    0x30, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
001824   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001826   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001828   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00182a   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
00182c   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00182e   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001830   ffe9
001832   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
001834   ffea
001836   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001838   ffc9
00183a   d02d     bra     0x001896         	BRA	_00215_DS_
                                           _00214_DS_:
00183c   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	295; stepperCon.c	i2c_counter++ ;                         // Increment counter
00183e   2b2f     incf    0x2f, 0x1, 0x1   	INCF	_i2c_counter, F, B
                                           ;	.line	296; stepperCon.c	if (SSP1STATbits.R) {                   // On read,
001840   a4c7     btfss   0xc7, 0x2, 0x0   	BTFSS	_SSP1STATbits, 2
001842   d010     bra     0x001864         	BRA	_00211_DS_
                                           ;	.line	297; stepperCon.c	SSP1BUF = i2c_regs[i2c_reg_addr++] ; // Send register value
001844   cf30     movff   0xf30, 0x001     	MOVFF	_i2c_reg_addr, r0x01
001846   f001
001848   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
00184a   2b30     incf    0x30, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
00184c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00184e   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
001850   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001852   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001854   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001856   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001858   ffe9
00185a   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00185c   ffea
00185e   cfef     movff   0xfef, 0xfc9     	MOVFF	INDF0, _SSP1BUF
001860   ffc9
001862   d019     bra     0x001896         	BRA	_00215_DS_
                                           _00211_DS_:
001864   010f     movlb   0xf              	BANKSEL	_i2c_counter
                                           ;	.line	300; stepperCon.c	if (i2c_counter == 1) {             // First byte is register
001866   512f     movf    0x2f, 0x0, 0x1   	MOVF	_i2c_counter, W, B
001868   0a01     xorlw   0x01             	XORLW	0x01
00186a   e103     bnz     0x001872         	BNZ	_00208_DS_
                                           ;	.line	301; stepperCon.c	i2c_reg_addr = i2c_buf ;        // value
00186c   c000     movff   0x000, 0xf30     	MOVFF	r0x00, _i2c_reg_addr
00186e   ff30
001870   d012     bra     0x001896         	BRA	_00215_DS_
                                           _00208_DS_:
                                           ;	.line	304; stepperCon.c	i2c_regs[i2c_reg_addr++] = i2c_buf ; // write
001872   cf30     movff   0xf30, 0x001     	MOVFF	_i2c_reg_addr, r0x01
001874   f001
001876   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
001878   2b30     incf    0x30, 0x1, 0x1   	INCF	_i2c_reg_addr, F, B
00187a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00187c   0ee1     movlw   0xe1             	MOVLW	LOW(_i2c_regs)
00187e   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
001880   0e00     movlw   0x00             	MOVLW	HIGH(_i2c_regs)
001882   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001884   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001886   ffe9
001888   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00188a   ffea
00188c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00188e   ffef
                                           ;	.line	305; stepperCon.c	i2c_dirty = 1 ;                 // set I2C dirty flag
001890   0e01     movlw   0x01             	MOVLW	0x01
001892   010f     movlb   0xf              	BANKSEL	_i2c_dirty
001894   6f31     movwf   0x31, 0x1        	MOVWF	_i2c_dirty, B
                                           _00215_DS_:
                                           ;	.line	310; stepperCon.c	i2c_reg_addr %= sizeof(i2c_regs) ;          // Prevent buffer overflow
001896   0e09     movlw   0x09             	MOVLW	0x09
001898   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00189a   cf30     movff   0xf30, 0xfe5     	MOVFF	_i2c_reg_addr, POSTDEC1
00189c   ffe5
00189e   ecdc     call    0x001fb8, 0x0    	CALL	__moduchar
0018a0   f00f
0018a2   010f     movlb   0xf              	BANKSEL	_i2c_reg_addr
0018a4   6f30     movwf   0x30, 0x1        	MOVWF	_i2c_reg_addr, B
0018a6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0018a8   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
                                           ;	.line	312; stepperCon.c	PIR1bits.SSP1IF = 0 ;       // Clear interrupt
0018aa   969e     bcf     0x9e, 0x3, 0x0   	BCF	_PIR1bits, 3
                                           ;	.line	313; stepperCon.c	SSP1CON1bits.CKP = 1 ;      // Release clock
0018ac   88c6     bsf     0xc6, 0x4, 0x0   	BSF	_SSP1CON1bits, 4
0018ae   d003     bra     0x0018b6         	BRA	_00221_DS_
                                           _00219_DS_:
                                           ;	.line	316; stepperCon.c	else if (PIR2bits.BCL1IF) {
0018b0   a6a1     btfss   0xa1, 0x3, 0x0   	BTFSS	_PIR2bits, 3
0018b2   d001     bra     0x0018b6         	BRA	_00221_DS_
                                           ;	.line	317; stepperCon.c	PIR2bits.BCL1IF = 0 ;       // Clear I2C collision interrupt
0018b4   96a1     bcf     0xa1, 0x3, 0x0   	BCF	_PIR2bits, 3
                                           _00221_DS_:
                                           ;	.line	319; stepperCon.c	}
0018b6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0018b8   f002
0018ba   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0018bc   f001
0018be   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0018c0   f000
0018c2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0018c4   ffd9
0018c6   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0018c8   fffb
0018ca   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0018cc   fffa
0018ce   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0018d0   ffea
0018d2   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0018d4   ffe9
0018d6   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0018d8   fff4
0018da   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0018dc   fff3
0018de   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0018e0   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0018e2   ffe0
0018e4   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0018e6   ffd8
0018e8   0010     retfie  0x0              	RETFIE	

                                           ; ; Starting pCode block
                                           S_stepperCon__highInt	code
                                           _highInt:
                                           ;	.line	177; stepperCon.c	static void highInt(void) __interrupt(1) {
001694   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
001696   ffe5
001698   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
00169a   ffe5
00169c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00169e   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0016a0   ffe5
0016a2   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0016a4   ffe5
0016a6   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0016a8   ffe5
0016aa   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0016ac   ffe5
0016ae   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0016b0   ffe5
0016b2   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0016b4   ffe5
0016b6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0016b8   ffe5
0016ba   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0016bc   ffd9
                                           ;	.line	179; stepperCon.c	if (INTCONbits.INT0IF) {
0016be   a2f2     btfss   0xf2, 0x1, 0x0   	BTFSS	_INTCONbits, 1
0016c0   d004     bra     0x0016ca         	BRA	_00106_DS_
                                           ;	.line	180; stepperCon.c	state = STEP ;
0016c2   0e04     movlw   0x04             	MOVLW	0x04
0016c4   010f     movlb   0xf              	BANKSEL	_state
0016c6   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	181; stepperCon.c	INTCONbits.INT0IF = 0 ;     // clear 'step' interrupt
0016c8   92f2     bcf     0xf2, 0x1, 0x0   	BCF	_INTCONbits, 1
                                           _00106_DS_:
                                           ;	.line	185; stepperCon.c	if (INTCON3bits.INT2IF) {
0016ca   a2f0     btfss   0xf0, 0x1, 0x0   	BTFSS	_INTCON3bits, 1
0016cc   d00f     bra     0x0016ec         	BRA	_00111_DS_
                                           ;	.line	187; stepperCon.c	if(PORTBbits.RB2) {
0016ce   a481     btfss   0x81, 0x2, 0x0   	BTFSS	_PORTBbits, 2
0016d0   d005     bra     0x0016dc         	BRA	_00108_DS_
                                           ;	.line	189; stepperCon.c	INTCON2bits.INTEDG2 = 0 ;   
0016d2   98f1     bcf     0xf1, 0x4, 0x0   	BCF	_INTCON2bits, 4
                                           ;	.line	190; stepperCon.c	dir = 1 ;
0016d4   0e01     movlw   0x01             	MOVLW	0x01
0016d6   010f     movlb   0xf              	BANKSEL	_dir
0016d8   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
0016da   d004     bra     0x0016e4         	BRA	_00109_DS_
                                           _00108_DS_:
                                           ;	.line	194; stepperCon.c	INTCON2bits.INTEDG2 = 1 ;
0016dc   88f1     bsf     0xf1, 0x4, 0x0   	BSF	_INTCON2bits, 4
                                           ;	.line	195; stepperCon.c	dir = -1 ;
0016de   0eff     movlw   0xff             	MOVLW	0xff
0016e0   010f     movlb   0xf              	BANKSEL	_dir
0016e2   6f25     movwf   0x25, 0x1        	MOVWF	_dir, B
                                           _00109_DS_:
                                           ;	.line	198; stepperCon.c	state = NEXT_STEP ;         // Force recalculate of next step
0016e4   0e06     movlw   0x06             	MOVLW	0x06
0016e6   010f     movlb   0xf              	BANKSEL	_state
0016e8   6f24     movwf   0x24, 0x1        	MOVWF	_state, B
                                           ;	.line	199; stepperCon.c	INTCON3bits.INT2IF = 0 ;    // clear 'dir' interrupt
0016ea   92f0     bcf     0xf0, 0x1, 0x0   	BCF	_INTCON3bits, 1
                                           _00111_DS_:
                                           ;	.line	203; stepperCon.c	if (PIR1bits.CCP1IF) {
0016ec   a49e     btfss   0x9e, 0x2, 0x0   	BTFSS	_PIR1bits, 2
0016ee   d02c     bra     0x001748         	BRA	_00127_DS_
                                           ;	.line	204; stepperCon.c	T1CONbits.TMR1ON = 0 ;  // Toff timer off
0016f0   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	205; stepperCon.c	TMR1L = 0 ;             // Clear off timer
0016f2   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	206; stepperCon.c	TMR1H = 0 ;
0016f4   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
0016f6   010f     movlb   0xf              	BANKSEL	_a_state
                                           ;	.line	208; stepperCon.c	if (a_state == PH_OFF) {
0016f8   5128     movf    0x28, 0x0, 0x1   	MOVF	_a_state, W, B
0016fa   0a01     xorlw   0x01             	XORLW	0x01
0016fc   e11b     bnz     0x001734         	BNZ	_00124_DS_
                                           _00192_DS_:
0016fe   010f     movlb   0xf              	BANKSEL	_a_decay
                                           ;	.line	209; stepperCon.c	if (a_decay == FAST_DECAY) {            
001700   512b     movf    0x2b, 0x0, 0x1   	MOVF	_a_decay, W, B
001702   0a01     xorlw   0x01             	XORLW	0x01
001704   e109     bnz     0x001718         	BNZ	_00116_DS_
                                           _00194_DS_:
001706   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	210; stepperCon.c	if (pol_a) {                    // Forward current, Phase-A
001708   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
00170a   e003     bz      0x001712         	BZ	_00113_DS_
                                           ;	.line	211; stepperCon.c	LATCbits.LATC1 = 0 ;
00170c   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	212; stepperCon.c	LATCbits.LATC0 = 1 ;
00170e   808b     bsf     0x8b, 0x0, 0x0   	BSF	_LATCbits, 0
001710   d004     bra     0x00171a         	BRA	_00117_DS_
                                           _00113_DS_:
                                           ;	.line	215; stepperCon.c	LATCbits.LATC0 = 0 ;
001712   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	216; stepperCon.c	LATCbits.LATC1 = 1 ;
001714   828b     bsf     0x8b, 0x1, 0x0   	BSF	_LATCbits, 1
001716   d001     bra     0x00171a         	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	219; stepperCon.c	else LATAbits.LATA4 = 1 ;  // Toggle enable for slow decay
001718   8889     bsf     0x89, 0x4, 0x0   	BSF	_LATAbits, 4
                                           _00117_DS_:
                                           ;	.line	221; stepperCon.c	CCPR1H = 0 ;
00171a   6abf     clrf    0xbf, 0x0        	CLRF	_CCPR1H
00171c   010f     movlb   0xf              	BANKSEL	_pol_a
                                           ;	.line	223; stepperCon.c	if(pol_a) CCPR1L = t_blank_high ;
00171e   512c     movf    0x2c, 0x0, 0x1   	MOVF	_pol_a, W, B
001720   e003     bz      0x001728         	BZ	_00119_DS_
001722   cf26     movff   0xf26, 0xfbe     	MOVFF	_t_blank_high, _CCPR1L
001724   ffbe
001726   d002     bra     0x00172c         	BRA	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	224; stepperCon.c	else CCPR1L = t_blank_low ;
001728   cf27     movff   0xf27, 0xfbe     	MOVFF	_t_blank_low, _CCPR1L
00172a   ffbe
                                           _00120_DS_:
00172c   010f     movlb   0xf              	BANKSEL	_a_state
                                           ;	.line	226; stepperCon.c	a_state = PH_BLANK ;
00172e   6b28     clrf    0x28, 0x1        	CLRF	_a_state, B
                                           ;	.line	228; stepperCon.c	T1CONbits.TMR1ON = 1 ;
001730   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
001732   d009     bra     0x001746         	BRA	_00125_DS_
                                           _00124_DS_:
001734   010f     movlb   0xf              	BANKSEL	_a_state
                                           ;	.line	230; stepperCon.c	else if(a_state == PH_BLANK) {
001736   5128     movf    0x28, 0x0, 0x1   	MOVF	_a_state, W, B
001738   e106     bnz     0x001746         	BNZ	_00125_DS_
                                           ;	.line	231; stepperCon.c	CCPR1H = 0 ;
00173a   6abf     clrf    0xbf, 0x0        	CLRF	_CCPR1H
                                           ;	.line	232; stepperCon.c	CCPR1L = t_off ;
00173c   cf29     movff   0xf29, 0xfbe     	MOVFF	_t_off, _CCPR1L
00173e   ffbe
                                           ;	.line	233; stepperCon.c	a_state = T_DRIVE ;
001740   0e02     movlw   0x02             	MOVLW	0x02
001742   010f     movlb   0xf              	BANKSEL	_a_state
001744   6f28     movwf   0x28, 0x1        	MOVWF	_a_state, B
                                           _00125_DS_:
                                           ;	.line	236; stepperCon.c	PIR1bits.CCP1IF = 0 ;
001746   949e     bcf     0x9e, 0x2, 0x0   	BCF	_PIR1bits, 2
                                           _00127_DS_:
                                           ;	.line	240; stepperCon.c	if (PIR2bits.CCP2IF) {
001748   a0a1     btfss   0xa1, 0x0, 0x0   	BTFSS	_PIR2bits, 0
00174a   d02c     bra     0x0017a4         	BRA	_00144_DS_
                                           ;	.line	241; stepperCon.c	T3CONbits.TMR3ON = 0 ;  // Toff timer off
00174c   90b1     bcf     0xb1, 0x0, 0x0   	BCF	_T3CONbits, 0
                                           ;	.line	242; stepperCon.c	TMR3L = 0 ;             // Clear off timer 
00174e   6ab2     clrf    0xb2, 0x0        	CLRF	_TMR3L
                                           ;	.line	243; stepperCon.c	TMR3H = 0 ;
001750   6ab3     clrf    0xb3, 0x0        	CLRF	_TMR3H
001752   010f     movlb   0xf              	BANKSEL	_b_state
                                           ;	.line	245; stepperCon.c	if (b_state == PH_OFF) {
001754   512a     movf    0x2a, 0x0, 0x1   	MOVF	_b_state, W, B
001756   0a01     xorlw   0x01             	XORLW	0x01
001758   e11b     bnz     0x001790         	BNZ	_00140_DS_
                                           _00196_DS_:
00175a   010f     movlb   0xf              	BANKSEL	_b_decay
                                           ;	.line	247; stepperCon.c	if (b_decay == FAST_DECAY) {
00175c   512d     movf    0x2d, 0x0, 0x1   	MOVF	_b_decay, W, B
00175e   0a01     xorlw   0x01             	XORLW	0x01
001760   e109     bnz     0x001774         	BNZ	_00132_DS_
                                           _00198_DS_:
001762   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	248; stepperCon.c	if (pol_b) {                    // Forward current, Phase-B
001764   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
001766   e003     bz      0x00176e         	BZ	_00129_DS_
                                           ;	.line	249; stepperCon.c	LATCbits.LATC2 = 0 ;
001768   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	250; stepperCon.c	LATDbits.LATD5 = 1 ;
00176a   8a8c     bsf     0x8c, 0x5, 0x0   	BSF	_LATDbits, 5
00176c   d004     bra     0x001776         	BRA	_00133_DS_
                                           _00129_DS_:
                                           ;	.line	253; stepperCon.c	LATDbits.LATD5 = 0 ;
00176e   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	254; stepperCon.c	LATCbits.LATC2 = 1 ;
001770   848b     bsf     0x8b, 0x2, 0x0   	BSF	_LATCbits, 2
001772   d001     bra     0x001776         	BRA	_00133_DS_
                                           _00132_DS_:
                                           ;	.line	257; stepperCon.c	else LATAbits.LATA5 = 1 ;  // Toggle enable for slow decay
001774   8a89     bsf     0x89, 0x5, 0x0   	BSF	_LATAbits, 5
                                           _00133_DS_:
                                           ;	.line	259; stepperCon.c	CCPR2H = 0 ;
001776   6a68     clrf    0x68, 0x0        	CLRF	_CCPR2H
001778   010f     movlb   0xf              	BANKSEL	_pol_b
                                           ;	.line	261; stepperCon.c	if(pol_b) CCPR2L = t_blank_high ;
00177a   512e     movf    0x2e, 0x0, 0x1   	MOVF	_pol_b, W, B
00177c   e003     bz      0x001784         	BZ	_00135_DS_
00177e   cf26     movff   0xf26, 0xf67     	MOVFF	_t_blank_high, _CCPR2L
001780   ff67
001782   d002     bra     0x001788         	BRA	_00136_DS_
                                           _00135_DS_:
                                           ;	.line	262; stepperCon.c	else CCPR2L = t_blank_low ;
001784   cf27     movff   0xf27, 0xf67     	MOVFF	_t_blank_low, _CCPR2L
001786   ff67
                                           _00136_DS_:
001788   010f     movlb   0xf              	BANKSEL	_b_state
                                           ;	.line	264; stepperCon.c	b_state = PH_BLANK ;
00178a   6b2a     clrf    0x2a, 0x1        	CLRF	_b_state, B
                                           ;	.line	266; stepperCon.c	T3CONbits.TMR3ON = 1 ;
00178c   80b1     bsf     0xb1, 0x0, 0x0   	BSF	_T3CONbits, 0
00178e   d009     bra     0x0017a2         	BRA	_00141_DS_
                                           _00140_DS_:
001790   010f     movlb   0xf              	BANKSEL	_b_state
                                           ;	.line	268; stepperCon.c	else if(b_state == PH_BLANK) {
001792   512a     movf    0x2a, 0x0, 0x1   	MOVF	_b_state, W, B
001794   e106     bnz     0x0017a2         	BNZ	_00141_DS_
                                           ;	.line	269; stepperCon.c	CCPR2H = 0 ;
001796   6a68     clrf    0x68, 0x0        	CLRF	_CCPR2H
                                           ;	.line	270; stepperCon.c	CCPR2L = t_off ;
001798   cf29     movff   0xf29, 0xf67     	MOVFF	_t_off, _CCPR2L
00179a   ff67
                                           ;	.line	271; stepperCon.c	b_state = T_DRIVE ;
00179c   0e02     movlw   0x02             	MOVLW	0x02
00179e   010f     movlb   0xf              	BANKSEL	_b_state
0017a0   6f2a     movwf   0x2a, 0x1        	MOVWF	_b_state, B
                                           _00141_DS_:
                                           ;	.line	274; stepperCon.c	PIR2bits.CCP2IF = 0 ;
0017a2   90a1     bcf     0xa1, 0x0, 0x0   	BCF	_PIR2bits, 0
                                           _00144_DS_:
                                           ;	.line	276; stepperCon.c	}
0017a4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0017a6   ffd9
0017a8   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0017aa   fffb
0017ac   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0017ae   fffa
0017b0   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0017b2   ffea
0017b4   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0017b6   ffe9
0017b8   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0017ba   fff4
0017bc   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0017be   fff3
0017c0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0017c2   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0017c4   ffe0
0017c6   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0017c8   ffd8
0017ca   0010     retfie  0x0              	RETFIE	



                                           ; Statistics:
                                           ; code size:	 3246 (0x0cae) bytes ( 2.48%)
                                           ;           	 1623 (0x0657) words
                                           ; udata size:	  161 (0x00a1) bytes ( 4.38%)
                                           ; access size:	   11 (0x000b) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.9 #10186 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_compsSetup
                                           	global	_ioSetup
                                           	global	_pwmSetup
                                           	global	_intSetup
                                           	global	_phTimersSetup
                                           	global	_resetCheck

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_sc_setup__resetCheck	code
                                           _resetCheck:
                                           ;	.line	154; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void resetCheck(void) {
001cee   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001cf0   ffe5
001cf2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001cf4   ffd9
001cf6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001cf8   ffe5
001cfa   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001cfc   ffe5
                                           ;	.line	158; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(!RCONbits.TO || !RCONbits.PD || !RCONbits.BOR) {
001cfe   a6d0     btfss   0xd0, 0x3, 0x0   	BTFSS	_RCONbits, 3
001d00   d004     bra     0x001d0a         	BRA	_00133_DS_
001d02   a4d0     btfss   0xd0, 0x2, 0x0   	BTFSS	_RCONbits, 2
001d04   d002     bra     0x001d0a         	BRA	_00133_DS_
001d06   b0d0     btfsc   0xd0, 0x0, 0x0   	BTFSC	_RCONbits, 0
001d08   d007     bra     0x001d18         	BRA	_00134_DS_
                                           _00133_DS_:
                                           ;	.line	160; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.TO = 1 ;
001d0a   86d0     bsf     0xd0, 0x3, 0x0   	BSF	_RCONbits, 3
                                           ;	.line	161; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.PD = 1 ;
001d0c   84d0     bsf     0xd0, 0x2, 0x0   	BSF	_RCONbits, 2
                                           ;	.line	162; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.BOR = 0 ;
001d0e   90d0     bcf     0xd0, 0x0, 0x0   	BCF	_RCONbits, 0
                                           ;	.line	163; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.POR = 0 ;
001d10   92d0     bcf     0xd0, 0x1, 0x0   	BCF	_RCONbits, 1
                                           ;	.line	165; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
001d12   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	166; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
001d14   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           _00131_DS_:
                                           ;	.line	168; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(1) ; 
001d16   d7ff     bra     0x001d16         	BRA	_00131_DS_
                                           _00134_DS_:
                                           ;	.line	172; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if(STKPTRbits.STKFUL || STKPTRbits.STKUNF) {
001d18   befc     btfsc   0xfc, 0x7, 0x0   	BTFSC	_STKPTRbits, 7
001d1a   d002     bra     0x001d20         	BRA	_00145_DS_
001d1c   acfc     btfss   0xfc, 0x6, 0x0   	BTFSS	_STKPTRbits, 6
001d1e   d031     bra     0x001d82         	BRA	_00148_DS_
                                           _00145_DS_:
                                           ;	.line	174; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKFUL = 0 ;
001d20   9efc     bcf     0xfc, 0x7, 0x0   	BCF	_STKPTRbits, 7
                                           ;	.line	175; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	STKPTRbits.STKUNF = 0 ;
001d22   9cfc     bcf     0xfc, 0x6, 0x0   	BCF	_STKPTRbits, 6
                                           ;	.line	177; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 1 ;     // Rise 'fault' signal
001d24   8881     bsf     0x81, 0x4, 0x0   	BSF	_PORTBbits, 4
                                           ;	.line	178; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 1 ;     // Turn on red LED
001d26   8a82     bsf     0x82, 0x5, 0x0   	BSF	_PORTCbits, 5
                                           ;	.line	181; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1CS = 0 ;      // Timer1 to Fosc/4
001d28   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
001d2a   0b3f     andlw   0x3f             	ANDLW	0x3f
001d2c   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	182; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
001d2e   0e78     movlw   0x78             	MOVLW	0x78
001d30   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00143_DS_:
                                           ;	.line	185; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 0 ;
001d32   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	186; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PIR1bits.TMR1IF = 0 ;
001d34   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	187; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.T1CKPS = 3 ;      // Timer1 1:8 prescale
001d36   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
001d38   0bcf     andlw   0xcf             	ANDLW	0xcf
001d3a   0930     iorlw   0x30             	IORLW	0x30
001d3c   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	188; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1H = TMR_10MS >> 8 ;
001d3e   0eb1     movlw   0xb1             	MOVLW	0xb1
001d40   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	189; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1L = TMR_10MS ;
001d42   0edf     movlw   0xdf             	MOVLW	0xdf
001d44   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	190; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 1 ;
001d46   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00137_DS_:
                                           ;	.line	192; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	while(!PIR1bits.TMR1IF) ;
001d48   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
001d4a   d7fe     bra     0x001d48         	BRA	_00137_DS_
                                           ;	.line	194; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	if (--i == 0) {
001d4c   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
001d4e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001d50   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
001d52   f000
001d54   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d56   e1ed     bnz     0x001d32         	BNZ	_00143_DS_
                                           ;	.line	195; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC5 = !LATCbits.LATC5 ;
001d58   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001d5a   ba8b     btfsc   0x8b, 0x5, 0x0   	BTFSC	_LATCbits, 5
001d5c   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001d5e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d60   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001d62   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001d64   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001d66   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001d68   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
001d6a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d6c   0b01     andlw   0x01             	ANDLW	0x01
001d6e   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
001d70   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001d72   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
001d74   508b     movf    0x8b, 0x0, 0x0   	MOVF	_LATCbits, W
001d76   0bdf     andlw   0xdf             	ANDLW	0xdf
001d78   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
001d7a   6e8b     movwf   0x8b, 0x0        	MOVWF	_LATCbits
                                           ;	.line	196; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	i = 120 ;
001d7c   0e78     movlw   0x78             	MOVLW	0x78
001d7e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d80   d7d8     bra     0x001d32         	BRA	_00143_DS_
                                           _00148_DS_:
                                           ;	.line	200; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
001d82   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001d84   f001
001d86   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001d88   f000
001d8a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001d8c   ffd9
001d8e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__phTimersSetup	code
                                           _phTimersSetup:
                                           ;	.line	131; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void phTimersSetup(void) {
002106   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002108   ffe5
00210a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00210c   ffd9
                                           ;	.line	134; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1CS = 0 ;
00210e   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
002110   0b3f     andlw   0x3f             	ANDLW	0x3f
002112   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	135; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.T1CKPS = 3 ;
002114   50cd     movf    0xcd, 0x0, 0x0   	MOVF	_T1CONbits, W
002116   0bcf     andlw   0xcf             	ANDLW	0xcf
002118   0930     iorlw   0x30             	IORLW	0x30
00211a   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CONbits
                                           ;	.line	136; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T1CONbits.TMR1ON = 0 ;
00211c   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	137; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1L = 0 ;
00211e   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	138; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR1H = 0 ;
002120   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
                                           ;	.line	140; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T3CONbits.TMR3CS = 0 ;
002122   50b1     movf    0xb1, 0x0, 0x0   	MOVF	_T3CONbits, W
002124   0b3f     andlw   0x3f             	ANDLW	0x3f
002126   6eb1     movwf   0xb1, 0x0        	MOVWF	_T3CONbits
                                           ;	.line	141; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T3CONbits.T3CKPS = 3 ;
002128   50b1     movf    0xb1, 0x0, 0x0   	MOVF	_T3CONbits, W
00212a   0bcf     andlw   0xcf             	ANDLW	0xcf
00212c   0930     iorlw   0x30             	IORLW	0x30
00212e   6eb1     movwf   0xb1, 0x0        	MOVWF	_T3CONbits
                                           ;	.line	142; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T3CONbits.TMR3ON = 0 ;
002130   90b1     bcf     0xb1, 0x0, 0x0   	BCF	_T3CONbits, 0
                                           ;	.line	143; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR3L = 0 ;
002132   6ab2     clrf    0xb2, 0x0        	CLRF	_TMR3L
                                           ;	.line	144; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TMR3H = 0 ;
002134   6ab3     clrf    0xb3, 0x0        	CLRF	_TMR3H
002136   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	146; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C1TSEL = 0 ;   // Timer1 -> CCP1
002138   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
00213a   0bfc     andlw   0xfc             	ANDLW	0xfc
00213c   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
00213e   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
002140   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
                                           ;	.line	147; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS0bits.C2TSEL = 1 ;   // Timer3 -> CCP2
002142   5149     movf    0x49, 0x0, 0x1   	MOVF	_CCPTMRS0bits, W, B
002144   0be7     andlw   0xe7             	ANDLW	0xe7
002146   0908     iorlw   0x08             	IORLW	0x08
002148   010f     movlb   0xf              	BANKSEL	_CCPTMRS0bits
00214a   6f49     movwf   0x49, 0x1        	MOVWF	_CCPTMRS0bits, B
                                           ;	.line	150; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP1CONbits.CCP1M = 0xa ;
00214c   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CONbits, W
00214e   0bf0     andlw   0xf0             	ANDLW	0xf0
002150   090a     iorlw   0x0a             	IORLW	0x0a
002152   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CONbits
                                           ;	.line	151; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP2CONbits.CCP2M = 0xa ;
002154   5066     movf    0x66, 0x0, 0x0   	MOVF	_CCP2CONbits, W
002156   0bf0     andlw   0xf0             	ANDLW	0xf0
002158   090a     iorlw   0x0a             	IORLW	0x0a
00215a   6e66     movwf   0x66, 0x0        	MOVWF	_CCP2CONbits
                                           ;	.line	152; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
00215c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00215e   ffd9
002160   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__intSetup	code
                                           _intSetup:
                                           ;	.line	108; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void intSetup(void) {
002284   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002286   ffe5
002288   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00228a   ffd9
                                           ;	.line	109; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 0 ;   // Disable interrupts
00228c   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	110; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 0 ;
00228e   9cf2     bcf     0xf2, 0x6, 0x0   	BCF	_INTCONbits, 6
                                           ;	.line	112; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	RCONbits.IPEN = 1 ;         // Enable interrupts priority
002290   8ed0     bsf     0xd0, 0x7, 0x0   	BSF	_RCONbits, 7
                                           ;	.line	114; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.RBPU = 1 ;      // Disable Port B pull-ups
002292   8ef1     bsf     0xf1, 0x7, 0x0   	BSF	_INTCON2bits, 7
                                           ;	.line	115; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON2bits.INTEDG0 = 1 ;   // 'step' interrupt on rising edge
002294   8cf1     bsf     0xf1, 0x6, 0x0   	BSF	_INTCON2bits, 6
                                           ;	.line	117; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCON3bits.INT2IP = 1 ;    // High priority to 'dir' interrupt
002296   8ef0     bsf     0xf0, 0x7, 0x0   	BSF	_INTCON3bits, 7
                                           ;	.line	119; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C1IP = 1 ;         // High priority to Phase-A comparator
002298   8ca2     bsf     0xa2, 0x6, 0x0   	BSF	_IPR2bits, 6
                                           ;	.line	120; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.C2IP = 1 ;         // High priority to Phase-B comparator
00229a   8aa2     bsf     0xa2, 0x5, 0x0   	BSF	_IPR2bits, 5
                                           ;	.line	122; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.CCP1IP = 1 ;       // Hight priority to Phase-A compare timer
00229c   849f     bsf     0x9f, 0x2, 0x0   	BSF	_IPR1bits, 2
                                           ;	.line	123; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR2bits.CCP2IP = 1 ;       // Hight priority to Phase-B compare timer
00229e   80a2     bsf     0xa2, 0x0, 0x0   	BSF	_IPR2bits, 0
                                           ;	.line	125; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	IPR1bits.SSP1IP = 0 ;       // Low priority to I2C interrupt
0022a0   969f     bcf     0x9f, 0x3, 0x0   	BCF	_IPR1bits, 3
                                           ;	.line	127; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.GIE_GIEH = 1 ;   // Enable interrupts
0022a2   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	128; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	INTCONbits.PEIE_GIEL = 1 ;
0022a4   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
                                           ;	.line	129; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
0022a6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0022a8   ffd9
0022aa   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__pwmSetup	code
                                           _pwmSetup:
                                           ;	.line	90; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void pwmSetup(void) {
0021ae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0021b0   ffe5
0021b2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0021b4   ffd9
0021b6   010f     movlb   0xf              	BANKSEL	_ANSELEbits
                                           ;	.line	91; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELEbits.ANSE2 = 0 ;
0021b8   953c     bcf     0x3c, 0x2, 0x1   	BCF	_ANSELEbits, 2, B
                                           ;	.line	92; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 1 ;          // Disable driver for setup
0021ba   8496     bsf     0x96, 0x2, 0x0   	BSF	_TRISEbits, 2
0021bc   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	93; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD1 = 0 ;
0021be   933b     bcf     0x3b, 0x1, 0x1   	BCF	_ANSELDbits, 1, B
                                           ;	.line	94; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 1 ;
0021c0   8295     bsf     0x95, 0x1, 0x0   	BSF	_TRISDbits, 1
0021c2   010f     movlb   0xf              	BANKSEL	_CCPTMRS1
                                           ;	.line	96; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCPTMRS1 = 0x00 ;               // Use Timer2 for references
0021c4   6b48     clrf    0x48, 0x1        	CLRF	_CCPTMRS1, B
                                           ;	.line	97; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PR2 = 0xff ;                    // Set timer for 62.5kHz @64MHz, 10-bit res
0021c6   0eff     movlw   0xff             	MOVLW	0xff
0021c8   6ebb     movwf   0xbb, 0x0        	MOVWF	_PR2
                                           ;	.line	98; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.T2CKPS = 0x0 ;        // Set prescaler to 1:1
0021ca   50ba     movf    0xba, 0x0, 0x0   	MOVF	_T2CONbits, W
0021cc   0bfc     andlw   0xfc             	ANDLW	0xfc
0021ce   6eba     movwf   0xba, 0x0        	MOVWF	_T2CONbits
                                           ;	.line	99; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	T2CONbits.TMR2ON = 1 ;          // Turn timer on
0021d0   84ba     bsf     0xba, 0x2, 0x0   	BSF	_T2CONbits, 2
0021d2   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
                                           ;	.line	101; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP5CONbits.CCP5M = 0x0c ;      // Enable Phase-A current reference
0021d4   5154     movf    0x54, 0x0, 0x1   	MOVF	_CCP5CONbits, W, B
0021d6   0bf0     andlw   0xf0             	ANDLW	0xf0
0021d8   090c     iorlw   0x0c             	IORLW	0x0c
0021da   010f     movlb   0xf              	BANKSEL	_CCP5CONbits
0021dc   6f54     movwf   0x54, 0x1        	MOVWF	_CCP5CONbits, B
0021de   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
                                           ;	.line	102; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CCP4CONbits.CCP4M = 0x0c ;      // Enable Phase-B current reference
0021e0   5157     movf    0x57, 0x0, 0x1   	MOVF	_CCP4CONbits, W, B
0021e2   0bf0     andlw   0xf0             	ANDLW	0xf0
0021e4   090c     iorlw   0x0c             	IORLW	0x0c
0021e6   010f     movlb   0xf              	BANKSEL	_CCP4CONbits
0021e8   6f57     movwf   0x57, 0x1        	MOVWF	_CCP4CONbits, B
                                           ;	.line	104; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISEbits.TRISE2 = 0 ;          // Enable driver
0021ea   9496     bcf     0x96, 0x2, 0x0   	BCF	_TRISEbits, 2
                                           ;	.line	105; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.TRISD1 = 0 ;
0021ec   9295     bcf     0x95, 0x1, 0x0   	BCF	_TRISDbits, 1
                                           ;	.line	106; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
0021ee   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0021f0   ffd9
0021f2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__ioSetup	code
                                           _ioSetup:
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void ioSetup(void) {
002162   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002164   ffe5
002166   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002168   ffd9
                                           ;	.line	52; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB4 = 0 ;     // Start with a cleared 'fault' signal
00216a   9893     bcf     0x93, 0x4, 0x0   	BCF	_TRISBbits, 4
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTBbits.RB4 = 0 ;
00216c   9881     bcf     0x81, 0x4, 0x0   	BCF	_PORTBbits, 4
00216e   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	55; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD2 = 0 ;
002170   953b     bcf     0x3b, 0x2, 0x1   	BCF	_ANSELDbits, 2, B
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.RD2 = 0 ;     // Start with blue LED off
002172   9495     bcf     0x95, 0x2, 0x0   	BCF	_TRISDbits, 2
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTDbits.RD2 = 0 ;
002174   9483     bcf     0x83, 0x2, 0x0   	BCF	_PORTDbits, 2
002176   010f     movlb   0xf              	BANKSEL	_ANSELC
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELC = 0x00 ;         // Disable Port-C as analog input
002178   6b3a     clrf    0x3a, 0x1        	CLRF	_ANSELC, B
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC5 = 0 ;     // Start with red LED off
00217a   9a94     bcf     0x94, 0x5, 0x0   	BCF	_TRISCbits, 5
                                           ;	.line	62; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	PORTCbits.RC5 = 0 ;
00217c   9a82     bcf     0x82, 0x5, 0x0   	BCF	_PORTCbits, 5
                                           ;	.line	64; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC0 = 0 ;     // Phase-A outputs
00217e   9094     bcf     0x94, 0x0, 0x0   	BCF	_TRISCbits, 0
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC1 = 0 ;
002180   9294     bcf     0x94, 0x1, 0x0   	BCF	_TRISCbits, 1
                                           ;	.line	67; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA4 = 0 ;
002182   9892     bcf     0x92, 0x4, 0x0   	BCF	_TRISAbits, 4
                                           ;	.line	69; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC0 = 0 ;
002184   908b     bcf     0x8b, 0x0, 0x0   	BCF	_LATCbits, 0
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC1 = 0 ;
002186   928b     bcf     0x8b, 0x1, 0x0   	BCF	_LATCbits, 1
                                           ;	.line	71; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA4 = 0 ;
002188   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	73; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISCbits.RC2 = 0 ;     // Phase-B outputs
00218a   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
00218c   010f     movlb   0xf              	BANKSEL	_ANSELDbits
                                           ;	.line	74; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELDbits.ANSD5 = 0 ;
00218e   9b3b     bcf     0x3b, 0x5, 0x1   	BCF	_ANSELDbits, 5, B
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISDbits.RD5 = 0 ;
002190   9a95     bcf     0x95, 0x5, 0x0   	BCF	_TRISDbits, 5
002192   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	76; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA5 = 0 ;
002194   9b38     bcf     0x38, 0x5, 0x1   	BCF	_ANSELAbits, 5, B
                                           ;	.line	77; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.RA5 = 0 ;
002196   9a92     bcf     0x92, 0x5, 0x0   	BCF	_TRISAbits, 5
                                           ;	.line	79; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATCbits.LATC2 = 0 ;
002198   948b     bcf     0x8b, 0x2, 0x0   	BCF	_LATCbits, 2
                                           ;	.line	80; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATDbits.LATD5 = 0 ; 
00219a   9a8c     bcf     0x8c, 0x5, 0x0   	BCF	_LATDbits, 5
                                           ;	.line	81; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	LATAbits.LATA5 = 0 ;
00219c   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
00219e   010f     movlb   0xf              	BANKSEL	_ANSELB
                                           ;	.line	83; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELB = 0x00 ;         // Disable port B analog input
0021a0   6b39     clrf    0x39, 0x1        	CLRF	_ANSELB, B
                                           ;	.line	85; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB0 = 1 ;     // 'step', 'dir' and 'enable' as inputs
0021a2   8093     bsf     0x93, 0x0, 0x0   	BSF	_TRISBbits, 0
                                           ;	.line	86; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB2 = 1 ;
0021a4   8493     bsf     0x93, 0x2, 0x0   	BSF	_TRISBbits, 2
                                           ;	.line	87; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISBbits.RB3 = 1 ;
0021a6   8693     bsf     0x93, 0x3, 0x0   	BSF	_TRISBbits, 3
                                           ;	.line	88; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
0021a8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0021aa   ffd9
0021ac   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_sc_setup__compsSetup	code
                                           _compsSetup:
                                           ;	.line	31; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	void compsSetup(void) {
00222a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00222c   ffe5
00222e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002230   ffd9
002232   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA0 = 1 ;      // Enable RA0 as analog input
002234   8138     bsf     0x38, 0x0, 0x1   	BSF	_ANSELAbits, 0, B
                                           ;	.line	33; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA0 = 1 ;
002236   8092     bsf     0x92, 0x0, 0x0   	BSF	_TRISAbits, 0
002238   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA1 = 1 ;      // Enable RA1 as analog input
00223a   8338     bsf     0x38, 0x1, 0x1   	BSF	_ANSELAbits, 1, B
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA1 = 1 ;
00223c   8292     bsf     0x92, 0x1, 0x0   	BSF	_TRISAbits, 1
00223e   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA2 = 1 ;      // Enable RA2 as analog input
002240   8538     bsf     0x38, 0x2, 0x1   	BSF	_ANSELAbits, 2, B
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA2 = 1 ;
002242   8492     bsf     0x92, 0x2, 0x0   	BSF	_TRISAbits, 2
002244   010f     movlb   0xf              	BANKSEL	_ANSELAbits
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	ANSELAbits.ANSA3 = 1 ;      // Enable RA3 as analog input
002246   8738     bsf     0x38, 0x3, 0x1   	BSF	_ANSELAbits, 3, B
                                           ;	.line	42; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	TRISAbits.TRISA3 = 1 ;
002248   8692     bsf     0x92, 0x3, 0x0   	BSF	_TRISAbits, 3
                                           ;	.line	44; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM1CON0 = 0x09 ;            // C12IN1- Goes to C1, Current of Phase-A
00224a   0e09     movlw   0x09             	MOVLW	0x09
00224c   6e79     movwf   0x79, 0x0        	MOVWF	_CM1CON0
                                           ;	.line	45; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON0 = 0x08 ;            // C12IN0- Goes to C2, Current of Phase-B
00224e   0e08     movlw   0x08             	MOVLW	0x08
002250   6e78     movwf   0x78, 0x0        	MOVWF	_CM2CON0
                                           ;	.line	47; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C1HYS = 0 ;     // Enable hysteresis for both comparators
002252   9677     bcf     0x77, 0x3, 0x0   	BCF	_CM2CON1bits, 3
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	CM2CON1bits.C2HYS = 0 ;           
002254   9477     bcf     0x77, 0x2, 0x0   	BCF	_CM2CON1bits, 2
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/sc_setup.c	}
002256   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002258   ffd9
00225a   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  490 (0x01ea) bytes ( 0.37%)
                                           ;           	  245 (0x00f5) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.9 #10186 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46k22
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_read_regs
                                           	global	_store_regs

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_ANSELDbits
                                           	extern	_ANSELEbits
                                           	extern	_PMD2bits
                                           	extern	_PMD1bits
                                           	extern	_PMD0bits
                                           	extern	_DACCON1bits
                                           	extern	_VREFCON2bits
                                           	extern	_DACCON0bits
                                           	extern	_VREFCON1bits
                                           	extern	_FVRCONbits
                                           	extern	_VREFCON0bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUICONHbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_T4CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_PSTR3CONbits
                                           	extern	_CCP3ASbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PWM3CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_SLRCONbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP2ASbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PWM2CONbits
                                           	extern	_CCP2CONbits
                                           	extern	_SSP2CON3bits
                                           	extern	_SSP2MSKbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_BAUD2CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_RC2STAbits
                                           	extern	_RCSTA2bits
                                           	extern	_TX2STAbits
                                           	extern	_TXSTA2bits
                                           	extern	_CM12CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON0bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_EEADRbits
                                           	extern	_EEADRHbits
                                           	extern	_RC1STAbits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TX1STAbits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCPASbits
                                           	extern	_PWM1CONbits
                                           	extern	_PWMCONbits
                                           	extern	_BAUD1CONbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PSTR1CONbits
                                           	extern	_PSTRCONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_ANSELD
                                           	extern	_ANSELE
                                           	extern	_PMD2
                                           	extern	_PMD1
                                           	extern	_PMD0
                                           	extern	_DACCON1
                                           	extern	_VREFCON2
                                           	extern	_DACCON0
                                           	extern	_VREFCON1
                                           	extern	_FVRCON
                                           	extern	_VREFCON0
                                           	extern	_CTMUICON
                                           	extern	_CTMUICONH
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_CCP5CON
                                           	extern	_CCPR5
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_PSTR3CON
                                           	extern	_CCP3AS
                                           	extern	_ECCP3AS
                                           	extern	_PWM3CON
                                           	extern	_CCP3CON
                                           	extern	_CCPR3
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_SLRCON
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_PSTR2CON
                                           	extern	_CCP2AS
                                           	extern	_ECCP2AS
                                           	extern	_PWM2CON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_SSP2CON3
                                           	extern	_SSP2MSK
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_BAUD2CON
                                           	extern	_BAUDCON2
                                           	extern	_RC2STA
                                           	extern	_RCSTA2
                                           	extern	_TX2STA
                                           	extern	_TXSTA2
                                           	extern	_TX2REG
                                           	extern	_TXREG2
                                           	extern	_RC2REG
                                           	extern	_RCREG2
                                           	extern	_SP2BRG
                                           	extern	_SPBRG2
                                           	extern	_SP2BRGH
                                           	extern	_SPBRGH2
                                           	extern	_CM12CON
                                           	extern	_CM2CON1
                                           	extern	_CM2CON
                                           	extern	_CM2CON0
                                           	extern	_CM1CON
                                           	extern	_CM1CON0
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_EEADRH
                                           	extern	_RC1STA
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TX1STA
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TX1REG
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RC1REG
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SP1BRG
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_SP1BRGH
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCPAS
                                           	extern	_PWM1CON
                                           	extern	_PWMCON
                                           	extern	_BAUD1CON
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_PSTR1CON
                                           	extern	_PSTRCON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_registers__store_regs	code
                                           _store_regs:
                                           ;	.line	43; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void store_regs(uint8_t * i2c_regs, uint8_t num_regs) {
001ad2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001ad4   ffe5
001ad6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001ad8   ffd9
001ada   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001adc   ffe5
001ade   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001ae0   ffe5
001ae2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001ae4   ffe5
001ae6   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001ae8   ffe5
001aea   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001aec   ffe5
001aee   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001af0   ffe5
001af2   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001af4   ffe5
001af6   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001af8   ffe5
001afa   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001afc   ffe5
001afe   0e02     movlw   0x02             	MOVLW	0x02
001b00   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001b02   f000
001b04   0e03     movlw   0x03             	MOVLW	0x03
001b06   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001b08   f001
001b0a   0e04     movlw   0x04             	MOVLW	0x04
001b0c   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001b0e   f002
001b10   0e05     movlw   0x05             	MOVLW	0x05
001b12   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
001b14   f003
                                           ;	.line	46; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
001b16   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001b18   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00127_DS_:
001b1a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001b1c   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
001b1e   e22a     bc      0x001b74         	BC	_00129_DS_
                                           ;	.line	49; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ; 
001b20   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
001b22   ffa9
                                           ;	.line	50; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001b24   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	51; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001b26   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	52; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
001b28   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	53; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	val = EEDATA ;
001b2a   cfa8     movff   0xfa8, 0x005     	MOVFF	_EEDATA, r0x05
001b2c   f005
                                           ;	.line	56; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	if (val != i2c_regs[i]) {
001b2e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001b30   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001b32   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001b34   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001b36   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001b38   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001b3a   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001b3c   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001b3e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001b40   c006     movff   0x006, 0xfe9     	MOVFF	r0x06, FSR0L
001b42   ffe9
001b44   c007     movff   0x007, 0xff3     	MOVFF	r0x07, PRODL
001b46   fff3
001b48   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001b4a   ec7b     call    0x0022f6, 0x0    	CALL	__gptrget1
001b4c   f011
001b4e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001b50   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001b52   1806     xorwf   0x06, 0x0, 0x0   	XORWF	r0x06, W
001b54   e00d     bz      0x001b70         	BZ	_00128_DS_
                                           ;	.line	57; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEDATA = i2c_regs[i] ;      // Prepare data
001b56   c006     movff   0x006, 0xfa8     	MOVFF	r0x06, _EEDATA
001b58   ffa8
                                           ;	.line	59; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001b5a   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	60; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001b5c   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	61; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 1 ;       // Allow write cycle
001b5e   84a6     bsf     0xa6, 0x2, 0x0   	BSF	_EECON1bits, 2
                                           ;	.line	63; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 0 ;        // Disable interrupts
001b60   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	65; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0x55 ;             // "magic" sequence for write
001b62   0e55     movlw   0x55             	MOVLW	0x55
001b64   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	66; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON2 = 0xaa ;
001b66   0eaa     movlw   0xaa             	MOVLW	0xaa
001b68   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	68; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WR = 1 ;         // Initiate write
001b6a   82a6     bsf     0xa6, 0x1, 0x0   	BSF	_EECON1bits, 1
                                           ;	.line	70; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	INTCONbits.GIE = 1 ;        // Enable interrupts
001b6c   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	72; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.WREN = 0 ;       // Prevent write cycle
001b6e   94a6     bcf     0xa6, 0x2, 0x0   	BCF	_EECON1bits, 2
                                           _00128_DS_:
                                           ;	.line	48; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001b70   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
001b72   d7d3     bra     0x001b1a         	BRA	_00127_DS_
                                           _00129_DS_:
                                           ;	.line	75; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
001b74   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
001b76   f008
001b78   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001b7a   f007
001b7c   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001b7e   f006
001b80   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001b82   f005
001b84   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001b86   f004
001b88   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001b8a   f003
001b8c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001b8e   f002
001b90   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001b92   f001
001b94   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001b96   f000
001b98   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001b9a   ffd9
001b9c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_registers__read_regs	code
                                           _read_regs:
                                           ;	.line	29; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	void read_regs(uint8_t * i2c_regs, uint8_t num_regs) {
001d90   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001d92   ffe5
001d94   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001d96   ffd9
001d98   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001d9a   ffe5
001d9c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001d9e   ffe5
001da0   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001da2   ffe5
001da4   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001da6   ffe5
001da8   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001daa   ffe5
001dac   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001dae   ffe5
001db0   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001db2   ffe5
001db4   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001db6   ffe5
001db8   0e02     movlw   0x02             	MOVLW	0x02
001dba   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001dbc   f000
001dbe   0e03     movlw   0x03             	MOVLW	0x03
001dc0   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001dc2   f001
001dc4   0e04     movlw   0x04             	MOVLW	0x04
001dc6   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
001dc8   f002
001dca   0e05     movlw   0x05             	MOVLW	0x05
001dcc   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
001dce   f003
                                           ;	.line	32; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADRH = 0x00 ;
001dd0   6aaa     clrf    0xaa, 0x0        	CLRF	_EEADRH
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001dd2   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00107_DS_:
001dd4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001dd6   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
001dd8   e219     bc      0x001e0c         	BC	_00109_DS_
                                           ;	.line	35; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EEADR = i ;              // Read I2C address from 00 location
001dda   c004     movff   0x004, 0xfa9     	MOVFF	r0x04, _EEADR
001ddc   ffa9
                                           ;	.line	36; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.EEPGD = 0 ;      // Access data EEPROM
001dde   9ea6     bcf     0xa6, 0x7, 0x0   	BCF	_EECON1bits, 7
                                           ;	.line	37; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.CFGS = 0 ;
001de0   9ca6     bcf     0xa6, 0x6, 0x0   	BCF	_EECON1bits, 6
                                           ;	.line	38; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	EECON1bits.RD = 1 ;         // Initiate read
001de2   80a6     bsf     0xa6, 0x0, 0x0   	BSF	_EECON1bits, 0
                                           ;	.line	39; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	i2c_regs[i] = EEDATA ;
001de4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001de6   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001de8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001dea   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001dec   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
001dee   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001df0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001df2   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
001df4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001df6   cfa8     movff   0xfa8, 0xfe5     	MOVFF	_EEDATA, POSTDEC1
001df8   ffe5
001dfa   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
001dfc   ffe9
001dfe   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
001e00   fff3
001e02   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001e04   ec9a     call    0x002334, 0x0    	CALL	__gptrput1
001e06   f011
                                           ;	.line	34; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	for(i = 0 ; i < num_regs ; i++) {
001e08   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
001e0a   d7e4     bra     0x001dd4         	BRA	_00107_DS_
                                           _00109_DS_:
                                           ;	.line	41; /home/tized/Projects/CNC/stepperCon/firmware/registers.c	}
001e0c   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001e0e   f007
001e10   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001e12   f006
001e14   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001e16   f005
001e18   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001e1a   f004
001e1c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001e1e   f003
001e20   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001e22   f002
001e24   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001e26   f001
001e28   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001e2a   f000
001e2c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001e2e   ffd9
001e30   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  366 (0x016e) bytes ( 0.28%)
                                           ;           	  183 (0x00b7) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    9 (0x0009) bytes


                                           	end
